<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>AI探索站 - 即刻圈子</title>
        <link>https://m.okjike.com/topics/63579abb6724cc583b9bba9a</link>
        
        <item>
            <id>https://m.okjike.com/originalPosts/685105bccdf8310046e89d4c</id>
            <title>AI探索站 06月17日</title>
            <link>https://m.okjike.com/originalPosts/685105bccdf8310046e89d4c</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/685105bccdf8310046e89d4c</guid>
            <pubDate></pubDate>
            <updated>Tue, 17 Jun 2025 06:05:48 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    手机带来一个现象，很多人活成了美图秀秀和朋友圈中的自己，颜值大幅提升，从而无法离开美图秀秀。<br />LLM 也会带来一个现象，很多人活成了 LLM中的自己，智力大幅提升，从而无法离开 LLM。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/6850ec3d823f9a946aa25c94</id>
            <title>AI探索站 06月17日</title>
            <link>https://m.okjike.com/originalPosts/6850ec3d823f9a946aa25c94</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/6850ec3d823f9a946aa25c94</guid>
            <pubDate></pubDate>
            <updated>Tue, 17 Jun 2025 04:17:01 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    Gemini 的产品和研发负责人录了个视频<br /><br />讨论了一下关于关于优秀编码模型的理念以及 Vibe Coding 的影响，以及编程语言的未来<br /><br />很多见解挺好的，说明 Gemini 的代码能力进步还是有方法的<br /><br />视频：https://youtu.be/jwbG_m-X-gE?si=u0nz9RxOaUlhW_Ab<br /><br />总结了一些我觉得重要的内容：<br /><br />📌 谷歌 Gemini 团队的编码模型训练方法论<br /><br />🎯 Gemini 早期编程目标及其局限性<br /><br />1️⃣ 竞技编程（Competitive programming）：尽管像OpenAI等公司在评估模型编程能力方面做了很好的工作（如human eval），但竞技编程的能力并不一定等同于一个强大的团队成员所需要的技能，因此这与开发者最终的需求有所偏差<br /><br />2️⃣ LMS（Language Model Systems）：这也不是日常开发工作的真实写照<br /><br />3️⃣ 代码补全（Code completion）：这虽然更具生产力，但其应用空间有限，不足以体现模型现在和未来能够实现的所有功能。<br /><br />Danny Tarlo认为，前两个目标并不能真正反映开发者的实际工作，而第三个目标则不够宏大。<br /><br />仅仅关注竞技编程是不够的，因为它无法涵盖软件开发人员日常工作中的更广泛能力需求。竞技编程通常是在一个"非常自给自足的环境中"工作，从零开始构建相对简短的解决方案。然而，软件开发人员日常工作涉及处理大型代码库中的错误报告，这些错误可能分散在"代码库中一百个不同的位置"。因此，模型需要的能力集远大于竞技编程所包含的。<br /><br />💡 Gemini 编程优化当前关注的"核心要素"：<br /><br />1️⃣ 数据与方法论：Danny强调，一个优秀的编程模型主要取决于"数据和方法论"，太鸡贼了最重要的内容一笔带过。<br /><br />2️⃣ 代码库上下文的重要性（Repo Context）：代码库上下文是如此重要。模型不仅要处理代码补全，更要支持"多文件编辑，比只给你几行代码更大的更改"。目标是让模型能够帮助开发者在代码库的上下文中进行需要一小时完成的复杂工作。<br /><br />3️⃣ "Vibe Coding"与专业开发者：他们也看到"Vibe Coding"的兴起。这指的是那些不一定是专业程序员，或者只有少量编程经验的人，利用工具扩展他们使用编程的能力。Andre Karpathy关于"live coding"的推文进一步普及了这个概念。团队的最大愿望是赋能那些不具备专业编程技能的人，让他们能够自己完成一些基本的事情。<br /><br />🔥 代码就是一切<br /><br />• 代码作为通识能力：代码能力的提升也能反哺Gemini的其他能力。有些问题可能起初不是一个编程问题，但可以将其转化为代码问题来解决，例如帮助学生解决数学应用题，或者在代码空间中进行推理。<br /><br />• "代码就是一切"的愿景："代码就是一切"。举例说，用户询问报税技巧等自然语言问题，其核心需求其实可以通过生成一个"最基本的报税计算"来解决，即便用户没有明确要求"编写一个迷你Quickbook"。<br /><br />📊 评估（Evals）与挑战：<br /><br />• 真实世界价值：团队的目标是"理解、预测并押注真实世界的价值将走向何方"。要专注于"这个领域的核心基本挑战，这些挑战对于真实世界的价值是有用的"。<br /><br />• 评估的实用性：最能反映真实情况的评估是"在AB测试中发布一些东西，看看真实世界会发生什么"。这不切实际，因为不能指望一个新模型在创业公司运行一年来评估其成功。他们需要寻找实用的替代指标。<br /><br />• 泛化性挑战：编程模型的最大挑战在于，需要构建"能够同时适用于所有用例的能力"。用户使用代码模型的方式多种多样，模型需要能够泛化到所有这些不同的使用场景。<br /><br />🗂️ 面对处理越来越复杂的代码库（如百万行代码的monorepo）的问题，有两种主要策略：<br /><br />1️⃣ 长上下文能力：让模型能够将整个代码库作为上下文来处理，并在一个步骤中解决问题。<br /><br />2️⃣ Agentic编码（Agentic Coding）：模型像人一样工作，通过代码搜索、查看文件层级、跳转阅读代码等方式，自主地解决问题。<br /><br />🎯 Gemini 团队在编程优化上的短期目标：<br /><br />• 解决2.5 Pro版本中"工具调用功能"的可靠性问题，特别是在代码上下文和Agentic模型进行代码编辑方面<br />• 细致调整用户交互，确保用户体验更流畅<br />• 改进模型在特定用例类别上的表现<br /><br />✨ 模型在风格上的表现也至关重要，例如在生成网页UI时，除了功能正确，还需要美观和符合专业标准。Connie提到，有时即使模型犯了两次错误，但如果它表现得"有点调皮"，说"第三次会成功"或"这真的很难，我们再试一次"，这反而能让用户"原谅Gemini"，并建立信任。她强调，"这种风格，比如语气、个性，不一定是你在编码中认为关键的东西，但它在人们接受这些模型的方式中却很重要"。<br /><br />🌐 为何选择通用模型而非代码专用模型：<br /><br />• 超越代码的知识需求：代码模型需要"世界知识"，而不仅仅是代码本身。例如，一个"Taylor Swift排名应用"就需要对世界有一定了解，而不仅仅是代码。<br /><br />• 开发流程的复杂性：代码意味着"软件开发过程的越来越多部分"，并需要连接到各种不同的信息，其中一些是代码特定的，一些则不是。<br /><br />• 通用模型的优势："将所有这些都看作是相互关联的，我们都在为模型的通用能力而共同努力，我们将努力找到最佳方式让一切协同工作，拥有一个真正优秀的通用模型，这对我来说是一个很好的方向"。事实证明，这种方法成功地构建了一个出色的编程模型，同时在其他方面也表现出色。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/6850aa222b50c68918ea0f09</id>
            <title>AI探索站 06月16日</title>
            <link>https://m.okjike.com/originalPosts/6850aa222b50c68918ea0f09</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/6850aa222b50c68918ea0f09</guid>
            <pubDate></pubDate>
            <updated>Mon, 16 Jun 2025 23:34:58 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    这篇文章写了一天，内容准备了三个月。🥲
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/684fd230f0d718ce7a98c061</id>
            <title>AI探索站 06月16日</title>
            <link>https://m.okjike.com/originalPosts/684fd230f0d718ce7a98c061</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/684fd230f0d718ce7a98c061</guid>
            <pubDate></pubDate>
            <updated>Mon, 16 Jun 2025 08:13:36 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    几周前就知道了 MiniMax 出了一个通用 Agent 产品<br /><br />试了一下，他们可能做出了一个比 Lovable 还强大的多大 Vibe Coding 产品<br /><br />自主查找网页中需要的信息重新进行整理，不只是文本，图片也会，找不到也可以生成，完全不需要复杂的资料准备，直接生成就能用<br /><br />这里有所有的提示词和演示网页地址：https://mp.weixin.qq.com/s/E1ivlVdvgP6EE9k4rnVGQg<br /><br />下面是几个测试例子🌰：<br /><br />先让他用 MiniMax 自己的音频生成能力和谷歌地图 MCP 搞一个旅游景点介绍网站。<br />基本上所有的信息都帮你搞好放在网页里面了<br />我回去看了一下步骤，发现搜索的图片结果质量都非常高，Agent 还会自己对图片进行挑选。<br />音频生成也调用 MiniMax 自家的 MCP 搞定了，而且切换景点就会自动播放。<br />他居然会利用 browser use 工具对网页进行测试！<br />会挨个点击所有的网页功能，然后他发现了地图的问题，就换成了按钮跳转的方式，非常智能。<br /><br />知名艺术家的初见与告别网页生成<br /><br />我发现他🐂🍺的图片检索和嵌入能力之后就想对他进行一个更加复杂的考验。<br />让他帮忙生成一个关于知名艺术家初见与告别的网页，里面会展示一些知名艺术家早期艺术作品和晚年的对比，方便大家看到这些艺术家的成长轨迹。<br />第一次我把提示词写错了写成了一个艺术家，所以他就只选了一个艺术家。<br />结果好死不死选了梵高，梵高的艺术生涯非常短暂，不太好体现时间带给他的沉淀和变化。<br />但是整个网页的排版和视觉真的非常高级，而且还有数字跳动的动画。<br />作品对比这里更是全面，上面是时间，下面是对应的两个时间点的两幅作品，除了介绍文字之外还有作品的颜色色值，另外还有艺术特征提炼。<br />下面数据可视化这里先是用曲线图介绍了每一年梵高的创作数量，然后又用卡片展示了梵高每个艺术转折点，还有对应的标签，对于了解他的生平非常有帮助。<br /><br />攻壳机动队的诞生和影响网页生成<br /><br />由于这里的对比比较少，于是我把上面提示词中的“一个”改成了“多个”重新生成了一个网页。<br />这次的视觉表现整个更顶了，这个首图的字体和渐变蒙版，简洁中又有细节。<br />而且可以看一下按钮的动效是加了缓动的颜色改变和投影出现的非常自然，投影还是弥散阴影。<br />还有下面引导鼠标滚动的那个动画，鼠标图标的滚动部分除了是主题色的渐变外还有动画，太精致了。<br />在艺术品展示这里它采用了，两级页面的模式，而且找到的艺术品图片和内容都是能对上的。<br />光这一点就已经吊打很多所谓的 AI 编程 Agents 了，吹这吹那，结果都没办法把图片自动放到网页里。<br /><br />最后想整个大的，完全让他自己搜索数据和内容对攻壳机动队这个对后世赛博朋克风格影响很深远的电影进行分析和介绍。<br />生成之后他这个封面图照的很好，而且下面还有已抵达幻景市的文案，相当应景。<br />英文标题选了非常有赛博朋克风格的字体。<br />然后他先是介绍了作品的创作背景，两个非常天才的创作者电影导演押井守和漫画作者士郎正宗，这个时候的英文标题字体就更加为页面增加了一些赛博氛围。<br />之后分析了作品的核心主题，主要是奠定了赛博朋克高科技、低生活的作品核心，以及对人类意识的讨论。<br />可以说非常专业了他找的作品分析文案做参考的时候找的也很好。<br />之后讨论了电影带来的视觉表现理念革新，在技术上和视觉上都有。<br />数据这里的表现就更顶了，展示形式和图表选择都非常准确，像一个非常老练的设计师。<br />先是将核心数据卡片化展示，之后用折线图对比不同作品的 IMDB 评分和豆瓣评分，之后用圆点展示发布时间和评分的关系，最后用卡片展示作品的商业成就。<br />最后用文化价值拔高和总结，整个网页不管是从一个报告看还是从一个网页设计看都无可挑剔。<br /><br />目前这个产品支持免费试用，强烈建议你去试试，看看在内容检索、生成和编码上都很强之后结合起来的产品有多强大。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/684f99f9f0d718ce7a94b769</id>
            <title>AI探索站 06月16日</title>
            <link>https://m.okjike.com/originalPosts/684f99f9f0d718ce7a94b769</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/684f99f9f0d718ce7a94b769</guid>
            <pubDate></pubDate>
            <updated>Mon, 16 Jun 2025 04:13:45 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    近期另一个爆火的 AI 视频品类#ai创造营# #ai编程# <br /><br />一些日常不好实现的 ASMR 视频，比如切割各种玻璃金属材质的水果<br /><br />搞了一套提示词实现了一下，需要用到 Veo 3 的文生视频<br /><br />提示词：<br /><br />ASMR video of slicing a glass strawberry: From an extreme macro viewpoint, a flawlessly transparent, hyper-detailed glass strawberry sits on a warmly lit wooden cutting board.<br /><br /> The camera gently pushes in and out, capturing iridescent highlights and rainbow refractions dancing across its surface. Angles alternate between overhead and 45-degree side shots, freezing the exact moment the knife meets the brittle “fruit” and revealing delicate internal striations. <br /><br />Each slow, deliberate cut releases a crisp ding—the fragile chime of shattering glass—followed by the soft clatter of tiny shards and the low, resonant scrape of steel against wood, layering a rich ASMR soundscape in an otherwise hushed room. <br /><br />Composition follows the rule of thirds, with the strawberry anchored at a golden-ratio point; the background melts into a dreamy bokeh of warm light and floating dust motes. Overall, the palette is clear and serene, immersing viewers in the mesmerizing textures of glass fracturing and the intimate, crystalline sound of every slice.
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/684f02a9e441f085b7ce67c6</id>
            <title>AI探索站 06月15日</title>
            <link>https://m.okjike.com/originalPosts/684f02a9e441f085b7ce67c6</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/684f02a9e441f085b7ce67c6</guid>
            <pubDate></pubDate>
            <updated>Sun, 15 Jun 2025 17:28:09 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    我为什么要创建 Fellou AI 浏览器<br />这其实是一个关于生产力的故事
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/684e8b7e7d602e7777a6107a</id>
            <title>AI探索站 06月15日</title>
            <link>https://m.okjike.com/originalPosts/684e8b7e7d602e7777a6107a</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/684e8b7e7d602e7777a6107a</guid>
            <pubDate></pubDate>
            <updated>Sun, 15 Jun 2025 08:59:42 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    好像最近这种拉布布动态壁纸很火，跑了一个
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/684277e74e98b7acd544ba17</id>
            <title>AI探索站 06月06日</title>
            <link>https://m.okjike.com/originalPosts/684277e74e98b7acd544ba17</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/684277e74e98b7acd544ba17</guid>
            <pubDate></pubDate>
            <updated>Fri, 06 Jun 2025 05:08:55 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    最近大家都在聊 AI 加持下的 vibe coding，我来聊聊作为资深开发者最近高强度使用 AI 的一些感受：<br /><br />一句话总结，AI 让不会写代码的人具备了“直接造辆车”的能力，而让资深开发者一个人就有了“独立建造航母”的可能。<br /><br />### 项目重构<br /><br />最近使用 claude-4 对我之前的一些代码进行了重构。原因是原来的实现中，为了降低编写时的心智负担，会使用一些性能偏低但是易于书写的代码。比方说自动锁管理、ARC、使用 array 数据结构代替 queue。<br /><br />然而用 AI 实现就没了这些负担，我先让 AI 为原始实现编写完整测试用例，确保原代码行为明确，然后让 AI 对整个 class 进行重构，追求极致性能，写完新代码后再重新运行测试保证行为一致。<br /><br />就这样，我轻松完成了部分核心数据结构的重构。尽管重构后的代码量几乎翻倍，但逻辑清晰、复杂度可控，换来的则是约 20% 的性能提升。<br /><br />核心是，AI 编写代码不怕苦不怕累，没有必要为了简化代码而牺牲性能。人类工程师目前主流习惯是牺牲部分运行性能以换取开发效率。<br /><br />### AI 编程语言<br /><br />这牵扯出的另一个观察是，什么编程语言对 AI 更友好，我的观察是可读性越高、行为越明确的语言效果越好。语法糖等简化编码技术，反而不利于 AI 使用。（AI 在发现一些奇怪的行为是运算符重载导致的不知道会不会跟我一样跳脚骂街）<br /><br />而像 SwiftUI 那些优势仅在开发效率上的技术，在 AI 时代更显得有些生不逢时。反正都是 AI 写，AI 用 UIKit/AppKit 实现不过是代码长一点而已，在可控性和行为明确性方面更适合 AI 自动化维护，性能也高的多。<br /><br />### AI 的资深<br /><br />虽然 AI 的编码技能，比起资深的工程师其实可能还是会有差距，但是要论知识丰富程度，则远非任何个体可比。<br /><br />这个优势体现在当我要去实现一些技术盲区时，原本的流程大概是：先读几本书，再对照比较一系列 RFC，再请教下相关领域的朋友确认自己已经理解。或者先按照自己的想象做个最小工程实践，然后再根据各种问题一点点填坑。<br /><br />比方说最近在实现 IPv6 ND 协议栈，一些特定的 RA 消息构造在某些操作系统上就是无法生效，原本这可能要耗费我几天的时间去研究，阅读各种文献甚至 kernel 源码实现，而现在只需请教 AI，就能非常准确地找到答案。<br /><br />AI 的这种资深，在你对某个技术的表层足够了解，但是缺乏经验和细节信息时，能够极快的帮你补全。<br /><br />### 极强的 debug 能力<br /><br />我的项目里有一个藏了很久的问题，在特定情况下会出现 TCP 性能下降，由于并没有产生任何明确的报错，这让修正这个问题变得异常麻烦。<br /><br />我原本是单纯向 AI 描述了我的使用场景和问题表现，AI 提出了几种猜想，大部分我看一眼就知道不靠谱，剩下几个试了下也并无效果。索性，我直接把 100MB 的抓包结果丢给了 o3 让他分析。它在几分钟内就精准指出了问题所在，甚至给出了改进建议。这种调试能力在人类团队中几乎无法复现。<br /><br />如此庞大的数据量，人工分析非常困难。即使借助各种工具，仅学习用法、配置环境就已令人头大。（因为 TCP 流控分析的各种工具链基本都是上个世纪的项目）<br /><br />现在我已经习惯了这种 vibe debug，遇到什么问题，直接把 verbose 日志和问题描述丢给 AI，大概率就能直接找到问题，这其实也是得益于 AI 的不怕苦不怕累的精神。<br /><br />### Peer review<br /><br />作为独立开发者，我的 code review 一直以来只能靠自己，但是自己写的 bug，很多时候自己是看不出来的🙈，现在我只需将 git diff 的结果交给 AI，就能请它帮我 review。<br /><br />同样的，我也会 review AI 给出的结果，AI 当然也会犯错，高级低级的都有。但是比起人类同事来说，AI 没有 ego，能很好地接受反馈并立即调整；很多人类做不到，或至少过程很曲折。<br /><br />### 职业影响<br /><br />就目前 AI 的能力来看，无疑是对初级开发者就业市场产生了巨大的压力，对于资深工程师来说，反而是一种赋能。（我目前还是能为找到 AI 的错误并指导它而沾沾自喜，但也不知道还能持续多久。）<br /><br />这比较让人担忧的是，这可能导致职业断层，因为初级开发者根本没有机会得到训练机会而成长。<br /><br />不过这已经早已不仅仅是软件工程师所面临的问题，本质上来说，所有脑力工作者的职业都受到了巨大威胁。像咨询、律师等职业，还可以依靠私域信息门槛维持。而像医生这样完全依赖公域信息的职业，初级职位也同样完全可以被 AI 替代了，当然最终取决于患者的接受程度。<br /><br />我最近一次体检后的报告喂给 o3 进行解读，他给出的信息量、准确性、建议，均远超全科医生给出的解读。不仅仅是因为 AI 的信息更全面，AI 可以为报告中每一项异常数据，检索最新研究与各国医疗指南，并整合后给出建议，甚至由于 GPT 已经了解我的生活习惯，能更优针对性的给出意见。而这种工作量对于人类医生来说是不可接受的（当然大多数情况下也确实没有必要）。<br /><br />很多人对 AI 医疗的顾虑是：AI 犯错了怎么办？然而其实人类医生也会犯错，而且就现在的 AI 水平来看，AI 犯错的概率应该已经比一般人类医生低了。当然最优解还是兼听则明，把 AI 的意见告知医生，也把医生的反馈告知 AI，基本最后都会达成一致。对于一些不重要的小问题，仅 AI 意见完全足够。<br /><br />### AI 的限制<br /><br />当然 AI 也不是万能的，甚至可以说局限性相当明显。claude-4 虽然非常强，但是随着 context 的增长，注意力溃散的非常严重，后面基本就像喝多了一样。<br /><br />当前的最佳实践是：尽量保持 context 精简，聚焦具体任务，依靠人力来拆解复杂目标。<br /><br />比方说先用一个 context 确定具体需求，再开一个 context 将明确好了的需求转换为具体任务列表，再把任务单独交给一个个 context 去具体实现。这样效果会好很多。<br /><br />仔细一看，这不就是人类的团队协作模式嘛 😂<br /><br />这让我想起不久前由 GPT o1 和 DeepSeek R1 的思维链引发的 AI 能力巨幅提升。其实在思维链能力出来之前，就可以靠 prompt 指引 AI 一步步思考，取得类似的效果，甚至催生了 prompt 工程师职业。然而直接在模型层面将这种能力整合后，prompt 引导就非常多余了。<br /><br />那么目前编程实践中，如今常用的 context 切分技巧，我认为在不久的将来也可能被模型层原生支持，即 AI 自主可以通过切换 context 的方式维持注意力，保持高效。这可能带来 AI 能力的又一次飞跃式进步。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/68393bb5d9288e4a516c8782</id>
            <title>AI探索站 05月30日</title>
            <link>https://m.okjike.com/originalPosts/68393bb5d9288e4a516c8782</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/68393bb5d9288e4a516c8782</guid>
            <pubDate></pubDate>
            <updated>Fri, 30 May 2025 05:01:41 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    感谢@硬地骇客 的支持，把三五环和半拿铁的多数文稿整理了一下，投入到 ima.copilot 里面，可以对话了。<br /><br />之前跟 ima 的朋友交流，就聊到未来知识库的「整理」变得没那么重要，而「采集」变得更重要，独特的筛选标准，以及采集逻辑，是决定知识库的价值的。ima 里也有很多筛选自己喜欢的内容而形成的公开知识库。<br /><br />对内容创作者自己来说，沉淀好自己的内容也特别有意义，有的不存不用确实就容易丢了。哪怕对别人没用，自己时常反刍也很有帮助。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/682d6a21ca977f7fc7e6e8e6</id>
            <title>AI探索站 05月21日</title>
            <link>https://m.okjike.com/originalPosts/682d6a21ca977f7fc7e6e8e6</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/682d6a21ca977f7fc7e6e8e6</guid>
            <pubDate></pubDate>
            <updated>Wed, 21 May 2025 05:52:33 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    但我觉得 Sergey Brin 和 Demis Hassabis 那个对谈里最有趣的问题其实是这个。<br />主持人：你会雇佣一个在面试里用 AI 的面试者吗？<br />两个人显然都愣住了，哼哼唧唧半天，最后基本上都是说自己也说不好。<br /><br />这看起来是个实操细节，事实上是个本质议题。就是如果 AGI 真的如他们预言的那样在五年左右（见上一条 https://web.okjike.com/u/0E8AFC24-2DB7-4C8D-8D27-794903C79641/post/682d48f8e0619112afecf6e8 ）到来，那今天你就要开始想你到底怎么量度工作的价值，包括面试的时候你要考察什么东西。换句话说就是：人这个世界上最重要的商品和资源到底怎么定价。<br /><br />很显然即使聪明如 Sergey Brin 和 Demis Hassabis 也没想好。我不认为世界上真的有人想清楚了这个问题，但五年后社会经济怎么运转是基于这个问题的答案的。
                ]]>
            </content:encoded>
        </item>
        
    </channel>
</rss>