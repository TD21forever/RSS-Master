<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>AI探索站 - 即刻圈子</title>
        <link>https://m.okjike.com/topics/63579abb6724cc583b9bba9a</link>
        
        <item>
            <id>https://m.okjike.com/originalPosts/684aa0c25c33a444fbdd8ac7</id>
            <title>AI探索站 06月12日</title>
            <link>https://m.okjike.com/originalPosts/684aa0c25c33a444fbdd8ac7</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/684aa0c25c33a444fbdd8ac7</guid>
            <pubDate></pubDate>
            <updated>Thu, 12 Jun 2025 09:41:22 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    和大家分享一个真实的AI创业故事<br />2个人，不到一年时间，2万月活，100万月收入<br />而且完全是在国内，没有出海<br /><br />或许你都不相信<br />但这是真实的<br />我们在一个小群里，基本每天都会讨论<br />我是一步步看着他的各种产品和运营策略<br />然后数据指标的各种曲线<br /><br />一直到今天，借着5月份突破100万月收入的契机<br />把这个故事完整写了出来！<br /><br />个人觉得有几点还蛮有启发的：<br /><br />1. 时机比努力重要 <br />AI能力的爆发 + 网文行业的痛点 + 创始人的行业经验<br /><br />2. 让用户成为你的员工 <br />通过利益机制，让用户帮你推广、帮你答疑、帮你创造内容。<br /><br />3. 生态思维 <br />不是做一个工具，而是构建一个生态。生态很难被复制。<br /><br />4. 正反馈循环 <br />用户赚钱→分享案例→吸引新用户→更多人赚钱，<br />这个飞轮一旦转起来就停不下来。<br /><br />不知道你怎么看<br />创始人在这： @猛龙过江0601<br /><br />全文：https://mp.weixin.qq.com/s/deJQvoqlvVKe9vTpko3OqQ
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/684a8519f0d718ce7a3fd326</id>
            <title>AI探索站 06月12日</title>
            <link>https://m.okjike.com/originalPosts/684a8519f0d718ce7a3fd326</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/684a8519f0d718ce7a3fd326</guid>
            <pubDate></pubDate>
            <updated>Thu, 12 Jun 2025 07:43:21 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    如今这些 AI 吧，不管你问它啥，它首先先夸你问题问得好，情绪价值先拉满。<br /><br />我：（一个纯技术问题。）<br />AI：这是一个具有结构性意义的提问，我们可以从几个维度分析。<br />我：（甚至不知道什么是具有结构性意义的提问但爽到了。） ​​​
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/684a690d85dc67026ef727b3</id>
            <title>AI探索站 06月12日</title>
            <link>https://m.okjike.com/originalPosts/684a690d85dc67026ef727b3</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/684a690d85dc67026ef727b3</guid>
            <pubDate></pubDate>
            <updated>Thu, 12 Jun 2025 05:43:41 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    Windsurf 这个更新有意思<br /><br />自己出了一个浏览器<br /><br />主要的功能是内置 AI，能自动感知和理解用户在浏览器中的操作和上下文，无需手动复制内容或链接<br /><br />推出浏览器的原因<br /><br />弥补信息断层：开发者在浏览器中查阅文档、调试前端、查看 CI 等操作，原本 AI 无法感知，导致协作存在信息盲区。<br />实现“流意识”：Windsurf 强调“流意识”，即让 AI 和用户共享操作时间线，彼此了解对方的每一步操作，提升协作效率。<br />补全开发场景：此前 Windsurf 已覆盖编辑器、终端等场景，浏览器是开发流程中最后一个重要但未被 AI 感知的环节。<br /><br />浏览器特色功能<br /><br />AI 深度集成：Windsurf 浏览器内置 AI，能自动感知和理解用户在浏览器中的操作和上下文，无需手动复制内容或链接。<br />全流程协同：AI 可访问当前所有打开的标签页，自动获取页面内容、日志、DOM 等信息，实现与编辑器、终端等场景的无缝协作。<br />操作时间线共享：AI 与用户共享完整的操作时间线，未来可根据历史操作自动接管部分浏览器任务。<br />基于 Chromium：作为 Chromium 分支，具备常规浏览器的全部功能，开发者可像用普通浏览器一样使用。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/684a098385dc67026ef065e8</id>
            <title>AI探索站 06月11日</title>
            <link>https://m.okjike.com/originalPosts/684a098385dc67026ef065e8</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/684a098385dc67026ef065e8</guid>
            <pubDate></pubDate>
            <updated>Wed, 11 Jun 2025 22:56:03 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    🍀 YouMind 0.3: The Last AI Creation Agent<br /><br />YouMind 是人人可用的 AI 创作工具。让每一个想创作的人，都有能力从起心动念到开始行动。<br /><br />今天发布 0.3 版本，增加了类似 Manus 的一键找资料写文档功能，能搜索并保存高质量资料，同时文档可类似 Cursor 一样进行编辑。还可生成好看的配图、生成播客等。<br /><br />无需邀请码，注册即可用：youmind.ai<br />需 PC 下访问<br /><br />你是你的船，YouMind 是你的桨。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/68499465f0d718ce7a2f3cf9</id>
            <title>AI探索站 06月11日</title>
            <link>https://m.okjike.com/originalPosts/68499465f0d718ce7a2f3cf9</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/68499465f0d718ce7a2f3cf9</guid>
            <pubDate></pubDate>
            <updated>Wed, 11 Jun 2025 14:36:21 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    终于！朋友们<br /><br />现在所有的 Arc 用户都可以下载 Dia AI浏览器<br /><br />而且每个用户可以邀请三个新用户<br /><br />需要邀请码的可以在这里传火。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/68471630edbfdda4e57f6162</id>
            <title>AI探索站 06月09日</title>
            <link>https://m.okjike.com/originalPosts/68471630edbfdda4e57f6162</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/68471630edbfdda4e57f6162</guid>
            <pubDate></pubDate>
            <updated>Mon, 09 Jun 2025 17:13:20 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    找到了一个coze搭建超级高效的办法<br /><br />晚上深入研究了下coze的搭建，之前因为效率和实用的问题，搁置了很久。<br /><br />最近因为找AI产品实习，还是得用coze搭建demo。<br /><br />今天研究出来个高效的方法。用claude4.0，直接告诉他你要搭建什么coze工具，他会帮你生成一套完整的方案。<br /><br />而且还可以讲解coze工作流搭建的基本思路和各种功能的使用。比网上90%以上的文章写的都好。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/68439bc5d82bae994abd354d</id>
            <title>AI探索站 06月07日</title>
            <link>https://m.okjike.com/originalPosts/68439bc5d82bae994abd354d</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/68439bc5d82bae994abd354d</guid>
            <pubDate></pubDate>
            <updated>Sat, 07 Jun 2025 01:54:13 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    我个人目前觉得垂直领域做得最好的AI产品<br />OpenEvidence （医疗）<br />Harvey （法律）<br />Lovart（设计）<br />Gamma（PPT）<br />FateTell（命理）<br />欢迎补充
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/684277e74e98b7acd544ba17</id>
            <title>AI探索站 06月06日</title>
            <link>https://m.okjike.com/originalPosts/684277e74e98b7acd544ba17</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/684277e74e98b7acd544ba17</guid>
            <pubDate></pubDate>
            <updated>Fri, 06 Jun 2025 05:08:55 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    最近大家都在聊 AI 加持下的 vibe coding，我来聊聊作为资深开发者最近高强度使用 AI 的一些感受：<br /><br />一句话总结，AI 让不会写代码的人具备了“直接造辆车”的能力，而让资深开发者一个人就有了“独立建造航母”的可能。<br /><br />### 项目重构<br /><br />最近使用 claude-4 对我之前的一些代码进行了重构。原因是原来的实现中，为了降低编写时的心智负担，会使用一些性能偏低但是易于书写的代码。比方说自动锁管理、ARC、使用 array 数据结构代替 queue。<br /><br />然而用 AI 实现就没了这些负担，我先让 AI 为原始实现编写完整测试用例，确保原代码行为明确，然后让 AI 对整个 class 进行重构，追求极致性能，写完新代码后再重新运行测试保证行为一致。<br /><br />就这样，我轻松完成了部分核心数据结构的重构。尽管重构后的代码量几乎翻倍，但逻辑清晰、复杂度可控，换来的则是约 20% 的性能提升。<br /><br />核心是，AI 编写代码不怕苦不怕累，没有必要为了简化代码而牺牲性能。人类工程师目前主流习惯是牺牲部分运行性能以换取开发效率。<br /><br />### AI 编程语言<br /><br />这牵扯出的另一个观察是，什么编程语言对 AI 更友好，我的观察是可读性越高、行为越明确的语言效果越好。语法糖等简化编码技术，反而不利于 AI 使用。（AI 在发现一些奇怪的行为是运算符重载导致的不知道会不会跟我一样跳脚骂街）<br /><br />而像 SwiftUI 那些优势仅在开发效率上的技术，在 AI 时代更显得有些生不逢时。反正都是 AI 写，AI 用 UIKit/AppKit 实现不过是代码长一点而已，在可控性和行为明确性方面更适合 AI 自动化维护，性能也高的多。<br /><br />### AI 的资深<br /><br />虽然 AI 的编码技能，比起资深的工程师其实可能还是会有差距，但是要论知识丰富程度，则远非任何个体可比。<br /><br />这个优势体现在当我要去实现一些技术盲区时，原本的流程大概是：先读几本书，再对照比较一系列 RFC，再请教下相关领域的朋友确认自己已经理解。或者先按照自己的想象做个最小工程实践，然后再根据各种问题一点点填坑。<br /><br />比方说最近在实现 IPv6 ND 协议栈，一些特定的 RA 消息构造在某些操作系统上就是无法生效，原本这可能要耗费我几天的时间去研究，阅读各种文献甚至 kernel 源码实现，而现在只需请教 AI，就能非常准确地找到答案。<br /><br />AI 的这种资深，在你对某个技术的表层足够了解，但是缺乏经验和细节信息时，能够极快的帮你补全。<br /><br />### 极强的 debug 能力<br /><br />我的项目里有一个藏了很久的问题，在特定情况下会出现 TCP 性能下降，由于并没有产生任何明确的报错，这让修正这个问题变得异常麻烦。<br /><br />我原本是单纯向 AI 描述了我的使用场景和问题表现，AI 提出了几种猜想，大部分我看一眼就知道不靠谱，剩下几个试了下也并无效果。索性，我直接把 100MB 的抓包结果丢给了 o3 让他分析。它在几分钟内就精准指出了问题所在，甚至给出了改进建议。这种调试能力在人类团队中几乎无法复现。<br /><br />如此庞大的数据量，人工分析非常困难。即使借助各种工具，仅学习用法、配置环境就已令人头大。（因为 TCP 流控分析的各种工具链基本都是上个世纪的项目）<br /><br />现在我已经习惯了这种 vibe debug，遇到什么问题，直接把 verbose 日志和问题描述丢给 AI，大概率就能直接找到问题，这其实也是得益于 AI 的不怕苦不怕累的精神。<br /><br />### Peer review<br /><br />作为独立开发者，我的 code review 一直以来只能靠自己，但是自己写的 bug，很多时候自己是看不出来的🙈，现在我只需将 git diff 的结果交给 AI，就能请它帮我 review。<br /><br />同样的，我也会 review AI 给出的结果，AI 当然也会犯错，高级低级的都有。但是比起人类同事来说，AI 没有 ego，能很好地接受反馈并立即调整；很多人类做不到，或至少过程很曲折。<br /><br />### 职业影响<br /><br />就目前 AI 的能力来看，无疑是对初级开发者就业市场产生了巨大的压力，对于资深工程师来说，反而是一种赋能。（我目前还是能为找到 AI 的错误并指导它而沾沾自喜，但也不知道还能持续多久。）<br /><br />这比较让人担忧的是，这可能导致职业断层，因为初级开发者根本没有机会得到训练机会而成长。<br /><br />不过这已经早已不仅仅是软件工程师所面临的问题，本质上来说，所有脑力工作者的职业都受到了巨大威胁。像咨询、律师等职业，还可以依靠私域信息门槛维持。而像医生这样完全依赖公域信息的职业，初级职位也同样完全可以被 AI 替代了，当然最终取决于患者的接受程度。<br /><br />我最近一次体检后的报告喂给 o3 进行解读，他给出的信息量、准确性、建议，均远超全科医生给出的解读。不仅仅是因为 AI 的信息更全面，AI 可以为报告中每一项异常数据，检索最新研究与各国医疗指南，并整合后给出建议，甚至由于 GPT 已经了解我的生活习惯，能更优针对性的给出意见。而这种工作量对于人类医生来说是不可接受的（当然大多数情况下也确实没有必要）。<br /><br />很多人对 AI 医疗的顾虑是：AI 犯错了怎么办？然而其实人类医生也会犯错，而且就现在的 AI 水平来看，AI 犯错的概率应该已经比一般人类医生低了。当然最优解还是兼听则明，把 AI 的意见告知医生，也把医生的反馈告知 AI，基本最后都会达成一致。对于一些不重要的小问题，仅 AI 意见完全足够。<br /><br />### AI 的限制<br /><br />当然 AI 也不是万能的，甚至可以说局限性相当明显。claude-4 虽然非常强，但是随着 context 的增长，注意力溃散的非常严重，后面基本就像喝多了一样。<br /><br />当前的最佳实践是：尽量保持 context 精简，聚焦具体任务，依靠人力来拆解复杂目标。<br /><br />比方说先用一个 context 确定具体需求，再开一个 context 将明确好了的需求转换为具体任务列表，再把任务单独交给一个个 context 去具体实现。这样效果会好很多。<br /><br />仔细一看，这不就是人类的团队协作模式嘛 😂<br /><br />这让我想起不久前由 GPT o1 和 DeepSeek R1 的思维链引发的 AI 能力巨幅提升。其实在思维链能力出来之前，就可以靠 prompt 指引 AI 一步步思考，取得类似的效果，甚至催生了 prompt 工程师职业。然而直接在模型层面将这种能力整合后，prompt 引导就非常多余了。<br /><br />那么目前编程实践中，如今常用的 context 切分技巧，我认为在不久的将来也可能被模型层原生支持，即 AI 自主可以通过切换 context 的方式维持注意力，保持高效。这可能带来 AI 能力的又一次飞跃式进步。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/68393bb5d9288e4a516c8782</id>
            <title>AI探索站 05月30日</title>
            <link>https://m.okjike.com/originalPosts/68393bb5d9288e4a516c8782</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/68393bb5d9288e4a516c8782</guid>
            <pubDate></pubDate>
            <updated>Fri, 30 May 2025 05:01:41 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    感谢@硬地骇客 的支持，把三五环和半拿铁的多数文稿整理了一下，投入到 ima.copilot 里面，可以对话了。<br /><br />之前跟 ima 的朋友交流，就聊到未来知识库的「整理」变得没那么重要，而「采集」变得更重要，独特的筛选标准，以及采集逻辑，是决定知识库的价值的。ima 里也有很多筛选自己喜欢的内容而形成的公开知识库。<br /><br />对内容创作者自己来说，沉淀好自己的内容也特别有意义，有的不存不用确实就容易丢了。哪怕对别人没用，自己时常反刍也很有帮助。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/682d6a21ca977f7fc7e6e8e6</id>
            <title>AI探索站 05月21日</title>
            <link>https://m.okjike.com/originalPosts/682d6a21ca977f7fc7e6e8e6</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/682d6a21ca977f7fc7e6e8e6</guid>
            <pubDate></pubDate>
            <updated>Wed, 21 May 2025 05:52:33 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    但我觉得 Sergey Brin 和 Demis Hassabis 那个对谈里最有趣的问题其实是这个。<br />主持人：你会雇佣一个在面试里用 AI 的面试者吗？<br />两个人显然都愣住了，哼哼唧唧半天，最后基本上都是说自己也说不好。<br /><br />这看起来是个实操细节，事实上是个本质议题。就是如果 AGI 真的如他们预言的那样在五年左右（见上一条 https://web.okjike.com/u/0E8AFC24-2DB7-4C8D-8D27-794903C79641/post/682d48f8e0619112afecf6e8 ）到来，那今天你就要开始想你到底怎么量度工作的价值，包括面试的时候你要考察什么东西。换句话说就是：人这个世界上最重要的商品和资源到底怎么定价。<br /><br />很显然即使聪明如 Sergey Brin 和 Demis Hassabis 也没想好。我不认为世界上真的有人想清楚了这个问题，但五年后社会经济怎么运转是基于这个问题的答案的。
                ]]>
            </content:encoded>
        </item>
        
    </channel>
</rss>