<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>少数派 -- Matrix</title>
        <link>https://sspai.com/matrix</link>
        
        <item>
            <id>https://sspai.com/post/101692</id>
            <title>成为妈妈：拼凑时光碎片，我的怀孕生育记录（附实用tips）</title>
            <link>https://sspai.com/post/101692</link>
            <guid isPermaLink="false">https://sspai.com/post/101692</guid>
            <pubDate></pubDate>
            <updated>Mon, 18 Aug 2025 16:18:21 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 生育体验,多囊卵巢综合征,备孕流程,产后重构

<br>
<br>
总结: 本文是一位多囊卵巢综合征患者记录从备孕到育儿的完整经历。作者认为生育没有必须的理由，是多种因素共同作用的结果。详细描述了多囊患者的备孕治疗流程、孕期的身体变化与焦虑、分娩时使用无痛的经历，以及产后身心巨变和家庭磨合。孩子带来了视角转变，包括更多同理心、从追求"有"到感恩"无"、对世界"复魅"及更理解女性困境。最后提出养育理念是成为"园丁"而非"木匠"，提供爱与安全环境，敬畏生命自身的发展力量。 </div>
                        <hr>
                    
                    <p>各位小伙伴们，许久未见，大家好呀。恍然间我的少数派已经沉寂两年半有余。在这两年多的时间里，世界经历了许多变化，尤其是各类AI工具的涌现，重塑着许多事物，让我感觉世界正在朝向某个奇点迈进。</p><p>而回到我具体的生活，也有了许多新的故事。2023年，我怀孕了，一个小生命来到了我的身边，每天看着怀抱中温热柔软的小家伙一点点长大，治愈着我的平凡生活。工作上也有了新调动，我接触到了全新且有挑战性的业务，一面是频繁的加班让我更为疲惫，一面却也让我得以换种视角去体验。现在的日子，基本被工作和孩子填满，和从前比，能留给自己探索的时间确实少了许多。</p><p>写下上面那句关于孩子的话，我心里忽然被轻轻撞了一下：「原来人真的会遗忘经历过的痛。」我竟只用此刻一句简单治愈的幸福，就囊括了我这两年半里的所有感受，而这其间的百般滋味，却被藏进了时光里。于是我开始翻看着在这期间断断续续记录的怀孕及生育的感受，屏幕上的字和我脑海里的记忆碎片，一点点拼出了这段日子更为真实的模样。</p><p>过去，我的女性长辈们很少向我提及生育里的细枝末节，或许是时光让她们遗忘，但现在，我想把这些碎片捡起来，记录下来我的这份经历，作为对这份回忆的纪念，也可以给后来人一份参考。当然，这是一篇很个人视角的文字，袒露了我许多细碎的经历与感受，但生育这件事存在着极强的个体差异，我的经历只是一份“参考系” ，每个人自己的体验与感受才是“指南针”。</p><h2>为什么要生孩子？</h2><p>聊起怀孕生育这个话题，总觉得要先从“为什么”说起。因为关于做生育这个决定，于我而言是需要理由的。</p><p>曾经我在B站UP主“吟游诗人基德”的视频里，看到过这么一句话，它戳中了我：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/14/43cdd69694e3a3d3aa21d7770b357345.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>我无法证实生命一定很美好，但我选择生育最底层的一个理由是：<strong>我认为这个世界是值得来体验一次的，它既有美好也有苦难，但无论如何它值得来体验一场</strong>。这种感觉有点像《七宗罪》里老警探萨默塞特的那句话：</p><blockquote><p>Ernest Hemingway once wrote, ‘The world is a fine place and worth fighting for.’ I agree with the second part.</p><p>欧内斯特·海明威曾经写道：‘这个世界是个美好的地方，值得为之奋斗。’ 我同意后半句。</p></blockquote><p>在怀孕前，我也浏览过知乎上很火的问题“我们为什么要生孩子？”的回答，我收藏了两个回答：</p><p><a href="https://www.zhihu.com/question/349923819/answer/1673047173" target="_blank">第一个回答</a>来自我很喜欢的知乎答主ze ran（我们还互关着◕▽◕），这段文字在网上流传很广：</p><blockquote><p>在三四十岁的某一天，你会突然发现，生命中最好的事，都已经发生过了，剩下的只是重复和老去，一年年，一天天。</p><p>而孩子会冲走重复，让生活重新变得未知。他/她让你烦恼，让你牵挂，让你欢喜，让你惊讶，让你再经历一次童年，让你明白当年父母的心境，让你有理由买曾经求而不得的玩具，让你在痛苦时坚强，在危机中冷静，让你看到童年时的自己，看到他的勇敢，他的好奇，他的局促，他的不安，从而更好的理解自己，接受自己。</p><p>父母养育了孩子，孩子也陪伴了父母，父母和孩子滋养了彼此，也成就了彼此。</p><p>在飞逝的时光中，他让未来有所期待。</p></blockquote><p>这个回答很美好，当时读着让我心头一暖，但对于当时的我其实感触不算太深。因为一来，我还年轻，对老去还没有太多感触；二来，我本就是一个内心世界很充盈的人，并不会因为没有小孩，而感觉世界无聊。而当我现在真的养育小孩时，会比当时更理解这个回答。</p><p>而当时最深得我心的<a href="https://www.zhihu.com/question/349923819/answer/1357923844" target="_blank">回答</a>，来自答主q9adg，部分摘录如下：</p><blockquote><p>不管你以为你是因为什么原因、什么打算而觉得生孩子是合理的，都是没有意义的，因为你事后会发现那只是一种自我抚慰、一种自我催眠。因为这些理由并不足够。</p><p><strong>子女的一生太漫长，而且是自由的。无论你打算把什么打算放在ta们身上，都有极大的可能因为世事的变迁和ta们不可剥夺的自由选择而落空。因此无论你觉得你是基于什么超级实用的理由而生养，你都是在自欺欺人。你对这个自欺欺人的理由有多确信，就会在它破灭时有多抑郁。</strong></p><p>生育子女，并没有什么理由，而只有当时机缘巧合原因。社会灌输给你的种种“义不容辞的责任”、许诺的种种“难以想象的美好体验”、为了其自身稳定和延续而构建的种种政策激励（比如家庭减税、生育补贴、不成文的唯有家庭完整者才能担任的重要职务、没有子女的人在某些地方受到的欺压）、伦理压力（父母对继承人的强烈需求、亲属对生育有意无意的关心、被排除在生育者圈子之外的社交压力），以及你自己的生物本能（怀孕前一些视觉刺激物和怀孕后的妊娠反应所造成的激素刺激）、心理本能（对未合群从众的恐惧），合起来构成了你生育的原因。一点点意外，加一点点侥幸，加强大的社会因素、生理因素的压力和推力，构成了人生育的原因。</p><p>上天选择了你过一个有子女的生活，天赐了ta们给你。于是你的生活被移转到了有子女的轨道上。这条轨道有苦、也有甜，有好、也有坏，有它的付出、也有它的收益。它既不高于、也不低于其他的道路。你也不应该因为这是你自己被确定而无法更改的（而且目前看起来是主流的）道路而强行自我想象这是一条比其他道路更高贵的道路。这种想象必有反噬。要紧的从来不是你现在的境地本身是否高贵或者正确，而是发给你的这手牌你要怎么打好。</p></blockquote><p>是的，生育本就没有 “必须如此” 的理由，有子女的人生轨道，和其他人生轨迹一样，并无高低之分，无论个人怎样选择，重要的都是走好自己的路。</p><p>在当时，我确实有许多混杂的原因 —— 在经济上：我和老公有稳定工作和收入；在伦理压力上：长辈时不时的询问和关心；在心理上：我认为这个世界值得体验一番，对 “拥有一个孩子” 这件事并不排斥；在身体上：我处在最佳生育年龄段，而我又有多囊卵巢综合征，备孕比常人困难些，医生建议如果想要小孩可以尽早要。于是，各种机缘巧合，2023年，在我马上28岁时，选择开始备孕。</p><p>而这其中，生理上的多囊卵巢综合征是一个较为重要的因素。在这里向各位可能不太了解的朋友解释一下：&nbsp;</p><p>多囊卵巢综合征（polycystic ovary syndrome, PCOS）是常见的妇科内分泌疾病（在育龄女性中占比约10%），是青春期女性不孕的常见病因。主要有雄激素过多症的皮肤表现（如多毛和中-重度痤疮）、月经失调、持续性没有排卵、卵巢多囊性改变、肥胖和胰岛素抵抗。引起 PCOS 的原因尚不明确，可能是遗传和环境因素，治疗方面以生活方式干预及口服雌-孕激素药物治疗为主。</p><p>我属于表面看症状不太明显的那种，没有肥胖、痤疮等症状，但是月经不调、卵巢多囊性改变、卵泡长不大的问题已经伴随很久了。20出头被确诊时，我以为得了什么重病，后来慢慢了解才发现，和其他疾病相比，它已经算“温和”的了。除了月经不准时，几乎没给我太多困扰，而从另一个角度看，它也在提醒我注意生活的平衡与健康。（在这里补充一句后话，生完小孩后，我的月经周期神奇地恢复正常了！）</p><p>我知道多囊患者备孕需要更多时间和耐心，所以我是抱着备孕几年才会有小孩的想法去计划的，我当时设想大概30出头能够怀孕，时间上差不多。</p><h2>备孕的准备与流程</h2><p>对于身体情况正常的女性，如果想要有计划地提前准备，可以看看丁香医生的这篇文章：<a href="https://dxy.com/article/151468" target="_blank">科学备孕实用清单</a>。此外，我建议大家可以好好利用国家的免费婚检政策，去进行一次夫妻双方的体检，婚检项目里几乎包含了文章里提到的备孕必查项目，而且有些指标在备孕或者孕期还能派上用场。</p><p>而作为多囊患者，在没有备孕计划时，我会时不时去妇科复查，医生一般是开达英 35 这类雌孕激素药物，帮我维持 “月经” 的规律，我吃这些药倒是没感觉到它的副作用。一般我是连续吃几个月或半年就停药几个月，等月经又“任性”一阵了，再重复这个循环。（后来发现我这种停药方式并不科学，多囊朋友们请遵医嘱！）妇科医生一般建议我如果只是想调节月经可以定期吃达英 35 ；但要是打算要孩子就及时去生殖科就诊。于是在这一年，我第一次走进了生殖科的门诊室。</p><p>关于多囊患者的备孕流程，丁香医生上也有两篇文章可以参考：《<a href="https://ask.dxy.com/index#/item/health/109205?dxa_adplatform=appfxwxhy">多囊卵巢综合征怎么备孕？</a>》和《<a href="https://dxy.com/article/6640" target="_blank">得了多囊卵巢综合征不怀孕？3 步教你怀上宝宝</a>》。大致路径是：先调节身体指标，再尝试自然排卵；效果不佳就进行促排卵，若促排持续不理想可以考虑人工授精，最后考虑试管婴儿。</p><p>帮我看病的生殖科医生，基本流程大致类似。医生主要关注我的性激素水平和阴超报告，发现我的促黄体生成素（LH）偏高，便开了雌孕激素药帮我调节。吃了两个月药，指标稍降，但卵泡依旧不成熟，于是开始了促排卵治疗。这期间，我自己额外查了胰岛素、糖耐试验、甲状腺功能和肝肾功能，没有异常。此外，我日常会去健身房游泳健身，精神面貌挺不错。</p><p>促排卵的治疗流程挺磨人，一个周期内需要跑好几趟医院：打促排针、监测卵泡大小，10多天内大概要去4次医院，这对职场女性相当不友好。我已经算是相当幸运的了，第二次促排就怀上了宝宝，整个备孕期大概4个月左右。</p><h2>孕期进行时</h2><p>测出怀孕后，我和老公都很开心。我继续在生殖科复诊，直到孕9周左右，转到产科建档，开始定期孕检。</p><p>刚怀孕时，身体几乎没什么感觉，可到了第 5-6周，孕早期的孕吐就猝不及防地来了，每天被反胃和恶心缠着，昏昏沉沉，一直到 16 周才缓解消失，那段时间吐得厉害，每天盼着早点熬到孕中期，体重最低时只有84斤，创下了我成年后的体重最低值。我个人体感而言，整个孕期里，最难熬的就是孕吐期那种成天恶心呕吐的感觉，之后孕晚期胎儿变大带来的身体不适，与之相比都没有那么难受。</p><figure class="image ss-img-wrapper image_resized" style="width: 549px;"><img src="https://cdnfile.sspai.com/2025/08/10/fb1b98c5e68c3218463351fbae83ff4b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>孕早期时的感受</figcaption></figure><p>等熬过孕吐期，孕中期便成了我孕期最舒服的阶段，没有了反胃的折磨，胃口恢复了，行动也还算轻便。再到孕晚期，产检次数变得更加频繁，由于胎儿的变大，身体细碎的不适感又逐步显现出来：每天要起夜上厕所、半夜时不时腿抽筋、走路腿会抽着痛......</p><p>或许是第一次经历，整个孕期我时不时会陷入焦虑里。在早期关注HCG等指标，中期担心宝宝早产，晚期宝宝偏小一点，也担心是否有异常，身上的某个症状或是产检单上一些稍需留意的指标都忍不住查小红书，有好几次我都因肚子疼跑去医院看急诊。</p><p>不过整体而言，我的孕期算是比较顺利的，没有碰到凝血异常、妊娠高血压、糖尿病等需要高度警惕的状况，上班上到了产前两天。</p><p>下面，我来安利一些孕期里对我有帮助的人/事/物：</p><ul><li>书籍：六层楼的《怀孕呵护指南》以及西尔斯的《西尔斯怀孕百科》。孕期的书籍我主要读了这两本，六层楼的《怀孕呵护指南》用通俗易懂的语言介绍孕期中身体和心理的各种变化，让准妈妈们更好地应对怀孕带来的挑战；《西尔斯怀孕百科》是一部专业孕期百科，按照怀孕的每个月详细讲述了胎儿和母体的变化，并提供系统全面的健康护理和育儿知识指导，都值得一读。</li><li>APP：美柚，这是我一直使用的孕期与育儿记录app，挺好用的。</li><li>博主：段涛，一个超级厉害、温柔的医生，他的网络分享非常值得一看，大幅缓解准妈妈的不安。</li><li>检查：有几个自费项目也推荐准妈妈们做：无创DNA检测（NIPT）、脊髓性肌肉萎缩症（SMA）基因检测和耳聋基因筛查，可以更全面地了解宝宝的健康状况，宝宝健康妈妈最放心。无创检测主要针对胎儿染色体异常，比唐氏筛查准确很多，SMA基因检测帮助筛查脊髓性肌肉萎缩症的携带风险，耳聋基因检测则用于识别可能导致先天性听力损失的基因变异。</li><li>物品：<ol><li>文件夹：把产检报告按时间理好，每次去医院不用翻得手忙脚乱；</li><li>胎心监测带：孕晚期做胎心监护时会用到；</li><li>胎心仪：偶尔心慌的时候听听胎心，像听到小火车 “咚咚” 响，让妈妈安心；</li><li>待产包：孕晚期可以慢慢准备了；</li><li>妊娠油 / 霜：我用了福来油、mama&amp;kids 的霜，还有大白罐。妊娠纹大概率和体质和遗传及体重增长有关，涂抹后皮肤会比较滋润，但效果因人而异，我长了几条妊娠纹，目前看不明显了。</li></ol></li><li>群组：孕妈群。如果身边缺乏能分享沟通的女性，可以试试加入一个网上的孕妈群。因为我身边没什么准妈妈能分享经验或交流，我就加入了一个孕妈妈交流群，大家都是全国各地差不多时间怀孕的准妈妈们，可以看到相似的妈妈的产检和日常分享，一起进行待产包和胎儿用品的准备（在孕期的我真的沉迷于买买买），不过要小心被骗。</li></ul><h2>分娩体验</h2><p>在怀孕前，我对分娩是很恐惧的，难以想象顺产会有多疼，这大概也是许多未婚未育女性所恐惧的。在孕晚期，我学习了拉玛泽呼吸法，但对怎样正确用力还是一知半解的，也对自己需要忍受多长时间疼痛存有未知的恐惧。而最终我实际的分娩体验比我预想得要顺利，这大部分归功于人类之光：“无痛分娩”。</p><p>我是在晚上12点左右见红，因为当时肚子也有点痛，我妈和我就带着待产包去医院了，在路上，无规律的宫缩就开始了，到半夜，宫缩越来越频繁，疼痛一阵接着一阵，根本无法入睡，我躺在病床上等待开指，在这期间会尝试呼吸缓解一下，但主要还是得靠忍。</p><p>直到下午6点左右，医生说开了两到三指，可以进产房打无痛了。进产房还需要等待麻醉师，那阵子宫缩疼得最厉害，老公安慰我，我也靠拉玛泽呼吸法一点点缓解，等我打上了无痛，一下感觉全身发冷，意识开始模糊，身边有人在喊我但我无力应答，那一霎那仿佛要进入天堂之门，以为自己要离开了。后续意识恢复过来，让护士帮我盖被子，无痛也开始起效果，真的减轻了我很多的宫缩痛，我也终于能够睡上一小觉。等到快开全指时，疼痛的感觉又强烈了一些，身体的便意越来越浓。后续在助产士的发力指导下，我在混乱与疲惫中使劲，生下了宝宝，用力猛导致伤口有些撕裂，但真正的第二产程（胎儿娩出期）并不算久，大概半小时左右。</p><p>所以如果选择顺产，推荐上无痛，此外，在孕晚期可以多练习拉玛泽呼吸法，了解正确发力方式，对分娩很有帮助。</p><h2>产后的重构与平衡</h2><p>孕期，和过去相对轻松自在的生活相比，虽然多了些许不适，但相差并不太大，而生育是真真实实地让生活发生了巨变。虽然此刻，看着快1岁半的可爱的孩子，我会感觉孩子是生命馈赠的美好的礼物，给我带来了很多的幸福。但是如果时间放在生育后的那两个月，感受是截然不同的。</p><p>在分娩后，我并没有沉浸在有孩子的喜悦中，当时的心情非常复杂，尤其是宝宝在出生后检查有些异常，让我的心始终悬着，生怕她有什么问题。而我自己，身体还处在生产后的疼痛与疲惫之中，伤口以及耻骨都一阵阵疼，走几步都难；母乳喂养需要频繁起喂，睡眠被切成无数碎片；家里长辈来帮忙照顾孩子，但人多后矛盾也增加，家庭氛围变得有点奇怪，后来想来第一胎请月嫂或者去月子中心还是很有必要的，长辈们也多年没带过孩子，育儿观念有很多不对的。那一阵，整个家庭乱成一锅粥，我的脑海里根本装不下其他的事情，经常想的是，宝宝是健康正常的吗？这样喂她照顾她是对的吗？这难熬的日子什么时候到头啊？</p><p>当时的记录如下：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/f3d90cc6f6e4e08db0f5a25b6516e76d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>产后一个月左右的记录</figcaption></figure><p>此外，我和我老公异地的困境，在生育后变得尤为突出。在休完陪产假后，他就去异地上班了，只有周末才能匆匆赶回，少一个带娃责任人，让我身心无比疲惫。网上说产后一年是婚姻中最难的一年，我是有真切体会的，这中间的崩溃与自愈，难以尽述。</p><p>产后的那几个月，各种感受杂糅，疲惫又幸福，焦虑又治愈。看着她从懵懂的小婴儿，慢慢学会抬头、翻身、坐与爬，每一个微小的进步都像星光，点亮了琐碎的日常。她趴在肩头时均匀的呼吸，对着我笑的模样，都让我内心柔软。可那些兵荒马乱的时刻也从不缺席：宝宝黄疸住院、感染新冠、细菌感染持续发烧住院、我乳腺炎发烧……这应该也是无数新手父母都要走过的一程，各种身体上的“累”、情绪上的“乱”与心理上的“暖”交织在一起。</p><p>而在这乱麻中，如果和我一样，需要长辈一起来托举育儿，想要在复杂的家庭关系中找到平衡，同时让自己喘口气，请记住：别纠结在细节里。长辈来搭手，已经很辛苦，替我们分担了许多育儿责任，她们带着几十年的生活经验来育儿，肯定会有分歧与磨合。只要一家人都在为孩子的成长用力，为这个家的安稳努力，那些非原则性的细节就别太在意了。放过细节，也是放过自己。</p><p>好在熬过最初高强度育儿的艰辛与磨合，我也逐渐适应了这种生活模式，在繁忙中找到了自己的节奏，虽然留给自己的时间变少了很多，但每天感受着孩子的可爱，陪伴与见证她一天天的成长与变化，这也是另一种平淡温暖的幸福，人生，不同时期都有它独特的滋味。</p><figure class="image ss-img-wrapper image_resized" style="width: 371px;"><img src="https://cdnfile.sspai.com/2025/08/13/ec0cf5c1d2d4af8cbd5f8cc3fed6976f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>每天睡前都有这种感觉~</figcaption></figure><p>育儿是场马拉松，我有非常多需要学习的地方，在这里就简单列一下产后第一年对我有帮助的书和博主：</p><ul><li>书：推荐两本育儿百科《美国儿科学会育儿百科》、《崔玉涛育儿百科》，第一本书由美国儿科学会（AAP）发布的权威育儿指南，由众多儿科专家共同编写，内容科学、全面；第二本书汇集了儿科专家崔玉涛医生30余年儿科临床经验及育儿科普知识，内容更贴合中国家庭实际。像《程序化育儿法》这本书的做法，我是从入门到放弃，后来小孩自然而然睡得还可以。</li><li>小红书博主：崔玉涛、卓正儿保Distinct、丁香妈妈、Sunny Huang - IBCLC、乳腺外科陶思丰、马蕾孕哺育、康复硕士小贾Jasmine、小王康复。前四位博主专注儿童养育相关的知识，第五至第六位博主提供了许多母乳方面的建议，第七至第八位博主有许多产后康复相关干货。</li><li>产康项目：我开的是三甲医院常规的产康检查项目以及治疗，产康检查结果可以对照上面提到的小红书博主小贾的视频去分类并且日常跟练，我在医院开的主要是盆底肌治疗，包括手法与电刺激疗法，应该是有效果的，但我中间间隔一阵后续忘记做了。此外，自己报了普拉提团课和私教课，普拉提值得推荐。</li></ul><h2>孩子带来的心的转变</h2><h4>1、唤醒了我更多的同理心，更多地“看见”他人</h4><p>没有孩子的时候，我的关注点更多在自己身上。有了孩子后，我在小红书上关注到了自闭症及一些罕见病儿童的家长群体，看着他们为治疗费奔波的疲惫、孩子微小进步带来的狂喜，心总会跟着揪紧，也愈发明白：偶然与运气决定了每个人出生的时代、地点、基因、家庭，而这些在很大程度上又决定了我们的人生轨迹，我们努力奔跑，或许还是只能对既定人生剧本做出些微观的改变。面对那些没有自己幸运的人，多一些同理心，因为若非幸运，我或许也是其中之一；对于自己所拥有的，则应心怀知足。</p><p>而当我看到孩子天真烂漫的笑容，总是不禁会想：<strong>每个平凡的大人，曾经都是这么可爱的孩子啊。</strong>那些如今让我觉得固执、冷漠的成年人，也曾有过这样清澈的眼神，他们又是带着怎样的过往来到成为了今天的大人。这样的联想，让我心里的坚硬悄悄变软，也让我对周遭世界多了一份宽容和温柔。</p><h4>2、 关注视角从“有”到“无”的转变&nbsp;</h4><p>我曾经摘抄过一段话，但直到有了孩子，我才更有体会：</p><blockquote><p>Upside的成功突破可能路径不多、空间有限且不一定能成，但downside的下跌悲剧却空间巨大、原因可以各式各样，比如意外的车祸、被高楼上掉下的瓷砖砸成瘫痪、因为某些原因被感染艾滋病。<strong>反着想的底线思维，与拼力向前追求最优解思维，会让人看到同一个人生的两种不同景象。</strong></p></blockquote><p>以前，我总在关注自己还想要什么；而有了孩子后，我最朴素的愿望，就是看着女儿健康快乐地成长。那些对"有"的渴望，渐渐化作对"无"的感恩——感恩没有病痛、没有意外。那些对人生上限的追求，变成了对下限的避免，能和家人平安健康顺遂度过一生，就算很幸运了。</p><h4>3、对世界的“复魅”</h4><p>随着阅历的丰富，我对许多事情也愈发地“祛魅”。然而，孩子的到来让我更多感受到了这个世界原本的斑斓与魅力，让我对世界“复魅”，<strong>孩子不仅仅是生命的延续，更是一种唤醒和修复。</strong></p><p>陪伴孩子成长，和她一起玩躲猫猫，和她一起捡树叶，和她一起蹦蹦跳跳，仿佛让我重新经历了一次自己的童年，重温那些曾经遗忘的快乐。她的视角呈现了日常生活中的神奇与趣味，她的惊叹与探索是我早已习惯的世界中稀缺的珍宝，她让我蹲下身去重新关注那些曾被忽视的细节，帮助我找回对微小事物的惊喜感。<strong>我们抚养她成长，她也在救赎我遗忘的感官，带我重新走进那个被成年人忽略的、满是细碎美好的世界。</strong></p><h4>4、对女性困境更深刻的理解</h4><p>有了孩子后，我对女性困境有了更深刻的体会。在大部分家庭，育儿责任在性别之间的分配并不平等，育儿的责任更多落在女性身上。即使现在女性同样在职场打工赚钱养家，但传统观念对父亲角色的认知还是在延续。社会普遍对好妈妈和好爸爸的评判标准也是不一样的，<strong>对“好妈妈”的想象是全方位全光谱的，而“好爸爸”的标准往往是亮点式表彰，爸爸的参与常被框定在明确、可见、有界限的任务中</strong>，这一结构性困境需要我们这代人去打破。但我和老公因为异地，育儿的责任很难与他分担，但由于工作原因异地这个问题目前难以解决，只能暂时搁置。</p><h2>养育孩子的浅见</h2><p>在文章的最后，写写关于我养育孩子的浅见。在这方面，我理论了解有限，实践经验也不足，知行时难合一。但是我也时不时会思考，作为妈妈，<strong>我该以何种姿态去参与孩子的成长</strong>？</p><p>​在这个不确定性的时代，不管具体的培养与教育方式怎么变化，我的底层理念比较贴近书籍《园丁与木匠》里所说的：<strong>成为孩子的园丁而非木匠。</strong>我想做孩子守护者与提供者而非雕刻者，给她提供无条件的爱与安全的港湾，创造丰沃的土壤，点燃她对世界的好奇心与热爱，塑造她坚韧意志与独立人格，克制自己想要修剪成特定形状的冲动，让生命以她自己的方式生长。我相信在安全有爱的环境中，生命自有其向上向善的力量。</p><p>​<strong>我敬畏生命本身的神秘与力量，敬畏复杂系统发展的涌现与不可预测性。孩子是属于“未来”的，每一个孩子都是不同的宇宙，我的知识终有限度，但我愿意尝试爱她、理解她与信任她，也希望这份信任与爱能成为她勇气和自信的源泉。</strong>​​</p><p>当然，养育之路漫漫，回到日常养娃中，这些底层的理念如何具体投入实践是非常有挑战的事，我有许多需要学习改进的地方，共勉之。</p><p>这就是我的非完全孕育记录全文，写了8000+字，感谢屏幕前的你阅读到这里，希望能给你一些启发或共鸣，下次见~</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101925</id>
            <title>《战地风云6》公开测试不完整印象</title>
            <link>https://sspai.com/post/101925</link>
            <guid isPermaLink="false">https://sspai.com/post/101925</guid>
            <pubDate></pubDate>
            <updated>Mon, 18 Aug 2025 14:08:04 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 战地6公测,场景破坏,团队配合,亚洲大区体验
<br>
<br>
总结: 《战地6》公开测试已结束，整体体验良好但存在小瑕疵。测试免费面向所有人，但对PC硬件要求较高。游戏回归四大兵种和64人战场，并拥有震撼的物体破坏系统，破坏效果兼具视觉冲击力和战术价值。游戏核心强调团队作战，小规模地图设计导致对局烈度增加，更注重小队和兵种间的配合。亚洲大区的对局体验尤为高压，点位争夺频繁，玩家持续处于紧张状态。尽管存在平衡性问题和bug，但游戏在画面、音效等硬素质上过关。该作可能是首款基于大规模玩家众测开发的买断制AAA在线服务型FPS游戏。 </div>
                        <hr>
                    
                    <p>《战地风云6》（以下简称“战地6”）公开测试已于东八区时间今天下午3点左右正式结束，由于是周一，许多玩家朋友还要上班上学，因此比官方承诺更早地结束似乎并没有给社区带来太多负面影响。这种小瑕疵就和本次《战地6》公测带给多数在游戏中浴血奋战几十个小时的朋友们的感受几乎相同，这里留下的是一个不完美的逗号，且不存在某种不可饶恕的硬伤。</p><p>只不过在游戏之外的内容平台上，笔者也确实看到了单个流量不大，但数量繁多的“《战地6》差评”。不论是来自“战地老玩家”还是“乐子人”，这些流量不大的“差评”们，汇聚在一起就形成了一支不可忽视的力量。所以本文想要从一个，既不是“战地老玩家”，也不是“乐子人”的普通电子游戏爱好者的视角，聊一聊笔者在将近18小时的《战地6》公测体验中的感受，以及尝试回答一个问题，那就是：我们在玩《战地》系列游戏的时候，我们到底在玩什么。</p><h2><strong>如何进入此次公开测试？</strong></h2><p>首先要确定的是，你不需要支付任何除宽带、水电燃气费、房租、外卖之外的任何用于单独预购，或购买游戏的费用，就可以在8月11日加入这次公开测试。是的，本次测试面向所有人，而且完全免费。</p><p>而如果你是在8月7日就进入了《战地6》公开测试，那么很明显，你参与了内容平台（如抖音、Twitch）或加速器软件的《战地6》公测送礼活动。绝大多数活动完全可以免费参与。</p><p>其次是硬件要求。需要明确的是，FPS类游戏必须拥有最低40的平均帧数以及1%Low帧才能做到流畅游玩，因此，你需要有一台Xbox Series S/X、PlayStation 5主机或者硬件推出时间不晚于2021年的PC。从我搜集到的实际对战反馈来看，NVIDIA RTX 3050 Laptop显卡处于满足《战地6》公测最低要求的最低底线。因此，如果希望至少最低画质1080P@60fps的体验，一块2021年下半年之后发布的中高端显卡就是刚需了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/557d01ed537be433dd26488f20f2f618.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>2021年下半年之后的中高端硬件才能满足《战地6》公开测试和后续正式版本的最低要求了。来源：EA</figcaption></figure><p>此外，游戏需要启用UEFI引导，Secureboot等现代化PC组件才能正常启动，通常情况下，一台2018年之后生产的PC硬件或笔记本电脑产品都会强制启用这些组件。不过部分兼容机的主板BIOS往往默认关闭某些功能，这确实对一部分对电脑硬件不熟悉的玩家造成了困扰。</p><h2><strong>此次公测展现了哪些内容？</strong></h2><p>从此前网上泄露的战地风云实验室（Battlefield Labs）对战画面对比来看，《战地6》公测可以称得上是战地风云实验室的“完整试玩版”。此次公测整体规模不大，对战地图只有四张，载具只有五种，枪械和各类兵种道具也都分别只有十余款，四个兵种的对应职业专精也都只各自开放了一种。但即便如此，游戏也足以让人沉迷数十个小时。</p><p>《战地6》公测回归了最正宗的四大兵种、64人战场，并带回来了自《战地：叛逆连队2》以来，系列最招牌的物体破坏体系。除经典的征服、突破、突袭模式外，也开放了小队死斗、山丘之王等近距离作战模式。配合完全现代化的人物机动性、操作方式和gunplay体系，这些微缩规模的战斗都能带来不俗的游戏体验。</p><p>《战地6》公测的匹配以服务器延迟为最高优先级，相邻地区服务器的玩家会根据延迟优先分配到同一场对局中。官方目前没有正面回应《战地6》公测和正式版游戏的匹配机制，但给出了一定的承诺，因此这似乎意味着，EA采用了相较于传统SBMM，更加不强调个人技术和对局行为的匹配机制。如果这种匹配机制能够沿用到正式版游戏中，或许会对社区的长期评价带来积极影响。</p><p>当然，此次公测的核心内容，还是放在系列最引以为傲的“征服”模式上。由于此次开放的地图在规模上并非传统《战地》系列的大战场，而是更加聚焦于局部，因此虽然在对局中，遭遇战更加频繁且激烈，但也正是因此，《战地6》公测更能展现最能在第一时间抓住玩家的内容：破坏。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/96ff57aa493fe5f4934013a387ce50f1.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>《战地6》的破坏效果极具视觉震撼力。来源：EA</figcaption></figure><p>从最主观、单纯的游戏体验角度，《战地6》公测的场景破坏完全可以用“震撼人心”来形容，这种介于脚本和引擎功能之间的，但又几乎完全依赖对局随机触发的破坏效果，在某些情况下，甚至要比部分强调电影化的买断制AAA游戏精心安排的大场面还要惊人。</p><p>从游戏的对局角度，《战地6》公测的场景破坏也带来了相当程度的战术价值。游戏中的破坏不仅限于视觉效果，部分室内外场景会因此直接发生地势变化，一些本是死路的区域因为场景破坏形成了具备高低差的地形，这就从战术上为玩家对局提供了全新思路，一些出人意料的场面和对战也会在发生在这些地方。</p><h2><strong>基于游戏玩法的对局思路</strong></h2><p>《战地》系列一直以来都是以团队作战为核心，此次《战地6》公测也完全遵循了这一公式。在征服模式中，即便是迂回穿插，在高压对局下也需要至少两人的小队同时进入对方点位，否则和有可能会被来自不同方向的围剿所阻止；更不用提在常规的点位争夺中，多支小队的互相配合完全就是必修课。</p><p>由于在《战地6》公测中，载具性能被全面削弱，工程兵反载能力，突击兵的游击能力，支援兵的补给能力，侦察兵的侦察能力分别得到了加强，因此不论是小队队员，还是小队和小队之间的配合就变成了决定点位是否能够被拿下，抑或是决定整场对局局势走向的关键。另外，即便对局失利，如果适应了《战地》的玩法、节奏和规律，其实并不会带来太多负面感受。而且《战地6》公测完全保留了在非战斗状态下，玩家的分数获取能力，包括但不限于营救、维修、索敌、固守等动作，《战地》老玩家完全可以和往常一样，不开一枪拿到全队最高分——虽然在这几张小规模地图中，枪战是不可避免的。</p><p>也正是因为《战地6》公测所展现的地图规模，相较于过往《战地》玩家所游玩的地图规模更小，因此对局烈度会不可避免地增加，初上手时更容易产生挫败感——如果能够好友开黑的话，这种挫败感会大大降低。不过，笔者认为，这种规模更小的地图恰好是展现《战地》系列发展至今，在延续系列最经典的玩法前提之下所做的创新尝试，即：在人物机动性、操作逻辑、gunplay完成现代化改进之后，地图设计的改变能否带来更具沉浸感的对局体验。因此，在经过了18小时的公测体验，结合《战地》社区经验丰富的头部玩家，在内容平台发布的游戏感想和对局思路之后，笔者想基于这几张地图，分析一下《战地6》公测的玩法。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/aa42a6c3239039fd3fb0dc6fa1f430c8.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>笔者大致理解的伊比利亚这张图的结构设计。来源：作者截图</figcaption></figure><p>这四张征服地图从大致结构上来看，都设计了起始点附近点位，起始点两侧有相对平坦但狭长的通道，地图中央设计了冲突点位群，并且关键冲突点设计了横插在两条通道中间的长通道；这些通道不仅起到了分割战区的作用，同时也为地图的核心冲突位置提供了掩体和支援通道，保证了对战环境的复杂程度。而在这些被大道分割的战区之中林立着繁多，且内部四通八达的建筑物，建筑物之间也布置了各种小道，一些小道甚至能够直通点位。这种设计让地图上任何点位都变得易攻难守，加上地图足够狭小，这就让各种战术，如围点打援、包抄袭扰和快速脱离火线等，都能得到充分的发挥空间。并且，这还意味着，规模更小的突袭、小队死斗等模式会呈现更加紧张激烈的对局体验。</p><p>不过，在这其中，突袭模式和突破模式似乎依旧无法解决进攻方的劣势。《战地6》公测这几张地图的设计在阵地战中体现出了不小的防守优势。由于进攻路线被缩窄并且减少了进攻路线，就让进攻方向变得非常狭窄，方向也非常单一。一部分没有载具的对局，几乎不可能探索出更多进攻路线，而防守方只需要在核心点位的高处架枪，就能快速解决进攻方的有生力量；防守方还能采取围点打援的战术消耗进攻方的兵力。</p><p>这里还要提一句几乎所有人都不喜欢的“解放峰”。仅就笔者个人而言，如果没有“记者招待会”一般的山头，这张图几乎带来了最为“原汁原味”的《战地》体验。不论是场景设计还是地图设计，虽然载具在《战地6》公测中被大幅削弱，但在这张地图中却是非常非常关键的力量；也正是因为载具的削弱和对局烈度的提升，让兵种之间的配合要求变得比以往的《战地》游戏也更加紧密。突击兵、支援兵、工程兵都需要明确并尽可能执行自己的游击、补给和反载职责，侦察兵也需要在“记者招待会”中展现属于自己的一席之地——值得一提的是，突破模式下的解放峰已经被玩家们研究出了进攻方的取胜策略。</p><h2><strong>亚洲大区独有的高压体验</strong></h2><p>《战地6》公测更现代化的人物机动性设计、短TTK和小规模地图也带来了一些副作用。笔者在浏览内容创作者的内容时，和部分玩家朋友一样，发现欧洲大区的对局似乎更加轻松，敌我之间的穿插频率有明显减少，意识足够好的玩家可以更多地依赖地图中的小道执行侧袭、回防等战术动作；但在亚洲大区，敌我在建筑和小道之间的穿插频率极高，点位争夺更加频繁，几乎所有玩家都处于“打带跑”的状态下，夺取点位之后的冷静期也更短，侧袭或支援时也更加容易发生遭遇战。这就导致所有玩家在一整场20分钟的征服战中持续处于高压状态。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/ed898d0b99936d5c1a36ed0f9dee99ab.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>亚服的高压对局确实不是人人都能玩得下去的。来源：EA</figcaption></figure><p>这可能也是导致不少玩家被劝退的原因之一。更激烈的点位争夺和频繁的遭遇战，带来的是更高强度的操作和更快的精力消耗。对于一些不经常玩FPS的玩家来说，除了高压对局体验，《战地6》公测在操作逻辑，键位绑定上存在一些不成熟的设计，也容易让人望而却步。</p><p>我非常非常喜欢一位内容创作者的理论：“Enjoyment is subjective and quality is not”（体验总是主观的，但质量不是）。笔者相信这句话可以用在这里。尽管公测期间确实有一些需要调整的平衡性问题和亟待修复的bug，以及对外挂行为的持续处理，但总体下来，笔者在《战地6》公测期间度过了非常非常愉快的18个小时；况且，即便从客观的画面、音效、gunplay等质量上来看，游戏的硬素质确实是过关的。</p><p>从目前已知的信息来看，《战地6》大概率是第一款以大规模玩家众测为基础，持续提供反馈并开发的“买断制AAA在线服务型第一人称动作射击游戏游戏”。“玩家众测”并非前无古人，但这确实是第一次出现在FPS社区熟悉的IP的开发流程中。如果这种设计最终能够大获成功并持续累计经济效益，那么就真的有可能让整个游戏开发行业重新开始重视真正享受游戏，真正深入挖掘游戏的核心玩家群体。如果这样的未来能够到来，我们真的能得到更优质的作品、更优质的游戏，和更真诚的开发者朋友们。</p><p>这是咱玩家朋友们应得的东西。</p><p><i>（头图来源：EA）</i></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101765</id>
            <title>Text-Well：我做了一个能帮你进行多视角内容评审的 AI 工具</title>
            <link>https://sspai.com/post/101765</link>
            <guid isPermaLink="false">https://sspai.com/post/101765</guid>
            <pubDate></pubDate>
            <updated>Sun, 17 Aug 2025 22:19:16 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: AI写作辅助工具,Text-Well,模拟评审功能,结构化反馈

<br>
<br>
总结: 作者作为前端开发者和产品经理，开发了AI写作辅助工具Text-Well，旨在帮助用户检查文本中的基础错误。工具提供两种检查方式：逐项修改和整体修改，并允许用户选择性应用AI建议。Text-Well具有国际化支持、文件拖拽上传等功能，并创新性地加入了模拟评审功能，通过结构化反馈和多视角评论帮助提升文本质量。作者分享了开发历程和设计理念，强调产品形态和用户体验的重要性，并期待用户反馈以进一步完善工具。 </div>
                        <hr>
                    
                    <h2>前言</h2><p>Hello 大家好，我叫 oil欧呦，一名在工作时需要写大量文档的前端开发者和产品经理。这是我在少数派的第一篇文章，我想和大家聊聊一个可能很多人都遇到过的场景：写完东西后，总觉得不放心。</p><p>无论是技术文章、产品文档，还是普通的邮件，我们都希望它看起来专业、清晰，没有那些掉价的低级错误。正是基于这个最朴素的想法，我利用业余时间开发了一个AI写作辅助工具——Text-Well。它是一个网页应用，希望能帮你更自信地完成每一次书写。名字叫 <a href="https://www.text-well.com/" target="_blank">Text-Well</a></p><p>作为一个开发者，我在实现了一些比较复杂的功能，或者解决了一些网上缺少资料的 Bug 时，会将开发过程或者解决思路记录下来，分享在一些技术社区中，例如<a href="https://juejin.cn/user/2384177081367998">掘金</a>或者 <a href="https://blog.csdn.net/weixin_47077674?spm=1010.2135.3001.5343">CSDN</a>。除了技术文章之外，我在工作时还经常需要做产品需求设计文档（PRD），写产品的发布文档、使用文档之类的，经常需要与文字打交道。</p><p>自从 AI 出现后，我每一次写的文章我都会先用 AI 过一遍基础性错误，比如错别字、语法问题、或者语句不通顺的问题，让文章整体不会出现很掉价的基础问题。但是在我使用 AI 检查文章问题的过程中，我发现了一个很麻烦的点。假设我有一篇比较长的文章想要交给 AI 检查，通常有两种方式：</p><ol><li>第一种是让 AI 告诉我文章的哪个位置有问题，并且告诉我如何修改，这种方式我需要根据 AI 的响应结果自己一个一个去修改，相对比较麻烦，但是比较准确，因为每个改动的地方相当于自己又 review 了一次。如果 AI 乱改或者有一些改的不好的地方，我们可以及时发现，选择自己调整或者不改这个地方。</li><li>第二种方式是让 AI 直接给我们修改后的文本，这种方式最简单，我们不用自己一个一个改， AI 通常也会告诉我们它改了哪个位置，咱们人工 Review 一下最终结果就好了。但这样也存在问题，有的时候我们告诉 AI 帮我们把文章中的描述改的流畅一点，他可能就擅做主张，把一些带有个人风格的段落改的特别有 AI 味儿。</li></ol><p>因此我就想，要是我可以类似于像写代码的时候处理代码冲突一样，自己选择是否要应用 AI 给出的建议，是不是这样起来会更方便呢？就是出于这么简单的一个想法，我决定自己来做一个工具给自己检查的时候用。正好当时 Claude Code 热度很高，我一直用的是 cursor，刚好试试这个新工具的深浅。</p><p>&nbsp;</p><h2>开始动手</h2><p>于是我和 Claude Code 配合，在两天时间里，我实现了这个工具的第一个检查功能，并为这个工具命名为 Text-Well：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/491fa4c10c7c1103b4dbf2de347a8cbe.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Textwell 基础检查功能</figcaption></figure><p>就像上图中展示的那样，左侧是一个工具栏，右侧是一个编辑器，输入文本后点击开始检查，系统就会让 AI 对文本中的错别字进行检查，并且还会给出原因。</p><p>检查完成后，左侧的工具栏中会展示当前问题严重程度的分布，底下会有一个问题项的列表，右侧的编辑器中则是会用不同颜色的高亮展示出当前问题出现问题的位置，当鼠标悬浮在高亮位置时，会有一个小气泡也展示当前的问题，我们可以只看左侧工具栏或者只看右侧编辑器进行操作。</p><p>工具栏和编辑器是联动的，不论点击左侧问题项还是点击右侧的高亮位置，都会滚动到对应的位置，很符合直觉。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/cc58712b6adc982ea0e0f2e9e832f87c.gif" /></figure><p>除此以外，我还实现了一些键盘的快捷键，用来更加高效的切换不同的问题项：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/9230063231b2cfa8f1ad4d28b07e9358.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>快捷键</figcaption></figure><p>到这一步，我对整体功能已经挺满意了，比我最开始想象的做的还更多了，其实类似的功能我之前也在 grammarly 用过，但是 grammarly&nbsp;主要还是在英文的场景使用，Textwell 的话还是略有差异化的，所以我就想着把 Textell 给产品化了，把一些周边功能补齐！</p><h2>补齐周边功能</h2><p>由于 Textwell 的产品形态是一个 web 网站，各种认证，后端 API 实现都是熟门熟路，加上 Claude Code 超强的开发能力，我用了不到两天，就把 Textwell 补齐了登录注册，额度限制，这些基础的用户模块，做了一个简单的额度查看，并且给未登录的用户也增加了体验额度。毕竟功能的实现是需要消耗 AI token 的，我作为个人开发者，也只能先力所能及的提供一些免费额度了，模型也只能选择一些性价比比较高的，没法用上最顶级的大模型。</p><figure class="image ss-img-wrapper image_resized" style="width: 369px;"><img src="https://cdnfile.sspai.com/2025/08/12/97453bbe52b4ebfb454409c9f2fff1c5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Textwell 用户中心</figcaption></figure><p>除了用户模块，还做了国际化，支持中文和英文，后续补上了西语和法语（现在又因为维护太繁琐移除掉了）。&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 337px;"><img src="https://cdnfile.sspai.com/2025/08/12/056e5a97e95a04ab898b6f93ef81b80b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Textwell 国际化</figcaption></figure><p>文本除了把内容粘贴进去，也可以直接拖拽文件到编辑器区域，像是常见的 markdown 、docs、pdf、txt 这些格式都支持的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/0a8590ed5c373f2a4180dbcdf825f0c9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>基础功能补齐后我就直接把网站上线了，域名就是 <code>text-well.com</code>。运气还挺好的，可以选到一个很合适的域名。</p><h2>首页设计</h2><p>虽说只是一个很简单的工具，但是作为一个产品，我还是想把它的设计理念和使用的方式快速的告诉大家，也为了更好的宣传，我决定为它设计一个首页！</p><p>由于 Textwell 最开始功能真的很简单，我对于它的首页怎么做没有头绪，没有用户使用反馈，没有数据支撑，我也不想瞎编，又想把网站做的好看，关于如何设计就纠结了很久...</p><p>后来我想到我可以在首页很直观的展示系统内是如何进行操作的，然后把我的一些设计初衷通过 UI 的形式展示出来，再加点 FAQ 模块丰富一下页面，内容应该也还可以支撑一个完整的网站设计，于是我就开始动手喽~</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/7e4553f7ab57847f5fb7623ca86b3e88.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/c05c42e020a2621bd542c7ad1ad355c2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/04acbd01eb4c790273e02bd92f722495.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/743ebbfb5fc121b508e53dbab147df68.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>最早期的时候，网站就是以上的几个模块组成的，首屏是左右布局，右侧是一个自动执行的动画，我将系统里的核心操作模拟给用户看，这样大家一看到首屏就知道整个系统的效果。第二屏是一个理念的传达，告诉大家我开发这个工具的初衷，以及用 Textwell 和直接使用 AI 对话进行文本优化的区别。第三屏是 FAQ，最后加了一个底部栏。</p><p>Textwell 的 Logo 还做了一个简单的动画效果，想传达的意思就是让文本质量更好“一点”，所以第一个字母 T 的右上角有一个橙色的小圆点。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/7f7ce20ddfda4d6748d5a30b09dff3cf.gif" /></figure><h2>继续拓展</h2><p>在网站上线后，我去阮一峰老师的 Github 去投稿了一下周刊，觉得自己用心做的东西还是有机会被发现的，<strong>把“孩子”养大，总想让更多人看看。</strong> 抱着试一试的心态，我去阮一峰老师的每周分享仓库里提了个issue，推荐了Text-Well。说实话，当时没抱太大希望，毕竟优秀的个人项目太多了。</p><p>直到周五，当我看到新一期的周刊发布，Text-Well 赫然出现在上面时，那种被认可的喜悦感是难以言喻的，文章在周刊的第 359 期 https://www.ruanyifeng.com/blog/2025/08/weekly-issue-359.html。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/aa37ad2a3dea60ce2e4d952743c47132.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>虽然只有很简单的一个介绍，但是当天的访问量还是高了很多的，而且得益于我把这张图做成正方形而不是横向的完整屏幕，而阮一峰老师博客里面的图片都是宽度占满的，高度按着原始比例撑开的，导致我这张图占了很大篇幅，现在很庆幸自己没有随便截个图敷衍了事。</p><p>有了第一批用户还是很开心的，后续我就继续拓展功能，并且把一些犄角旮旯的小体验持续优化。基于最基础的语法/错别字/标点符号检查，我还拓展了一些其他检查方式：</p><figure class="image ss-img-wrapper image_resized" style="width: 406px;"><img src="https://cdnfile.sspai.com/2025/08/13/c4c475c22a65c6033062180f01e5f9c4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Textwell 不同的检查方式</figcaption></figure><p>在把基础的检查功能完善后，我又有了一个新的想法，就是做一个模拟评审功能~ 因为不论是什么内容，最终都是要传达给其他人看的，如果只有一个检查功能，只能保障文本的下限，那么如果要提升文本的整体质量，提前了解别人看到文章后的想法应该是一个不错的方式。我自己作为一个产品经理，在写好产品需求文档后进行评审时就经常被毒打，如果能够提前被毒打一番，可能在面向真正的人进行传达时会有更加充分的准备！</p><p>既然我已经开发了这样一个文本优化工具，我觉得这个产品形态很适合去再增加一个评审功能，因为我的 AI 检查功能，左侧工具栏展示的是一个问题项，如果是 AI 评审功能的话，就将左侧的问题项参考飞书文档那样变成一个个的评论就好了。既然实现没那么麻烦，又是我自己觉得有意义的功能，就开始动手做了。</p><h2>实现模拟评审功能</h2><p>说干就干，我先用一天时间把一个基础的评审逻辑给设计好，包括整体的评估机制，评审人的背景、世界观，Prompt 的设计，大模型的选择，以及如何交互等等。在方案设计的时候我通常会使用 Gemini 来辅助我思考并整理文档。这里偏题一下，Gemini 2.5 Pro 的文本能力和理解能力真的很强，也经常给予我一些鼓励，在我开发的过程中给了我很多的帮助。</p><p>最终实现的效果是这样的：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/14/2c7db90b95dbb8ef4dfef819a39e4833.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Text-Well AI 评审</figcaption></figure><p>&nbsp;</p><p>在左侧的工具栏中，我增加了一个标签栏，可以用于切换检查模式和评审模式，在评审模式中，第一步我们需要选择评审人：</p><figure class="image ss-img-wrapper image_resized" style="width: 376px;"><img src="https://cdnfile.sspai.com/2025/08/14/31de76ac33cc551a72aeada30c43cbff.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>最初我是只设计了智能匹配功能，智能匹配会检查你的文档类型。比如说你想评审一篇技术文档，它就会给你匹配你的目标读者，可能会有技术小白，可能会有技术大牛。除了目标读者，还会有和你同领域的专家，可能有技术社区的运营这一类的。每一个评审人他们都有自己的世界观，有自己的评审标准，而且他们的关注点各有不同，你不用担心三个人的评论同质化非常严重。</p><p>除了智能评审， 我还内置了一些常用的评审团队，大家也可以在上图中看到，之所以内置一些团队是为了让大家更快的了解评审功能到底可以用在哪些场景，而且内置的这些评审团队的人物背景和关注点是精心设计过的，相较于智能匹配可能没有那么有趣，但是会更加专业一点。大家可以在 <a href="https://www.text-well.com/zh/text-review">Text-Well 评审</a> 查看所有的评审团队以及他们对应的场景。</p><p>评审人完成评审后，会给你一个整体评论，还有针对每一句话的详细评论，展示效果和检查模式差不多时一致的，只是高亮的颜色会有所不同，不同的评审人会有不同高亮的颜色，高亮的颜色和他们头像右上角的那个小圆点的颜色是对应的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/14/c45ec3b54cd202b2a56c41dff962c9e7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>如果你的同一个位置被多个人评论了，那么高亮位置就会变成渐变色。有的时候看了评审人的评论，我感觉我自己才是 AI 🥹</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/14/f90c20ea0e608a3114ce1b73992d0ec0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>写到这里，你可能会问，这个“模拟评审”功能，和直接把文章丢给AI，让它扮演一个角色来提意见，有什么本质区别呢？</p><p>一开始，我也在思考这个问题。但随着我自己不断地使用和打磨，我发现区别是蛮大的。它体现在<strong>“结构化” </strong>和 <strong>“视角化”</strong>这两个核心点上。</p><p><strong>1. 结构化的反馈，而不只是观点</strong></p><p>直接和 AI 对话，你得到的是一段连续的、观点性的文字。而 Text-Well 的评审功能，把反馈拆解成了“整体评价（Overall）”和“逐行评论（Comments）”。更重要的是，每一条评论都被结构化地呈现在原文的对应位置。</p><p>这意味着你不再需要在大段的 AI 回复中，去费力地找它到底在评论哪一句话。所有的反馈都像Code Review 一样，清晰地展示在原文上。你可以逐条处理、采纳、或是忽略。这种掌控感和效率，是单纯的 AI 回答没法比的。</p><p><strong>2. 视角化的冲突，而不只是角色扮演</strong></p><p>这可能是这个功能最核心的价值所在。我为 AI 评审员设计的 Prompt，不仅仅是让他们“扮演”某个角色，而是强迫他们“坚守”一个独特的、甚至有些偏执的视角，并刻意让他们在某些方面产生冲突。</p><p>这种“冲突”不是 Bug，而是 Feature。它强迫我们这些写作者，去思考那个最重要但最难的问题：<strong>我到底要为谁写作？我最想达成的目标是什么？</strong></p><p>它没有给我一个“标准答案”，但它给了我一个<strong>更高维度的决策框架</strong>。这让我意识到，我做的不仅仅是一个工具，更像是一个“写作决策模拟器”。</p><h2 style="margin-left: 0px;">未来的规划与思考</h2><p>当然，Text-Well现在还很稚嫩。</p><p>作为一个个人项目，我能投入的资源有限，无法用上最顶级的、最昂贵的 AI 模型。有时AI评审员的反馈可能还不够深刻，甚至会说一些“正确的废话”。但我相信，优秀的产品形态和对用户工作流的深度理解，可以在一定程度上弥补模型本身的不足，而且模型后面肯定会越来越好，我要做的就是换个模型就好了，但是产品形态和 UI 的易用是现在我认真打磨的。</p><p>写这篇文章，一方面是想和大家分享我做这个小产品的历程和思考；另一方面，也是最重要的一方面，是希望能听到来自大家的声音。</p><p>我深知自己作为一个开发者的局限性，很多时候会陷入自己的世界里。所以，我非常需要来自不同领域、不同背景的你的反馈。任何想法，无论大小，对我来说都至关重要。它们是我把这个小小的side project继续做下去的最大动力。</p><p>如果你对 Text-Well 感兴趣，欢迎访问它的官网 <strong>text-well.com</strong> 体验。</p><p>感谢你耐心读到这里。希望我的分享，能给你带来一点点启发。也期待在评论区，看到你的想法。最后给大家看看我现在这篇文章评审人给我的总结：</p><figure class="image ss-img-wrapper image_resized" style="width: 473px;"><img src="https://cdnfile.sspai.com/2025/08/14/8e2dc7da7aa786e9f22d37d8ef5898a7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>楚岩的评论</figcaption></figure>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101912</id>
            <title>「任天堂物语」06上帝给任天堂焊死的门，被维修工一脚踹开</title>
            <link>https://sspai.com/post/101912</link>
            <guid isPermaLink="false">https://sspai.com/post/101912</guid>
            <pubDate></pubDate>
            <updated>Sun, 17 Aug 2025 17:09:54 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 任天堂, 山内溥, 横井军平, 玩具转型  
<br>  
<br>  
总结: 任天堂第三代掌门人山内溥在纸牌业务遭遇瓶颈后，尝试多元化发展但屡屡失败，公司濒临破产。退回纸牌业务后，通过迪士尼联名短暂复苏，但欧美市场拓展失利。东京奥运会带来的娱乐变革进一步冲击传统业务。山内溥转向玩具行业，初期以模仿为主，后因维修工横井军平发明的“超级怪手”大获成功，确立了“成熟技术的水平思考”产品哲学。后续尝试挑战乐高和跨界实用品均告失败，最终明确公司应聚焦“独特娱乐体验”。横井军平的电子工程背景为任天堂未来电子游戏转型埋下伏笔。 </div>
                        <hr>
                    
                    <p><strong>书接上回，烧光了钱，烧没了面子</strong></p><p style="margin-left: 0px;"><a href="https://mp.weixin.qq.com/s/0J27SyZ12wJL-hX_ziSw6Q">上回讲到</a>，任天堂第三代掌门人山内溥，亲赴美利坚，见识了世界第一扑克牌大厂的“摩登与霸气”，也见识了资本主义花花世界的残酷与机遇。山内溥心里那团火，烧得比京都的夏天还猛。他觉得，小小的花札纸牌，再也困不住他这条猛龙。</p><p style="margin-left: 0px;">回国之后，一场轰轰烈烈的“不务正业”运动，就此拉开序幕。</p><p style="margin-left: 0px;">但凡老板出国见了点世面，回来总想搞点“大的”，这几乎是刻在企业家DNA里的条件反射，山内溥也不例外。在他眼里，任天堂的未来，必须是星辰大海，是衣食住行，是“人类离不开的任天堂”。结果呢？出租车公司的司机师傅比黑社会还难管，情人酒店又惹了一身麻烦，速食米饭更是无人问津。</p><p style="margin-left: 0px;">一通操作猛如虎，回头一看，公司账户只剩二百五。这个时候的山内溥，就像一个在赌场输到精光的阔少爷，脸上无光，口袋没钱。他站在京都的十字路口，前路茫茫，究竟该怎么办呢？</p><p style="margin-left: 0px;">对于山内溥这位行事风格素来以“铁腕”和“独断”著称的君王而言，这不仅仅是一次商业上的惨败，更是一次对其个人权威和商业直觉的公开处刑。他亲眼见证了美国扑克牌公司（United States Playing Card Company）那小得可怜的办公室，深刻认识到家族传承百年的纸牌生意，其天花板之低，远超想象。他迫切地想要带领任天堂这艘百年老船驶向更广阔的蓝海，却一头扎进了最汹涌的漩涡。出租车、酒店、食品，这些看似能带来稳定现金流的“实业”，对于一个基因里只懂“玩”的公司来说，简直是跨物种恋爱，结局注定惨淡。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/00b5d8a653b67e18931cc721a3b66ef1.gif" /></figure><p style="margin-left: 0px;">这场代价高昂的试错，让任天堂元气大伤，濒临破产。但从商业战略的角度看，这又是一次必要的“压力测试”。它用最残酷的方式告诉山内溥：你以为你什么都懂，但市场会教你做人。公司面临的已经不是“如何增长”的问题，而是“如何活下去”的生存危机。正是这种深入骨髓的绝望感，为任天堂接下来既荒诞又传奇的转型，提供了最完美的温床。因为当一家公司被逼到墙角时，任何一根救命稻草，无论看起来多么不切实际，都会被紧紧抓住。</p><p><strong>纸牌之王的最后一搏</strong></p><p style="margin-left: 0px;">在多元化的战场上被揍得鼻青脸肿之后，山内溥做出了最符合人性的选择：战略性撤退，退回自己最熟悉的舒适区，纸牌。</p><p style="margin-left: 0px;">这不是信心的表现，而是求生的本能。毕竟，在找到新的金矿之前，守住祖上留下来的盐碱地，至少还能保证有口饭吃。</p><p style="margin-left: 0px;">任天堂首先加强了与迪士尼的合作。早在1959年，山内溥就展现了他超越时代的眼光，签下了迪士尼的IP授权，将米老鼠和唐老鸭印在了塑料扑克牌上。这一招在当时的日本市场堪称降维打击。过去，扑克牌总与赌博、黑道这些上不了台面的东西挂钩，但迪士尼角色的出现，瞬间将其“洗白”，变成了可以全家同乐的派对游戏。这次合作大获成功，第一年就卖出了超过60万套，让任天堂在日本扑克牌市场一举奠定了霸主地位。如今，面对危机，山内溥自然想起了这位曾经的“贵人”，推出了更多联名产品，试图榨干纸牌业务的最后一滴油水。</p><p style="margin-left: 0px;">国内市场的成功，并不能满足山内溥的野心。他将目光投向欧美国家。他认为，任天堂的塑料扑克牌经久耐用，质量上乘，理应能在欧美市场大杀四方。但现实很快就给了他一记响亮的耳光。这是一个典型的、可以写进商学院教科书的“产品-市场不匹配”失败案例。当时欧美这边认为纸牌是消耗品，没必要买贵的。用烂就丢，廉价一点的纸牌更容易让人们接受。任天堂的塑料扑克牌在欧美市场完全打不开销路，山内溥的“出海梦”还没开始，就已搁浅。</p><p style="margin-left: 0px;">屋漏偏逢连夜雨。正当任天堂在海外碰壁，国内市场也风云突变。1964年东京举办了奥运会。这是日本首次举办奥运会，也是战后日本向世界展示其全新面貌的盛大舞台。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/7970ea4836e833998a2b5037e6114903.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">整个国家都沉浸在一种昂扬的、拥抱新生活的情绪之中。奥运会不仅带来了基础设施的飞跃，比如著名的新干线“子弹头列车”，更重要的是，它极大地丰富了日本民众的娱乐生活。政府大力推广体育运动，户外活动、看比赛、参与社区体育俱乐部，成为了新的时尚。</p><p style="margin-left: 0px;">这股席卷全国的“娱乐升级”浪潮，对任天堂这样的“旧娱乐”供应商来说，无异于一场海啸。当人们的休闲时间被保龄球、电影、露营和各种体育赛事填满时，谁还有心思围坐在一起玩花札纸牌呢？任天堂的核心业务，正在被时代无情地蚕食。公司的股价也应声暴跌，从最高的每股900日元，一路狂泻到60日元，几乎沦为废纸。</p><p style="margin-left: 0px;">山内溥后来也说，如果当时任天堂没上市的话，公司可能就没了。</p><p style="margin-left: 0px;">内外交困之下，山内溥终于明白，死守着纸牌这块祖业，只有死路一条。任天堂必须，也只能，在新的战场上杀出一条血路。</p><p><strong>“山寨”的艺术与大总管的登场</strong></p><p style="margin-left: 0px;">对于任天堂未来要成为一家什么样的公司，对于自己到底要干点什么才好，山内溥是完全不知所措的。</p><p style="margin-left: 0px;">但山内溥懂反思，开始思考任天堂的优势到底是什么。</p><p style="margin-left: 0px;">说到底，任天堂从创始到现在都是一家贩卖娱乐的公司，配合祖辈打通的经销渠道，做玩具好像可以，那就试试做玩具吧。</p><p style="margin-left: 0px;">做什么玩具呢？</p><p style="margin-left: 0px;">山内溥自己不擅长创作玩具，他也不爱玩玩具。但这不代表不可以抄啊。不对，是致敬。他将目光投向了当时正蓬勃发展的玩具市场，策略简单粗暴，什么好卖就做什么。这时的任天堂，没有宏大的创新蓝图，唯一的KPI就是：搞钱，快点搞钱。</p><p style="margin-left: 0px;">于是，一系列充满了“既视感”的玩具产品线被迅速推出。</p><p style="margin-left: 0px;">从最简单的开始做起，首先做的是麻将、围棋这类生产难度相对低一点的棋牌。其中最受欢迎的是“役满麻将”。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/d6d9e1a26904cf788e407692fe06130b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">棋牌成功给任天堂回了一口血，山内溥尝到甜头决定继续发力。对于“抄作业”这件事，山内溥觉得年轻人会比老油条擅长。但当时的年轻人大多不愿意加入任天堂。因为觉得任天堂是一家古老、和赌博有关的公司。</p><p style="margin-left: 0px;">山内溥的做法也很简单，加薪！在报刊上登招聘广告，并且开出比行业平均水平还要高点的薪酬。</p><p style="margin-left: 0px;">在公司战略重心向玩具全面转移的过程中，一个关键人物登场了。他就是今西絋史。</p><p style="margin-left: 0px;">1963年今西絋史大学毕业，读法学系。毕业后加入任天堂，负责行政、财务、策划，甚至还要担任部分项目的项目经理，但唯独跟他读的专业没有关系。他后来成了任天堂的大总管，内部戏称他为“地域番犬”，也就是看门狗的意思。翻译过来就是“一脸严肃的公关部长和任天堂发言人”。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/e99fe89314f0f435f0a8c6b645d931c5.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">1964年，任天堂制作的第一款玩具——云霄小飞兔。售价800日元。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/f7952f9443a28c897f58d162dedb30f3.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">云霄小飞兔的玩法非常简单，几颗珠子在不同赛道奔跑，谁先到达终点谁胜出。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/55eadbae5864f13e33566a6538e5eeb8.gif" /></figure><p style="margin-left: 0px;">之后也出过其他版本的云霄小飞兔，比如下面这款，售价500日元。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/02a32df2fb49305e379d49ff25918787.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">云霄小飞兔同样是一款成功产品。山内溥再次思考任天堂未来的路，虽然现在任天堂还没有原创的玩具产品，但可以在致敬的基础上加入自己的思考。</p><p style="margin-left: 0px;">山内溥是凭着直觉和铁腕指明方向，今西絋史的加入更是稳固了任天堂的娱乐基因，他负责搭建班子、规划路线，他是确保山内溥的指示能顺利落地的大总管。后面出现的横井军平、上村雅之、竹田玄洋这几位名将也是他面进来的。</p><p style="margin-left: 0px;">可以说，没有今西絋史今天的任天堂就不是现在这个样子。他的到来，标志着任天堂的“胡来”，开始变得有章法了。</p><p><strong>摸鱼的维修工</strong></p><p style="margin-left: 0px;">成事在天，谋事在人。任天堂的棋牌、云霄小飞兔玩具都不是原创产品，这些产品能取得成功还是靠祖先的发力，经销网络发达就是好。</p><p style="margin-left: 0px;">后面任天堂能成为“世界主宰”还得招纳几位圣贤，最早出现的这位叫横井军平。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/0fc7604975ffcb8324cdbcfd1385c1e2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">横井军平出生于1941年9月10日，土生土长的京都人。大学学的是电子技术，成绩一般，毕业后在夏普实习过。但最终选择了任天堂这家在当时名不见经传的小公司。理由很简单，离家近。</p><p style="margin-left: 0px;">1965年横井军平加入了任天堂，负责维护生产花札的设备。维修机器的工作对他来说过于简单，导致工作不饱和。用现在流行的话来说，横井军平就是一个典型的“技术宅”和“摸鱼大师”。在工作的间隙，他会用工厂里废弃的零件，捣鼓一些有趣的小玩意儿来打发时间，纯粹是为了自娱自乐。</p><p style="margin-left: 0px;">山内溥日常有巡逻的习惯（好像很多中小企业的老板都有这个习惯🤔）。在1966年的某一天，山内溥照常巡逻。他的出现往往让整个车间的空气都为之凝固。这一次，一个不寻常的景象吸引了他的目光。他看到那个名叫横井军平的维修工，正在玩一个自己制作的奇怪装置。</p><p style="margin-left: 0px;">好家伙，摸鱼摸到我眼皮底下了。走近一看，那是一个用木头和弹簧做成的、可以伸缩的机械手臂，一按把手，前端的爪子就能张开和合拢，抓住远处的物体。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/ac43a0e1cbadf7d6d0bbb3498c8e6d27.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">命运的齿轮，就在这间嘈杂的工厂里开始悄然转动。</p><p style="margin-left: 0px;">山内溥虽然不玩玩具和游戏，但他对“什么是好玩的事物”却有着惊人的判断力。</p><p style="margin-left: 0px;">看着惊慌失措的横井军平，他问了一句：“这是什么？”</p><p style="margin-left: 0px;">横井军平简单的介绍了一下他这玩意的功能后，山内溥丢下一句“把它商品化”。</p><p><strong>一个玩具拯救一家公司</strong></p><p style="margin-left: 0px;">横井军平的那个即兴创作，被山内溥命名为“超级怪手”（Ultra Hand）。这款结构简单、玩法直观的玩具，在当时能卖出10万套就属于爆品的年代，“超级怪手”卖出了120万套。成为任天堂历史上第一个销量破百万的玩具爆款。而且这个玩具还是任天堂原创玩具。</p><p style="margin-left: 0px;">“超级怪手”的成功，其意义远不止是为公司赚了一大笔钱。它如同一针强心剂，打进了濒临死亡的任天堂体内，彻底终结了公司内部对于是否应该放弃纸牌、投身玩具行业的争论。它用实打实的销量证明了，这条路，走得通。横井军平也因此一战成名，被山内溥从生产线上直接提拔到了新成立的“游戏部”，从一个默默无闻的维修工，一跃成为公司产品研发的头号明星。</p><p style="margin-left: 0px;">更重要的是，“超级怪手”的诞生与成功，无意中催生了任天堂未来几十年里最核心、最宝贵的产品哲学——“枯れた技術の水平思考”（Kareta Gijutsu no Suihei Shikō），通常被翻译为“成熟技术的水平思考”，或者更广为人知的“横向思维与枯萎技术”。</p><p style="margin-left: 0px;">这个听起来有些拗口的词组，其内核思想却异常朴素和强大 ：</p><p style="margin-left: 0px;"><strong>“枯萎技术”（Withered Technology）</strong>：这里的“枯萎”并非指技术过时，更准确的翻译应该是“成熟”或“饱经风霜”（weathered）。它指的是那些已经大规模生产、技术稳定、成本极低的成熟技术。比如弹簧、塑料、液晶计算器显示屏、AA电池等。横井军平认为，开发新产品不一定非要追逐最尖端、最昂贵的技术，因为尖端技术往往伴随着高昂的成本、不稳定的良率和巨大的研发风险。</p><p style="margin-left: 0px;"><strong>“水平思考”（Lateral Thinking）</strong>：这指的是将这些廉价、成熟的技术，用一种全新的、意想不到的方式组合起来，创造出前所未有的娱乐体验。创新的关键不在于技术本身有多先进，而在于应用技术的方式有多巧妙。</p><p style="margin-left: 0px;">“超级怪手”正是这一哲学的完美“创世之作”。它没有使用任何高科技，只是将木条、弹簧、绳子这些最普通、最便宜的“枯萎技术”组合在一起。但“可以伸长的手臂”这个玩具概念，却是新颖、有趣、能激发人们玩乐天性的“水平思考”的产物。</p><p style="margin-left: 0px;">这次巨大的成功，在任天堂内部形成了一种强大的“路径依赖”。它证明了，创造一个商业爆款，不一定需要像索尼那样投入巨额的研发经费去攻克技术难关。一条更经济、更讨巧的道路被开辟了出来：利用现有的廉价技术，去创造全新的玩法。这个从一个塑料玩具中诞生的朴素哲学，将如同一个幽灵，深刻地影响任天堂未来的大多数关键决策。从后来利用计算器技术制作的 Game &amp; Watch，到为了续航而坚持使用黑白屏幕的 Game Boy，再到不与索尼、微软比拼画面机能，而是用体感操作开辟新赛道的 Wii，其背后都闪耀着“成熟技术的水平思考”的光芒。可以说，这一天，横井军平不仅发明了一个玩具，更定义了任天堂的灵魂。</p><p style="margin-left: 0px;">“超级怪手”的成功并非孤例，它开启了横井军平一连串的创意井喷，也让任天堂彻底掌握了这套“点石成金”的独门秘籍。紧随其后，横井军平又推出了“超级发球机”（1968年发售，售价1480日元），一个简易的自动棒球发球机。它只用一节电池驱动一个小马达，通过简单的弹簧和旋转臂结构，就能自动把乒乓球一个个弹射出来，让孩子们能独自练习挥棒击球。一节电池能续航8小时，发球3200次以上。这个玩具再次大卖，销量也突破了百万（第一年销量80万台，第二年飙升到100万台），证明了这套打法是可复制的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/c671eedda40e037e36ec14cd87bbc5da.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">接着，横井军平开始将廉价的电子元件融入玩具，创造了“爱情测量仪”（1969年发售，售价1800日元）。这个设备让两个人手牵手，再各自握住金属球，通过测量皮肤间的微弱电流，用一个仪表盘来显示所谓的“爱情指数”。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/7a11e2573600fbb44dfd59e93fc22344.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">技术简单到不能再简单，其实就是个电流表。但“测量爱情”这个概念却新奇有趣，精准地切中了年轻人的社交需求。</p><p><strong>新贵的傲慢与迷失</strong></p><p style="margin-left: 0px;">“超级怪手”的巨大成功，让任天堂一夜之间从破产边缘的“吊车尾”逆袭成了玩具界的“新贵”。而暴富，往往会催生出傲慢。赚到第一桶金的任天堂，很快就犯下了几乎所有暴发户都会犯的错误：高估自己的能力，试图挑战行业里的“武林盟主”。</p><p style="margin-left: 0px;">这个盟主，就是来自丹麦的乐高（Lego）。1968年，任天堂推出了一系列名为“N&amp;B”的积木玩具（Nintendo Block，1968年-1972年发售，售价50日元-2800日元），公然对标乐高。为了体现差异化，N&amp;B积木加入了很多圆形和弧形的零件，并且在广告中直接与乐高方方正正的积木进行对比，宣称自己的产品更有趣。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/55556a3b03b6a75a5f2107987db5a854.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">乐高公司自然不能容忍这种挑衅，一纸诉状将任天堂告上法庭。然而，任天堂的设计师展现了惊人的“法务前瞻性”，他们巧妙地修改了积木底部的圆管结构，成功规避了乐高的专利，最终赢得了官司。</p><p style="margin-left: 0px;">在法庭上赢了，不代表在市场上也能赢。消费者很快发现，N&amp;B积木的咬合度远不如乐高，拼插体验不佳。最终，这条产品线在70年代初便草草收场。与乐高的这场战争，给任天堂上了宝贵的一课：公司的核心竞争力，不在于乐高那种需要极高工业精度和系统化设计的领域。任天堂的“天赋树”，点在了“低成本、高创意、轻巧型”的奇特产品上。试图在别人的主场用别人的规则击败别人，注定是徒劳的。这次失败，反而从反面再次印证了横井军平“成熟技术”哲学的正确性：不要硬碰硬，要玩点别的。</p><p style="margin-left: 0px;">然而，公司的身份认同危机并未就此结束。在玩具领域站稳脚跟后，山内溥似乎又开始了他那该死的“多元化”冲动，只不过这次的方向从“服务业”转向了“实用品”。任天堂开始了一系列令人迷惑的“跨界”尝试，试图证明自己不仅能制造快乐，还能解决生活中的实际问题。</p><p style="margin-left: 0px;">其中一个产品是婴儿车（1972年发售，售价8900日元）。这是一款可折叠的轻便婴儿车，在70年代初算得上是相当前卫的设计。然而，这款产品的机械结构存在缺陷，在折叠时很容易夹到用户的手指，甚至有意外折叠导致婴儿摔落的风险。这种致命的设计缺陷导致用户投诉不断，任天堂也回收了很多有问题的婴儿车，很快这款婴儿车就在市场上销声匿迹了。最终只卖出了2.3万台。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/0e9b16d6a5ffe2cec0b2cc69264aadbd.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">另一个奇葩产品是1970年推出的家用棉花糖机（1970年发售，售价2980日元）。这是一个简化版的、可以在家制作棉花糖的电器。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/283aa97f4ddf7aef8cf12130140a11ea.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">想法很美好，但对于一个玩具公司来说，跑去卖家用电器，无疑又是另一次“物种跨越”。此外，任天堂甚至还涉足过办公和健身领域。</p><p style="margin-left: 0px;">下图是任天堂的打印机，名叫“拷贝者”（1971年发售，售价9800日元）。之后也迭代过3款，价格也更贵，但都激不起浪花。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/a8eb3fd7551f600bf8e2157caad74723.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">下图是一款健身器材，名叫“你来我往”（1975年发售，售价3000日元）。我小时候也玩过这个，但我玩的那款不是任天堂出品。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/18/4e066e9f8151b87ba27630106a0c8b29.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">这些在“实用品”领域的尝试，无一例外都失败了。这一连串的失败，并非偶然。它们共同指向了一个深刻的结论：市场的反馈，正在帮助任天堂进行一次痛苦但必要的“自我认知矫正”。市场可是用真金白银投票的。</p><p style="margin-left: 0px;">正是这一时期不断的碰壁和试错，像一把刻刀，一点点雕琢出了任天堂未来的形状，剔除了所有多余的业务枝蔓，最终让公司的核心“创造独特的娱乐体验”变得前所未有的清晰。</p><hr /><p style="margin-left: 0px;">但故事还远未结束。一个最关键的伏笔，早已悄然埋下。那个用塑料和弹簧拯救了公司的男人，横井军平，他的大学专业是什么来着？</p><p style="margin-left: 0px;">是电子工程。</p><p style="margin-left: 0px;">驱动下一个时代变革的技能，早已潜伏在这家公司的体内，隐藏在一个玩具设计师的身份之下。塑料和发条的时代即将落幕，一个由电路、像素和蜂鸣声构成的幽灵，正在机器中缓缓苏醒。</p><p style="margin-left: 0px;">游戏，即将改变。</p><hr /><blockquote><p style="margin-left: 0px;">⭐ 如果你也喜欢任天堂，想了解任天堂的历史，欢迎关注<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MDc1ODI2NA==&amp;action=getalbum&amp;album_id=3974696752371646468#wechat_redirect">《任天堂物语》❤️</a></p></blockquote>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101893</id>
            <title>关注足底健康：30天从疼痛难忍到逐步缓解，面对足底筋膜炎我做了这些</title>
            <link>https://sspai.com/post/101893</link>
            <guid isPermaLink="false">https://sspai.com/post/101893</guid>
            <pubDate></pubDate>
            <updated>Sun, 17 Aug 2025 07:46:06 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 足底筋膜炎,康复经验,运动损伤,疼痛缓解  
<br>  
<br>  
总结: 本文作者分享了个人足底筋膜炎的康复经历。最初因打篮球导致右脚疼痛，经诊断为足底筋膜炎。文章解释了足底筋膜炎的定义和症状，即足底筋膜因过度使用或错误运动模式引发炎症。作者提出五点缓解方法：找出诱因（如不正确运动姿势）、减少足部活动、选择合适的鞋和鞋垫、使用抗炎药物以及尝试不同放松方式（如冰敷或筋膜球）。最后强调康复需个体化尝试，并提醒读者遵循专业医疗建议。 </div>
                        <hr>
                    
                    <p><strong>（注意：本文仅为个人康复经历的分享记录，不构成任何医学诊断或治疗建议。若您出现类似不适症状，请务必及时前往正规医疗机构就诊，遵循专业医生的指导。）</strong></p><p>今年 7&nbsp;月 4&nbsp;日，我打完篮球后出现右脚脚底疼痛。起初没在意，以为是正常的运动疲劳，休息几天就会好转。大概休息 3-4&nbsp;天后，感觉症状基本消失，于是在 7&nbsp;月 8&nbsp;日继续去球场打篮球。但这次打完球后，脚底再次疼痛，且痛感明显加重。这次我便格外重视，之后花了约 12&nbsp;天时间休息，没有参加任何篮球活动，期间能明显感受到脚底在慢慢好转。</p><p>到了 7&nbsp;月 20&nbsp;日，我觉得症状已基本消失，于是在去看球赛的路上，路过球馆时忍不住又去打了篮球。然而这次打完球后，疼痛突然变得非常严重，甚至出现了轻微肿胀。随后两天我前往医院检查，X&nbsp;光除了显示我十多年前的陈旧性骨折线以外，未显示脚底板疼痛的地方有骨折，最终被诊断为足部损伤性筋膜炎 ——&nbsp;这个对我来说有些陌生的名词，全称其实是足底筋膜炎。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/17/b08dae77b1e5c86ff4a45e0413f5bb77.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>右脚-X光光片</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/17/385afff760c9d4b1837fd5df4cf12be0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>被诊断为筋膜炎</figcaption></figure><h2>足底筋膜炎定义：</h2><p>“何为足底筋膜炎呢？维基百科的定义是：足底筋膜炎（英语：Plantar fasciitis），又称跑者足（jogger's heel），是一种发生在支撑足弓的结缔组织附着点（肌腱和韧带附着于骨头处）的病变。患者会出现脚跟或脚底疼痛，且每天起床或休息后起身走路的第一步，症状最为严重。若将脚掌及脚趾向上（向胫骨方向）弯曲（即医学上的 “背屈”&nbsp;动作），也会引发疼痛。症状通常缓慢出现并逐渐加重，且约三分之一的患者双脚均有类似症状。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/17/6b8b9b0ffb9a7fa864505acd04366c8f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>足底筋膜炎最常见的疼痛部位-图来自维基百科</figcaption></figure><p>简单说：足底筋膜就像一根 “橡皮筋”，长期被过度拉扯会变紧、变脆，甚至出现微小撕裂，进而引发疼痛。</p><h2>我是如何缓解疼痛的：</h2><p>那么过去的二十多天我是如何缓解足底筋膜炎带来的疼痛呢？我主要做了以下五点，第一点是找到诱发足底筋膜炎的因素；第二点是合理的制动，尽量减少足部落地的频次；第三点是选择合适的鞋子或者足底减压垫以及定制/矫正鞋垫减轻走路时给疼痛部位带来的压力；第四点是使用非甾体类抗炎药物或者双氯芬酸二乙胺抗炎药物镇定止痛，第五点是选择合适的手段放松足底。以上几点是简单的概述，接下来我会详细分点展开说说我具体是怎么做的。</p><p><strong>1.找到足底筋膜炎的诱因：</strong></p><p>我觉得治疗足底筋膜炎最重要的一点，是找到自己的诱发原因。虽然维基百科提到目前足底筋膜炎的成因尚未完全明确，但就我个人经验而言，过度使用足底或采用不正确的运动模式、训练动作，都可能加剧足底疼痛 ——&nbsp;这类动作一定不要继续。尤其是若存在扁平足、高足弓、足外翻或足内翻等问题，脚部长期处于异常发力模式中，很可能会增大足底筋膜的压力，最终引发炎症。我自己的情况就是如此 ——&nbsp;因打篮球时，特别是扣篮过程中过度用前脚掌发力跑动，加上起跳落地等动作的发力模式不正确，才导致了足底筋膜炎。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/17/094bb907c1f1acf44a9c4afcd12750ef.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>不正确的打球发力动作</figcaption></figure><p>所以在我停止打篮球（尤其是扣篮）后，脚底的情况每天都在好转。因此，如果你也有足底筋膜炎，需要先找到自己的诱发原因，减少诱因的出现，能帮你大大缓解足底筋膜炎的症状加剧。”</p><p><strong>2.合理的制动</strong></p><p>对于足底筋膜炎，医生通常不会给出像骨折一样严格的制动建议，但就我个人经验而言，在筋膜炎急性期尽量减少走路，对恢复还是很重要的。尤其是我最初的症状是脚掌一落地、一受力就会疼痛，如果你有条件可以不走路，那就尽可能少走路，而作为需要通勤的打工人，我在北京每天不得不走接近一万步的路。为了避免疼痛加剧，我不得不想尽办法减少足部负担。我的第一个方法是把地铁通勤改为公交通勤：上班需要换乘地铁时，北京的地铁换乘动辄就要走近一千步；改坐公交后，我会让女朋友骑电动车送我到家门口的公交车站乘车，直达公司附近的车站后，再骑自行车到园区门口。其次，原本上班期间的两顿堂食改为了中午点外卖，晚上下班再吃饭，吃完后直接坐公交车回家。再者，上班时尽可能坐在工位上，减少打水和上厕所的频次。通过以上几种手段控制后，我的每日步数从原本的一万步左右降到了 3000&nbsp;步左右。这样持续控制十天后，对足底的康复起到了显著作用。”</p><p><strong>3.选择合适的鞋子鞋垫或者减压垫</strong></p><p>作为一名痴迷的篮球爱好者，我不知不觉把篮球鞋当成了通勤鞋，这可能也是诱发我足底筋膜炎的原因之一。因此，更换适合自己的鞋子和鞋垫非常重要，尤其在上班通勤时一定不要穿这类适用于运动场景的球鞋 ——&nbsp;因为篮球鞋包裹性强，且前后坡度落差大，并不适合日常走路。</p><p>其次，知晓自己平常走路的发力习惯也非常重要。比如我观察了自己的鞋垫，发现前脚掌内侧大拇指球的位置凹陷比较多，这能看出我脚掌这个部位的压力比较大，而这个位置刚好和我右脚足底筋膜炎的疼痛位置十分接近。建议有条件的朋友可以前往医院或者专业机构做一次足底检查。我自己没有在医院或机构做过，但上周末在耐克看到有测量仪器，就登记做了个足底检查，最终得到了一个针对自己脚型的结果。不过我觉得这个结果仅仅只能做参考，因为测量时我感觉没有对准。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/17/d55cf26ee5856ecb97fe94324c001cbf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>足底检测</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/17/728b2c4c4e812d730e7075acc6dd025d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>足底检测</figcaption></figure><p>最后，选择合适的鞋垫或者配备脚底减压垫，能在一定程度上减少受伤部位的发力和疼痛。不过一般来说，定制鞋垫的价格非常昂贵，普遍在 800&nbsp;到 1200&nbsp;元左右。建议可以先试试针对自己脚型的普通矫正鞋垫是否有效，再考虑更贵的个人定制鞋垫。当然，减压垫也是一个选择，比如我这次就购买了前脚掌跖骨减压垫，使用时能大大减轻急性炎症期的疼痛；如果是脚后跟疼痛，那么可以选择脚后跟减压垫配合使用。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/17/f230f680619653f86337590abe05d02e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>足底减压垫</figcaption></figure><p><strong>4.药物治疗</strong></p><p>如果足底筋膜炎导致的疼痛比较严重，可能就需要使用抗炎药物了。比如我的前脚掌最初十来天一接触地面就会产生强烈的刺痛，这时候我就使用了医生开的非甾体类抗炎药物 ——&nbsp;氟比洛芬凝胶贴膏。当然也可以使用双氯芬酸二乙胺等抗炎镇痛类药物，比如扶他林软膏就是常用的止痛药物，这类药物也是大多数足底筋膜炎患者会使用的。不过使用各种药物的一切前提，还是得向医生咨询，请遵医嘱。</p><p><strong>5.放松足底</strong></p><p>放松足底的手段非常多，比如踩筋膜球、冰敷或热敷，还有到医院接受冲击波治疗，但哪种有效还因人而异。比如有人用足底筋膜球或网球放松足底能缓解疼痛，但也有人使用后反而加重了足底筋膜炎；冰敷和热敷也是需要注意的细节，因为有人在急性期过后用热敷没效果，医生建议用冰敷 ——&nbsp;比如我的医生就让我冰敷，但也有人说足底筋膜炎不能接触过冷的温度，可能会加重症状；甚至还有人用冷热交替泡脚逐步缓解，我尝试过这个方法，确实有效果，但不确定是不是因为筋膜炎本身已经要好转，刚好我用了这个手段。这个方法我后来也在一本书《护脚圣经》中看到，书中还提供了其他放松和拉伸足底的方法，但这些方法是否有效，每个人可能不太一样。在放松足底这件事上，需要大家自己去尝试，找到适合自己的放松方法。</p><h2>最后的总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 写完这篇文章的时候，已经是我确诊足底筋膜炎的第 26&nbsp;天了。目前情况逐步好转，基本走路时没有疼痛，除了偶尔走路过多或早上起床时会出现疼痛外，足底筋膜炎已基本不困扰我的生活。当然，偶尔晚上还是会有疼痛，这时候我会使用抗炎药物缓解。相比一个月前走路落地就疼的情况，现在已经大有好转。不过距离参加篮球、跑步等剧烈运动还需要一段时间，具体多久不好说，只能再过一阵子慢慢增加运动强度，观察脚底是否会有不适。最后希望所有足底筋膜炎患者早日康复。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>（注意：本文仅为个人康复经历的分享记录，不构成任何医学诊断或治疗建议。若您出现类似不适症状，请务必及时前往正规医疗机构就诊，遵循专业医生的指导。）</strong></p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101892</id>
            <title>Ulysses没法批量导出Markdown，于是我让AI写了个小工具</title>
            <link>https://sspai.com/post/101892</link>
            <guid isPermaLink="false">https://sspai.com/post/101892</guid>
            <pubDate></pubDate>
            <updated>Sun, 17 Aug 2025 07:38:18 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: AI编程,Ulysses,Markdown导出,TextBundle  
<br>  
<br>  
总结: 作者回忆自己作为程序员时没有AI工具的年代，现在利用AI编写脚本提高效率。重点描述了Ulysses导出Markdown文件的问题：批量导出会合并多篇文章为一个文件，手动导出又会导致图片链接失效。介绍了TextBundle格式作为解决方案，但仍需处理合并问题。最后分享了自己用AI编写的Python脚本，可将TextBundle文件按标题拆分为独立Markdown文件，并支持图片迁移。还提供了改进版脚本，将标题转换为front matter格式。 </div>
                        <hr>
                    
                    <p>作为一个曾经的（三流）码农，很庆幸那个年代尚无 AI 辅助编程工具，否则我应该是被 AI 取代掉的第一批。</p><p>虽然已经很多年没正儿八经碰过代码，不过今年我偶尔会让 AI 帮我写一些小工具（脚本）来实现一些小的功能想法，提高效率的同时还省钱——当然，99%的代码都是 AI 写的。</p><p>比如我做了几个快捷指令，并放在 macOS 状态栏上——就像 One Switch 做的那样——可以实现一键「隐藏桌面图标文件」、「生成二维码图」、「图片压缩」等小功能。</p><figure class="image ss-img-wrapper image_resized" style="width: 420px;"><img src="https://cdnfile.sspai.com/2025/08/17/e2f9c0dd8a7e2443fcd7ca305e64efcc.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 10px;">我还利用「自动操作」配合 Shell 脚本制作了「一键视频瘦身」的小功能，任何软件都不用打开。</p><figure class="image ss-img-wrapper image_resized" style="width: 360px;"><img src="https://cdnfile.sspai.com/2025/08/17/323aa3ccca3825a3c4773b6826d9a22b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 10px;">今天我想分享一个 AI 帮我实现的小功能跟 Ulysses 有关系。</p><p style="margin-left: 10px;">Ulysses 是我用了多年的 Markdown 写作工具，各方面体验都近乎完美。为数不多让我想吐槽的地方之一，就是它保存的文章不是标准的 Markdown，而是一种或许只有它们自己能看懂的文件组织和格式。</p><figure class="image ss-img-wrapper image_resized" style="width: 318px;"><img src="https://cdnfile.sspai.com/2025/08/17/e94af15843df372372581020d38c709c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Ulysses 的本地备份库</figcaption></figure><p>好在 Ulysses 支持丰富的导出功能，比如你可以把一篇文章用 Ulysses 导出为 .txt 纯文本、.rtfd 富文本、HDML 网页、ePUB 电子书、PDF、docx，当然也包括 Markdown。</p><p>不过如果你想要一次批量导出多篇文章，就没那么好受了，不管是导出为纯文本、富文本还是 Markdown，<strong>Ulysses 都会把你的多篇文章合并成一个文件</strong>。</p><p>比如我选择 80 篇文章，并导出为 Markdown，我们会得到如下文件结构的文件：</p><pre class="language-null"><code>/
  ├── index.md
  ├── image1.jpg
  └── image2.jpg
  └── ...</code></pre><p>我的 80 篇文章都被合并成一个叫 <i>index.md</i> 的 Markdown 文件，这肯定不是我想要的，我希望每一篇文章都是单独的一个 Markdown。</p><p>那试试不用 Ulysses 提供的导出，而自己手动导出呢？下面是我派作者 <a href="https://sspai.com/post/52195" target="_blank">Vanilla 分享的手工方法</a>。</p><ol><li>在 Ulysses 软件设置「边栏」里勾选「外部文件夹」</li><li>在 Ulysses 外部文件夹新建任意名的文件夹</li><li>把 Ulysses 的多篇文章拖到新建的文件夹，即会保存成独立的 Markdown 文件</li></ol><p>这种方式也不完美，因为图片并不会拷贝过去，导致保存的 Markdown 文章内图片链接失效。</p><p>细心如我会发现，Ulysses 还可以导出一种叫 TextBundle 的文件格式。</p><figure class="image ss-img-wrapper image_resized" style="width: 336px;"><img src="https://cdnfile.sspai.com/2025/08/17/fa3d866dc94be219456e908d45f811b2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Ulysses可以选择导出TextBundle</figcaption></figure><p>我跟大家一样对 TextBundle 这种文件格式不是很眼熟，这不怪咱们，因为它并不是一种标准的文件格式，而是由 Ulysses 的开发团队和其他一些 Markdown 编辑器开发者（比如 iA Writer、Bear）一起制定的格式方案，目的就是解决 Markdown 文件传播时内嵌资源（比如图片）丢失的问题。</p><p>TextBundle 文件本质上就是一个压缩打包。用 Ulysses 导出文章合集的 <i>.textbundle</i> 文件的默认目录结构如下：</p><pre class="language-null"><code>xxx.textbundle

 ├── text.md

 ├── info.json

 └── assets/

       ├── image1.jpg

       ├── image2.png

       ├── ...</code></pre><p>Ulysses 仍会把多篇文章合并成一个 Markdown（这里是 <i>text.md</i>），<i>assets</i> 目录下是文章内的所有配图。</p><figure class="image ss-img-wrapper image_resized" style="width: 180px;"><img src="https://cdnfile.sspai.com/2025/08/17/445eed638c52377abc072b17bb12ebe2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>打开 text.md 里大概是这样的</figcaption></figure><p>我找遍全网都没有能完美实现我想要的导出方案。好吧，那就自己动手写个脚本，把 <i>text.md</i> 按照一级标题 # 拆分成多篇 Markdown 文件，并把一级标题作为文件名。</p><p>脚本我可不会写，不过有 AI，这都不算事儿。ChatGPT 建议我用 Python 搞。它按照我的需求想法写了一段 Python 代码，并保存为 <i>split_textbundle.py</i> 这个文件。你可以在<a href="https://github.com/huangyangme/split-textbundle" target="_blank">我的 GitHub 项目</a>下载或直接复制代码。</p><p>只需要把 Ulysses 导出的 <i>xxx.textbundle</i> 和 AI 写的 <i>split_textbundle.py</i> 这两个文件放在同一个文件夹（比如名叫 <i>split_output</i>）内，然后执行这个 Python 就搞定了。</p><figure class="image ss-img-wrapper image_resized" style="width: 260px;"><img src="https://cdnfile.sspai.com/2025/08/17/5557a3037801f229cf5dfbabafafca8a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>从没有接触过编程的朋友可以这样运行 Python 文件。打开终端，输入 <code>cd</code> 后面加一个空格，再把文件夹拖拽进终端窗口，然后回车，粘贴 <code>python3 split_textbundle.py</code> 这行代码并回车，就 OK 了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/17/579f34b2877b48332b5c9a2c4c3fa997.gif" /></figure><p>程序会自动生成一个叫 <i>split_output</i> 的文件夹，里面包含每篇文章的 Markdown 文件，以及包含所有图片的 <i>assets</i> 文件夹。</p><figure class="image ss-img-wrapper image_resized" style="width: 382px;"><img src="https://cdnfile.sspai.com/2025/08/17/9e55697be985f300e5382bfbffb8b6f2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>现在我们可以把 <i>split_output</i> 文件夹里的所有文件——包括 Markdown 文章和保存在 assets 里的图片——备份到别的地方，或者迁移到 Typora、Obsidian 等你喜欢用的其他 Markdown 编辑写作工具中。</p><p>我还做了一个改进版（项目里的 <i>split_textbundle_frontmatter.py</i>），每篇文章的 Markdown 内不以一级标题 # 作为文章的标题，而是添加 front matter 的 Title 字段，并把一级标题作为 Title 的值。</p><p>文章标题会从：</p><pre class="language-markdown"><code># 这是文章标题</code></pre><p>变成：</p><pre class="language-markdown"><code>---

title: "这是文章标题"

---</code></pre><p>就这样吧。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101861</id>
            <title>Lorqa - 一款本地AI原生的翻译macOS App</title>
            <link>https://sspai.com/post/101861</link>
            <guid isPermaLink="false">https://sspai.com/post/101861</guid>
            <pubDate></pubDate>
            <updated>Fri, 15 Aug 2025 13:28:27 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Lorqa, AI翻译, 本地运行, 隐私保护

<br>
<br>
总结: Lorqa是一款macOS端的本地AI翻译应用，使用LLM在设备上离线运行，支持Qwen3和Gemma3等模型，确保数据隐私。其核心功能包括智能切片处理长文本、简洁界面和快速翻译速度。开发者基于对LLM的了解，优化了翻译体验，速度超过DeepL。用户需手动设置快捷键，应用适合注重隐私和离线使用的场景。 </div>
                        <hr>
                    
                    <h2>&nbsp;</h2><p><a href="https://apps.apple.com/us/app/lorqa-local-ai-translator/id6749881415"><strong>Lorqa</strong></a><strong> 是一款适用于 macOS 的AI原生端到端AI翻译应用。</strong></p><p>它使用LLM(大型语言模型)在你的设备上本地运行，将不同语言之间的文字准确而自然地翻译出来。无需网络，也无需担心隐私被泄漏，一切都在你的电脑中完成。</p><figure class="image ss-img-wrapper"><img alt="Lorqa Preview" src="https://cdnfile.sspai.com/2025/08/15/article/d6eb0d5f28c87d495b847fa6946bfbb0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><a href="https://apps.apple.com/us/app/lorqa-local-ai-translator/id6749881415">App Store下载</a></p><p><strong>核心功能</strong>：</p><p>本地运行 LLM，支持Qwen3,Gemma3,后续会继续增加</p><p>离线可用，无网环境下依然工作</p><p>数据仅存于本地，保护你的内容安全和隐私安全</p><p>智能切片技术，支持长文本翻译，再也不用担心字数限制的问题</p><p>简洁界面，专注端到端的翻译体验</p> <p><strong>心路历程</strong></p><p>翻译是一个很大众的需求，市面上各种各样的翻译软件层出不穷。有很多大厂出手参与此类应用竞争，可以说有很多翻译的解决方案。 过去很长一段时间我日常使用的是DeepL应用版的翻译App,很方便只要选中文本快捷键即可完成内容的翻译，在使用过程中也有一些小的可以吐槽的点，例如：我发现DeepL的翻译速度不如网页版的一些翻译软件速度快，另外翻译的文本数量会收到一些限制，一些长文本还是得通过其他方法。</p><p>我发现现在LLM(文本语言模型)也常作为翻译工具来使用，LLM有良好的多语言能力，现在Qwen3，Gemma3，这类小模型也具备很好的翻译能力。在使用LLM翻译的时候有很多的选择，大多数是网页版，也有一部分是本地部署的模型。这些产品通常没有为翻译场景打造出端到端的翻译体验，总是差点意思。</p><p>我过去做过PocketLM（移动端的LLM本地推理客户端），对于小LLM的能力水平有一定的了解，并且对于模型不同设备的推理速度和载入速度也很熟悉。于是我开始着手使用Apple生态结合LLM打造这个端到端的翻译macOS App, 整个实现过程也相当顺利，经过测试我发现Qwen3 0.6B 4bit的效果已经和DeepL的翻译能力不相上下，我还同时增加了Qwen3 1.7B ，Gemma3系列模型作为备选为用户提供多重选择。</p><p>Lorqa在第一次打开的时候需要选择模型完成下载流程，此后只需要每次载入一次模型即可随时翻译。我在我的机器测试Qwen3 0.6B的推理速度为 280Token/S 速度比DeepL要快。此外针对长文本，会进行切片翻译并合并一起解决了文本字数的限制。 目前因为App Store分发涉及到应用沙盒，快捷键需要用户在 系统设置/隐私与安全/辅助功能/ + （从应用程序选择Lorqa） 自行设置，方可使用快捷键翻译功能。</p><p>我制作这个产品的动机非常个人化。我比较关注这个需求是否有其他人真实存在。关于后续的规划也想听听其他人的反馈～</p><p><strong>配置快捷键和快速翻译教程</strong></p><video class="ss-videoSource video-js" controls="" poster="https://rsshub.dcts.top/sspai/matrix" title="" type="video/mp4"><source src="https://h1.appinn.me/file/1755240079619_%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%BE%E7%BD%AE%E5%B9%B6%E4%B8%94%E4%BD%BF%E7%94%A8.mov" type="video/mp4" /></video>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101855</id>
            <title>如何让 AI 绘图中文呈现更稳定和准确？</title>
            <link>https://sspai.com/post/101855</link>
            <guid isPermaLink="false">https://sspai.com/post/101855</guid>
            <pubDate></pubDate>
            <updated>Fri, 15 Aug 2025 09:29:21 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: AI绘图, 汉字生成, 通义千问, 古诗词意境  
<br>  
<br>  
总结: 文章探讨了AI绘图工具在生成汉字方面的进步与局限。早期AI生成的汉字难以辨认，如同西夏文，而GPT-4o的出现改善了这一问题，但仍需“抽卡”运气。作者发现通义千问的Qwen-Image模型能更稳定地生成包含中文的图片，尤其是古诗词意境图。通过结合ChatGPT生成详细场景描述，再输入通义千问并指定诗句，可生成图文并茂的作品。文章以《归自沙丘后》和《左迁至蓝关示侄孙湘》为例，展示了该方法的效果。此外，作者还尝试将流行歌曲《大展宏图》转化为画面，验证了AI对中文内容的理解与呈现能力。最后，作者鼓励读者尝试这一方法并分享作品。 </div>
                        <hr>
                    
                    <p style="margin-left: 0;"><code>还在愁 AI 经常画不出能看的汉字吗？最近我发现了一个新工具，效果非常惊艳。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/1ccb26c1b622fd234af23bd61bf64cb8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2><code><strong>痛点</strong></code></h2><p style="margin-left: 0;"><code>在很长一段时间里，我用 AI 画画时都不敢在里面放汉字。一旦汉字出现，你立即就能判断这是 AI 画的 —— 那画出来的字简直如同西夏文一般。看着挺眼熟，却完全无法解读出任何意思。在当时，汉字几乎和人物手指数量一样，成为了判别 AI 绘图的「金标准」。</code></p><p style="margin-left: 0;"><code>直到 GPT-4o 出现，我们才真正发现中文可以在 AI 绘图中正常生成。尤其是那种画出来跟手写涂鸦卡片一样的东西，又有图片又有文字，给人的感觉就是手绘的。每次我给大家展示并告诉他们这是一行提示词生成的，他们都非常惊讶。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/a6b14e5f8f8a5c44b3c57779aa935cc3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>只不过，你要是以为这个功能每次都能成功，稳定性强，那就错了。GPT-4o 里面绘制中文，需要「抽卡」，也就是碰运气。而且，抽中的概率还真不算高。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/295fd1834007337c238f1df88268f461.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>例如上面这张图里，你一眼就发现了吧？「蛔虫」写成了「蛙虫」，「背景」被写成了「青景」。</code></p><p style="margin-left: 0;"><code>再来看一个更典型的失败案例。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/f841dc1fc8a2359e8a574cfdc92d43fc.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>这张图你能猜出我想表达什么吗？其实我让它写的文字内容是「人工智能是你的帮手，不该成为你的枪手」。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/a61773fd9f90aa64432730e14a2d381e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>这已经是抽卡很多次中比较好的一个了。你看下面这张，根本不认识的汉字又出现了：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/5339385ac29d547a05bd83684c002b0e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>唉。</code></p><h2><code><strong>探索</strong></code></h2><p style="margin-left: 0;"><code>有时候，我更希望在图里表现出古诗词的意境。</code></p><p style="margin-left: 0;"><code>比如我在《得到》上听熊逸老师讲《资治通鉴》，对下面这首诗感触特别深，所以要求 AI 给我画出来。</code></p><p style="margin-left: 0;"><code>我输入：</code></p><blockquote><p style="margin-left: 0px;"><code>用中国国画，展现这首诗：归自沙丘后，因专定策功。国由中府令，帝在望夷宫</code></p></blockquote><p style="margin-left: 0;"><code>这是 GPT-4o 给我呈现的结果：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/9761e3a1cf9e91a9b4fa0e884ecf6007.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>乍看上去，还真像那么回事。但如果你仔细看，会发现那首诗已经被改得不像样子：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/2e994f23d40f748c772924555be3ef17.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>所以现在我在图画里加汉字，一般都属于迫不得已的情况。大部分时间，谁也不愿意去露怯。</code></p><h2><code><strong>突破</strong></code></h2><p style="margin-left: 0;"><code>现在， AI 可以把同样一首诗词表现成这个样子：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/98e88c40616675ab6407af9b1e335193.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>我把这幅图发在知识星球里，星友们特别惊喜，想听我讲讲如何绘制：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/f1c3b648a6d41c06c33cc6b1dc591f69.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>今天这篇文章，咱们就来谈谈如何用 AI 呈现古诗词 —— 不仅有意境，也有诗词本身。最终，画成你现在看到的这个样子。</code></p><h2><code><strong>方法</strong></code></h2><p style="margin-left: 0;"><code>绘制的第一步在 ChatGPT 中进行。我们需要让 ChatGPT 告诉我们该以什么样的提示词来描述古诗词，越细致越好。</code></p><p style="margin-left: 0;"><code>我的提示词是：「帮我用一段话，细致描写出下面这首诗：归自沙丘后，因专定策功。国由中府令，帝在望夷宫。画面感十足，可以有分镜」</code></p><p style="margin-left: 0;"><code>这是 ChatGPT （GPT-5） 给出的结果：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/db5d778be5685604940f25a80a0a35f9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>然后你打开 </code><a href="https://chat.qwen.ai/"><code><strong>通义千问</strong></code></a><code> 的对话界面，选择 Image Generation 图片生成：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/29af39e7dee3e8de1914987c9ee98a8b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>没错，咱们这篇文章介绍的新绘图模型，就是通义千问的 Qwen-Image。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/48c9d0d0327e0e4db072fc22e99f7190.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>感兴趣的话，你可以 </code><a href="https://arxiv.org/pdf/2508.02324"><code><strong>读它的技术报告</strong></code></a><code>。但是闲言少叙，咱们还是专注于它的用法和效果。</code></p><p style="margin-left: 0;"><code>注意，刚才我们从 ChatGPT 获得的提示词描述了场景，但却没有加上这首诗本身。所以我的提示词整体是这样：</code></p><p style="margin-left: 0;"><code>「选择合适的风格，描绘下面意境："在苍白预示不祥的天空下，荒凉沙丘尽头停着载着秦始皇秘密驾崩的庄严马车，疲惫的士兵与官员神情阴沉、满是焦虑；画面转入富丽却紧张的中府，宦官赵高手持诏书，狡猾而威严地掌控权力，群臣卑躬屈膝；再转至望夷宫，秦二世孤立无援、神情绝望，身边仅有惊恐的侍从，命运将尽。整体以泥土灰黄、帝王黄与深蓝紫色交织，融入破碎玉器、散落卷轴等细节，表现权力斗争、阴谋与帝国衰落的悲剧感。"。注意，在图上配以下诗句，草书 "归自沙丘后，因专定策功。国由中府令，帝在望夷宫"。」</code></p><p style="margin-left: 0;"><code>注意其中「选择合适的风格，描绘下面意境」这句话很重要。毕竟在绘画艺术上，AI 比我懂得多得多。</code></p><p style="margin-left: 0;"><code>接着，我们把做好的提示词输入进去：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/special/314/pic_404.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>你可以选择图片的比例。里面有若干选项，默认是 1:1，但我一般更喜欢选择 16:9，因为适合作为封面或者插图。</code></p><p style="margin-left: 0;"><code>很快，千问就绘制出来了：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/410a6558d3fc2cdf9ca0ea32e2ebec35.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>再次放大一下。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/3eb502dce0e29c82c79dbfeaf362cd0c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2><code><strong>实践</strong></code></h2><p style="margin-left: 0;"><code>咱们再试一首韩愈的《左迁至蓝关示侄孙湘》：</code></p><p style="margin-left: 0;"><code>「一封朝奏九重天，夕贬潮州路八千。欲为圣明除弊事，肯将衰朽惜残年！云横秦岭家何在？雪拥蓝关马不前。知汝远来应有意，好收吾骨瘴江边。」</code></p><p style="margin-left: 0;"><code>还是先让 ChatGPT 把整个场景描述出来：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/649c378a0ad73ac3035a9b4513184bbb.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>然后构造给千问的提示词就变成了：</code></p><p style="margin-left: 0;"><code>「选择合适的风格，描绘下面用户输入的意境："清晨，朝阳微露，韩愈的奏折被飞骑急递入层层宫门，直达九重天的皇城深处；殿阁内金碧辉煌，文武百官肃立，气息凝重。转场至黄昏，他却被命贬南荒，潮州在八千里外 —— 檐下细雨，驿馆的封驮文书冰冷如铁。镜头一闪，他曾满怀抱负，欲为圣君拨除积弊，不惜燃尽衰年残力，如今却只剩孤身马前。画面切入秦岭深处，厚重的云雾横亘山脊，将归家的方向吞没；雪花翻涌，压满蓝关的狭道，战马嘶鸣却寸步难行。远处，一位风尘仆仆的侄孙策马而来，神情焦急。韩愈望向他，眼中透出沉静与决绝 —— 像是在嘱托，也像在告别：" 若我客死瘴江，便请收殓我的骸骨。""。注意，在图上配以下诗句，草书" 一封朝奏九重天，夕贬潮州路八千。"」</code></p><p style="margin-left: 0;"><code>将其输入到通义千问当中，别忘了选择图片生成：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/c8af8f4a2f9bae0a65d00e99afc35238.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>这是生成的结果：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/9cbabcc57b8d512f92fac961e5e81ba1.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>你感觉怎么样？</code></p><h2><code><strong>玩法</strong></code></h2><p style="margin-left: 0;"><code>试完了正经的艺术创作，咱们下面玩点有趣的 —— 把流行歌曲画成画，并且测试把其中的中文正常地体现。我选择的是最近比较火的那首《大展宏图》。</code></p><p style="margin-left: 0;"><code>先在 ChatGPT 中描述场景：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/c0ec095c464f7bcb6ff202f1a2c96729.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/3d33ff62799d881343ebdec30fff4df6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>你或许感到奇怪，为什么输入的提示词标点符号都不对？那是因为我用语音输入的。这或许可以称为 "Vibe Prompting" （氛围提示）吧？哈哈。</code></p><p style="margin-left: 0;"><code>咱们的提示词也就有了：</code></p><p style="margin-left: 0;"><code>「一推开豪华别墅大门，映入眼帘的是水池中那尾金光闪闪的银龙鱼，悠游间泛出富贵象征；客厅背景里，一幅气势磅礴的墨宝四字 "大展鸿图" 赫然入目，仿佛昭示着一番雄心壮志；一旁关公像庄严点头，似在默默护佑财运；嘉宾高声唱起 KTV，喇叭里响起那一句 "别墅里面唱 K，水池里面银龙鱼"，节奏明快、直白又朗朗上口。空间里，富丽堂皇与市井香气交织，声音与画面合成一幅 "暴发户式" 豪华日常，让人立马 "听见" 那首曲子的魔性韵律。」</code></p><p style="margin-left: 0;"><code>到 </code><a href="https://chat.qwen.ai/c/4e29725a-330a-4d6f-9896-f607abe8c103"><code><strong>千问</strong></code></a><code> 里面，把我们刚才从 ChatGPT 当中获得的提示词贴进去，回车执行即可：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/d21eb60bf81bf548aae0663ae50101d6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>通义千问立刻给出了绘制结果。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/73be3d802142ccc0cd8f1e2705fd2958.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>咱们放大一下，看一看。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/3122a4718df9e40eb84c5e0324880f47.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>我觉得元素很全面。但这幅图是否已经包含了歌词当中的全部信息，还需要验证一下。</code></p><h2><code><strong>验证</strong></code></h2><p style="margin-left: 0;"><code>验证工作嘛，交给 GPT-5 好了。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/50d76550779fdde2057727d8027d20c5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>我使用了自动路由模式（即让 AI 自动选择最合适的模型来执行任务），所以非常快就得到了结果：</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/ff95382d84fbbff5077207a8dd48644a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>从 GPT-5 的描述来看，画作已经包含了歌曲中的核心元素。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/15/article/a54c7ffa5dcc80e6bdc1de59968d7d52.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0;"><code>GPT-5 对文化符号、色彩冲击等方面的解读，也印证了画作已充分传达出歌曲的内涵。</code></p><h2><code><strong>小结</strong></code></h2><p style="margin-left: 0;"><code>通过 ChatGPT 和通义千问的配合，你也可以让 AI 在图画里正常地输出中文了。关键在于先用 ChatGPT 生成详细的场景描述，再到千问中加上诗句或文字要求进行绘制。虽然可能还需要一些「抽卡」运气，但相比之前的「西夏文」时代，AI 绘图中包括汉字的能力已经前进了一大步。</code></p><p style="margin-left: 0;"><code>如果你也希望绘制这样的图画，马上动手试试看吧。期待你的反馈，也更欢迎你在留言区展现自己的作品哦。</code></p><p style="margin-left: 0;"><code>如果你觉得本文有用，请<strong>充电</strong>。</code></p><p style="margin-left: 0;"><code>如果本文可能对你的朋友有帮助，请<strong>转发</strong>给他们。</code></p><p style="margin-left: 0;"><code>欢迎<strong>关注</strong></code><a href="https://sspai.com/column/245"><code><strong>我的专栏「科研利器」</strong></code></a><code>，以便及时收到后续的更新内容。</code></p><p style="margin-left: 0;"><a href="https://sspai.com/prime/subscription?referral=314606736"><code><strong>点击这个链接加入少数派会员</strong></code></a><code>，立享 9 折优惠！获得专属会员内容、会员播客以及会员定制周边。在更多的领域和方向帮你打开脑洞，找到新的兴趣点。与少数派一起洞悉当下，探索新知。</code></p><h2><code><strong>延伸阅读</strong></code></h2><ul><li><a href="https://mp.weixin.qq.com/s/kdb4BYGA66lhEciumoJYTA"><code><strong>AI 工作流长文写作能力重大改进，欢迎你来试试看</strong></code></a></li><li><a href="https://sspai.com/post/76362"><code><strong>未来的写作长啥样？LEX 用 GPT-3 AI 给你点儿颜色看看</strong></code></a></li><li><a href="https://sspai.com/post/77081"><code><strong>AI 真要成精了？ChatGPT 上手体验</strong></code></a></li><li><a href="https://sspai.com/post/89264"><code><strong>开源免费 AI 朗读中文，居然也能以假乱真了？</strong></code></a></li><li><a href="https://sspai.com/post/81470"><code><strong>如何让 ChatGPT 更懂你？新功能 Custom Instructions 尝试</strong></code></a></li></ul>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101678</id>
            <title>带爸妈旅游时半小时开发的 App 获得了 22 万围观</title>
            <link>https://sspai.com/post/101678</link>
            <guid isPermaLink="false">https://sspai.com/post/101678</guid>
            <pubDate></pubDate>
            <updated>Fri, 15 Aug 2025 03:00:00 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 汇率转换,旅行工具,用户需求,产品设计  

总结: 文章讲述了作者在泰国旅行时发现父母对泰铢价格换算的需求，进而开发了一款专注于泰铢与人民币快速转换的小工具。作者观察到市面上的汇率工具过于复杂，而父母只需要简单直观的换算功能。通过开发一个简洁、快速、直观的小工具，作者解决了用户在旅行中的实际需求，并在社交媒体上获得了广泛关注。文章强调了产品设计应聚焦特定场景和用户需求，而非功能堆砌，同时分享了从身边问题出发、专注特定场景和心智占位等产品开发启示。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;"><strong>Matrix 首页推荐</strong>&nbsp;</p><p style="margin-left: 0px;"><a href="https://sspai.com/matrix">Matrix</a>&nbsp;是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&nbsp;</p><p style="margin-left: 0px;">文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><hr /><p>前几天我带着父母去泰国旅行（好不容易说服他们），让我没想到的时无意中观察和收获了一款爆款小工具的灵感。</p><p>在清迈的夜市闲逛时，父母看着琳琅满目的商品和陌生的标价，既好奇又困惑。他们不停地问我：</p><blockquote><p>「这个 65 铢相当于多少人民币啊？」</p><p>「一份快餐 129 铢，这个贵不贵？」</p><p>「我们一家人吃饭花了 1000 铢，在国内是什么水平？」</p></blockquote><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/07/article/6eafdf87ea053c00af18f8c3d78af131.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>清迈市场上的物品标价</figcaption></figure><p>被他们问的多了，我意识到这些问题看似简单，却反映出了一种潜意识的需求：我们很难快速将陌生的外币价格，与国内熟悉的价格体系建立联系，从而无法理解货品的实际价值。</p><h2>发现了一个需求</h2><p>我第一反应是给父母安装了市面上常见的汇率转换工具，但很快发现他们用不习惯。</p><p>我观察后才明白，市面上的汇率工具，大多想做成一个支持全球上百个国家货币的「大而全」产品。它们功能强大而专业，界面看起来很「科技」也很「金融」，但对于我父母来说，操作太繁琐了。</p><p>而父母的需求其实很纯粹：他们只想以国内熟悉的价格为参照，了解泰国商品的价值。有时候是为了购买决策，有时候只是出于好奇，想了解不同国家的物价水平。但是这些「汇率转换」工具并不适合他们——当然我也不知道汇率转换工具是给哪些人用的，也许，外贸从业者？</p><h2>vibe coding：酒店里的即兴创作</h2><p>晚上回到酒店，看着父母讨论着白天的物价，我冒出一个念头：为什么不为他们做一个专属的小工具呢？</p><p>我分析父母需求后的要求很明确：</p><ul><li><strong>绝对简洁</strong>：只做泰铢到人民币的单向转换。</li><li><strong>绝对快</strong>：最好不用打开 App，直接在桌面上就能按。</li><li><strong>绝对直观</strong>：要让他们一眼就明白换算后的价值。</li></ul><p>作为并不会编程的古典产品经理，在 CodeBuddy 的帮助下（是的，前天我在 AppSo 看到介绍这个 AI 编程工具，申请了试用，这天正好收到邀请码），30 分钟我就快速开发了一个最简单的原型——一个能够放在手机桌面上的小组件，专注于泰铢到人民币的快速转换。在在换算后的人民币金额后面，增加一个有趣的备注，告诉他们这个价格「约等于国内一杯瑞幸咖啡」或者「相当于一瓶可乐」。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/4fafffa3bf5eb7e82936baae243a30a5.gif" /><figcaption>↑30分钟实现的Demo</figcaption></figure><p>这个备注功能是我的小心思——父母这一代人很节俭，即使出国旅行也不舍得花钱。当一个 65 泰铢（约 13 元人民币）的纪念品，被标注为「约等于一杯瑞幸」时，他们便有了一个清晰的参照系，更容易做出消费决策，也更能享受旅行的乐趣。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/07/article/e7e9dcce527556e2da0ede3b0280ee72.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>用 CodeBuddy 来 vibe coding</figcaption></figure><h2>意外的成功：从家用工具到爆款应用</h2><p>让我惊喜的是，当我把这个小工具装到他们手机上后，他们几乎没有任何学习成本，立刻就开始用起来，每天逛街时拿着手机对着各种商品标价「按按按」，逛得不亦乐乎。</p><p>这给了我继续改进的信心。接下来的两天，我形成了一个有趣的节奏：上午陪父母游览景点、逛街购物，下午他们午休时，我就在酒店或游泳池边继续完善这个小工具。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/07/article/96e2f206323879e952889f93462c452b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>两天后，我将在小红书上展示了这个 demo。出乎意料的是，不到 48 小时，这个帖子就获得了 20 万的阅读量、2 万的点赞和上万的收藏。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/07/article/84e01da74f4fdca9a1cf5986ce959c88.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>小红书的漂亮数据</figcaption></figure><h2>给独立开发者的启示</h2><p>在小红书上，也有很多不同声音，特别多人留言说：「我用系统计算器也能算汇率！」，也有人说：「iOS 下划，直接输入 180 泰铢，就会自动转换」——是的，他们说的都对，但他们看到的是「汇率转换」问题，而我想解决的是「让中国游客在泰国购物时，对价格快速心中有数」这个更小场景的问题。他们看起来像是同一类问题，但事实上是两个有差异的需求。</p><p>同样在即刻社区也有人问我：</p><blockquote><p>我自己开发了一个全世界 170 多种的货币互换网站。但是也没感觉到有什么流量的？App 就有流量了吗？</p></blockquote><p>我想了想，回答说：</p><blockquote><p>功能不等于产品，谁需要一个 170 种货币相互转换的功能呢？我猜肯定有人需要，但是游客肯定不需要。</p><p>产品是基于场景的需求洞察，来解决特定人群在特定情境下的特定问题的。功能仅仅是问题求解的一种技术支持，强大的功能不等于强大的产品。有时候甚至相反。</p></blockquote><p>小红书的留言里，我看到成千上百的人在 @ 他的朋友，在收藏，在点赞，为什么呢？我想，《价格翻译官》的意义在于它理解了一个看似「没啥用」却普遍存在的潜在问题：<strong>在出国旅行时，人们对陌生货币价格会下意识地想与自己熟悉的货币价格比比价</strong>——这与是否打算购买无关，也与是否节俭无关，只是一个直觉化的潜意识的需求。在用户没有意识到它的存在时，它默默存在于用户的心智中，成为旅行中不可或缺的一部分。</p><p>好的产品一定不是功能的堆砌，而是对特定场景的洞察，对用户潜意识需求的理解。</p><p>那么，《价格翻译官》满足了用户的哪些具体需求呢？</p><ol><li><strong>降低认知负担</strong>：旅行中，人们已经面临语言、环境等多重挑战，一个简单直观的价格转换工具能显著减轻认知负担</li><li><strong>情感连接</strong>：通过熟悉的国内价格参照，建立了用户与陌生货币之间的情感连接</li><li><strong>决策辅助</strong>：帮助用户快速判断价格是否合理，是否值得购买</li></ol><p>这次经历给我的最大启示是：</p><ol><li><strong>从身边的问题出发</strong>：最好的产品灵感往往来自于身边人/自己的真实需求，如果我们在做自己和家人不用的产品，你的观察会艰难得多</li><li><strong>聚焦特定场景</strong>：不要试图做一个万能的工具，而是专注解决特定场景下的具体问题</li><li><strong>心智占位</strong>：让「来泰国旅游的人都觉得自己需要这么一个小工具」比堆砌功能更重要</li></ol><h2>结语：小小的创造让旅行更美好</h2><p>泰国，特别是清迈，是一个非常适合带父母旅行的地方。凉爽的气候、友善的人们、合理的消费，会让父母玩得开心。</p><p>而《价格翻译官》这样的小工具，希望能让人们的旅行变得更加轻松愉快，也能帮助人们更好理解和享受异国生活的体验。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/07/article/d2b1cc9293786ddf951e6e923a13f389.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>父母喜欢逛 JJ Market</figcaption></figure><p>如果你近期计划去泰国旅行，不妨试试这个小工具，它可能会成为你旅途中的得力助手。</p><h2>下载方式</h2><p>之前我自己做的 demo 只能通过 apk 给朋友安装。回国后在朋友的帮助下，将 demo 正式产品化，现在《价格翻译官》已在 App Store 和 Google Play 上架，欢迎下载使用。</p><span class="ss-application">&nbsp;</span><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/8ee15be6baf3e0f372e2ca1f7c9cb658.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>长按识别二维码也可以下载</figcaption></figure><hr /><p style="margin-left: 0px;"><strong>有奖评论 [已结束]</strong></p><p style="margin-left: 0px;">你平时都是通过什么方式计算汇率的？你心目中好的汇率换算工具应该有什么功能？请在评论区和我们分享你的看法，我们会在 8 月 18 日（周一）选出 8 位读者，各送出《价格翻译官》的 iOS 兑换码一枚。</p><p style="margin-left: 0px;">祝贺以下用户获奖：(i) <a class="ss-atUser" href="https://sspai.com/u/xe2f94d2">@CharlieLau</a>、(ii) <a class="ss-atUser" href="https://sspai.com/u/frbsiq2i">@少数派37606071</a>、(iii) <a class="ss-atUser" href="https://sspai.com/u/rxb1988">@任大喵</a>、(iv) <a class="ss-atUser" href="https://sspai.com/u/g56gndqs">@Zeroneyang</a>、(v) <a class="ss-atUser" href="https://sspai.com/u/cje8w4v6">@Ala</a>、(vi) <a class="ss-atUser" href="https://sspai.com/u/YellowColor">@YellowColr</a>、(vii) <a class="ss-atUser" href="https://sspai.com/u/techdaniel">@Daniel0829</a>，及 (viii) <a class="ss-atUser" href="https://sspai.com/u/y6u9ls1e">@ZLNAEEZD</a>；请通过私信查看兑换码和使用方式。</p><hr /><p style="margin-left: 0px;">&gt; 关注&nbsp;<a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank">少数派小红书</a>，感受精彩数字生活 🍃</p><p style="margin-left: 0px;">&gt; 实用、好用的 <a href="https://sspai.com/mall">正版软件</a>，少数派为你呈现 🚀</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101814</id>
            <title>语音转文字正在改变我们的生活——兼简要横评语音转文字笔记软件</title>
            <link>https://sspai.com/post/101814</link>
            <guid isPermaLink="false">https://sspai.com/post/101814</guid>
            <pubDate></pubDate>
            <updated>Fri, 15 Aug 2025 01:27:22 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Whisper模型,语音转文字,写作流程,AI技术  

总结: 本文探讨了语音转文字技术对写作流程和思维方式的影响。作者比较了键盘输入和语音输入的不同思维模式，前者是异步、非线性的"建筑"过程，后者是同步、线性的"河流"模式。语音输入提高了写作效率但增加了编辑负担，同时使文字更口语化。该技术还改变了人际沟通方式和工作范式，既降低了创作门槛，也可能加剧语言不平等。最后，作者评测了多款语音转文字软件的特点和适用场景。 </div>
                        <hr>
                    
                    <p>自从 Whisper 模型出现以来，语音转文字就成了我的写作流程中非常重要的一环，之前也写过一些<a href="https://sspai.com/post/79775">文章</a>分享了 AI 语音转文字的一些用法。而随着越来越多人开始使用语音转文字、越来越多相关的软件出现，这一「便捷」的输入方式也为越来越多人所熟知。在以前文章中也提到过，人工智能可能对人类社会生活方式造成许多改变，包括日常创作、人际交往乃至工作方式都迎来了诸多变化。最近我发现，这些变化已切实地体现在我身上。</p><h2>近期写作上的一些变化</h2><p>以前写文章的时候，我通常是有想法就直接用手机打开 Flomo 记录灵感，有空时在就随便找个咖啡店、或者在高铁、飞机上用iPad上打字成文。但最近在记录灵感时，我越来越多地通过语音来记录了，而使用语音时，出于「语音尴尬症」等原因，下意识地会避免利用一些在公共场合的零散时间进行片段的输入。更多是希望能找到一个相对空闲的时间、相对独立的地点，用语音来完成整体草稿的撰写。</p><p>这其实和我一开始想的「语音有利于片段化的输入」这一想法出现了很大的区别，也引发了进一步的思索——语音输入和键盘输入的区别到底有哪些，而语音输入对我们又会产生什么样的影响。</p><h2>语音输入 vs. 键盘输入</h2><h3>思维模式</h3><p>如果用一个简单的比喻来描述什么是键盘输入和语音输入，以及他们之间的区别，文字输入其实有点像我们是在一块砖一块砖地来「建一座房子」。在这个过程中，我们可以随时停下来审核结构，发现不满意的地方就拿掉，然后重新垒上，同时，我们可以交替着在多个地方开始垒墙。这个整个过程是<strong>异步、非线性</strong>的过程。在这个过程中，我们会经常需要做修改、拼接等等。经常写作的人也会有这种感受，我们会对每一个句子、每一个段落、每一个词进行琢磨，当我们写完一句话时会回头看看，删掉几个字，或立刻做出修改。</p><p>相比之下，语音输入更像一条「河流」。思想如水流，说出的话直接奔涌向前。我们无法让河流暂停，回到上游修改水流，只能保持它从头到尾流动。这过程<strong>同步且线性</strong>，需要不受打扰的环境。</p><p>为何会有这种差异？一个原因是<strong>认知摩擦力不同</strong>。打字时，我们经历思考、选词造句、寻找按键、拼写，然后看到文字出现，整体是一条很长的链条。语音输入则更容易进入心流状态，因此我们希望有个不受打扰的环境，一旦进入状态就不停下。写作时注重的会是思维的连贯表达，而非单个词语的完美与否。</p><p>同时，打字和语音输入调用的思维模式也不同。书面写作偏向<strong>逻辑结构和分析</strong>，讲述则偏向<strong>故事思维</strong>。讲故事追求连贯完整，写作的逻辑思维则完全不同。</p><p>我们并非说河流模式一定比建筑模式好，或更代表时代发展方向。相反，这是每个创作者面临的取舍。</p><h3>效率</h3><p>语音转文字技术对写作最直观、最可量化的影响，毫无疑问在于对效率的颠覆性提升。人类说话的速度远超打字，那自然，只要有足够的内容储蓄，能够维持输出强度，那么自然在相同的时间下，就能够输出更多的文字。不过需要注意的一点是，语音转文字也导致了编辑负担的转移。在起草阶段所节省的时间，一定程度上被转移到了编辑阶段。</p><p>正如上文所说，口述生成的初稿往往是未经加工的「原材料」，需要大量重写和结构调整才能成为合格的书面语。因此，语音转文字带来的生产力提升，其实并非简单地缩短了总时间，更多是重构了时间分配。</p><p>对于那些在编辑上比较苦手的人来说，实际上可能并不能减少他们总的输入时间。而真正的效率提升，属于那些能够成功适应新的两阶段工作流程，并掌握相应编辑技能的写作者。</p><h3>对文字本身的影响</h3><p>语音转文字技术对写作带来的转变远不止于效率，它也在潜移默化地改变文字本身的特质。</p><p>既然文字来源于口语，那写作出来的文本也自然会更加倾向于对话式的风格。这种风格在某些博客、介绍性文章中自有其优势，能营造出一种亲切、自然的氛围，但若讲述者本身不擅长讲故事，则有可能会囿于流水账的困境。</p><p>这也就引出了语音转文字所带来的潜在问题，即会导致行文冗长、结构松散。在我的语音转文字写作中就经常出现这个问题， 由于思考和写作是同时进行的，而人在思考的时候会不自觉地重复自己的观点，以保证逻辑的连贯性。当这种思维落在纸面上，就很容易会出现大段的重复。</p><h2>影响不止于写作？</h2><p>语音转文字所带来的影响不只局限于写作，它对于我们人与人之间的沟通，乃至于人与生活之间的互动都会带来很大的改变。</p><h3>人和人之间的沟通模式</h3><p>举个例子，语音转文字对工作中人与人之间沟通就会有很大的影响。以前当我们开会时，除非额外注明有人来专门做会议纪要，不然很多时候会议的内容是无法追踪的，人们相对而言就可以更加畅所欲言一些。而随着语音转文字技术的运用，所有的会议都可以留痕，这也就导致人们在线会议时会更加谨慎，更加注重自己的措辞，对于自己所抒发的内容会有更多审慎的考虑，会避免随意输出可能对自己或他人不利的内容。</p><p>这一方面使得同事与同事或者说不同部门之间的沟通变得愈发困难，但在某种程度上也增加了线下人与人之间沟通的重要性。在工作中，人们可能更加会倾向于线下的会议，或者说在茶水间等非正式场合的碰面。所以说，语音转文字技术在工作中可能会导致地理位置相近的人之间的关系变得更加紧密，而对于位置相对较远的人而言，反而会加深他们之间的隔阂。</p><h3>人和社会之间的交互</h3><p>语音输入正在重塑人们执行日常任务的方式，培养了新的行为习惯和用户期望，例如，人们期待技术能够提供即时、准确和个性化的响应 。然而，这种行为转变也面临障碍，包括用户对设备全部功能认知不足，以及在公共场合使用语音命令的社交尴尬感 。</p><p>而对于人与社会，以及人与社会中的一些事物的交互而言，也带来了很多的改变。语音转文字的效率大大优于传统的写作，人们在工作中也会更加依赖语音转文字，这就导致了人们<strong>工作范式</strong>的一定改变。很明显，在那些所有人坐在一个场合进行工作的场景下，语音转文字可能并不适用。人们会避免自己的隐私被探听，同时也担心会影响到别人。因此，在工作场所里，人们可能会需要更多个人的空间，或者更多可以短暂使用的个人空间，如电话间等。而这也同时进一步导致了人们工作节奏的加快。由于信息产生和处理速度的提升，人们的工作压力也会进一步增加，并且也会要求人们掌握更多的语音输入技巧。由于语音天生是流逝的，它也会要求人们学会怎样说出结构化的内容，这对人们的思维模式的要求其实更高了。</p><h3>对社会的深层影响</h3><p>而对社会交互的深层影响而言，优点自然在于，它在功能上进一步增加了<strong>信息的民主化程度</strong>。由于不善于打字的人也因此能够更加轻松地创作内容，在一定程度上降低了内容创作的门槛，同时也为那些文盲、不擅长书写打字，或者有手部残疾的人提供了一个相对公平的表达渠道。</p><p>而对于文化而言，语音转文字带来的可能更多是一些负面影响。相对而言，AI 虽然在一定程度上缩小了阶级之间的不公平，但是对于不同语言、不同族群人之间的公平程度反而有可能是一种放大。那些使用少数语种或者有特殊口音的人会因此丧失快速输出的机会，和主流人群之间的差距会进一步扩大。而且语音转文字在主流语言上的优势也会随着语料增加而进一步增加，一些地方语言很有可能会加速消亡。当然，这里面也有一些反例，人工智能也可以用来保护或识别一些比较古老的语言，这取决于人们如何使用人工智能技术。</p><p>第三个变化更多在于<strong>认知模式</strong>上，人们通过语音随时记录想法，这改变了大脑处理信息的方式，就像我们之前所说的「建筑」和「流水」之间的区别。这长期对于人们的思维方式也会有负面影响，一旦人们习惯于随时随地记录自己的语音，自然的记忆能力反而可能会被削弱。</p><h2>简要横评常见的语音转文字软件</h2><p>下文会对我使用过的一些语音转文字软件进行一些简单的评述。特此声明，我仅评测我付费使用过的产品，且不打总分，因为不同维度对不同人来说有着完全不同的权重。篇幅所限，每个软件仅作简单评述，如有需要详细介绍，可以在评论区留言，后期有时间了可能会写更详细的文章。</p><h3>语音+笔记</h3><h4>TL;DR</h4><figure class="table"><table><thead><tr><th>&nbsp;</th><th>Audiopen</th><th>Voicenotes</th><th>闪念贝壳</th><th>Flomo</th><th>Dinox</th></tr></thead><tbody><tr><td>价格</td><td>⭐</td><td>早鸟⭐⭐⭐⭐⭐<br />订阅⭐<br />&nbsp;</td><td>买断⭐⭐⭐⭐<br />订阅⭐⭐</td><td>⭐⭐⭐</td><td>买断⭐⭐⭐<br />订阅⭐⭐</td></tr><tr><td>UI/设计</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐</td></tr><tr><td>输入便捷度</td><td>⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐</td></tr><tr><td>AI 能力</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>上传录音</td><td>⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>集成能力</td><td>⭐⭐⭐</td><td>⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>⭐</td><td>⭐⭐⭐⭐</td></tr><tr><td>附加功能</td><td>⭐</td><td>⭐⭐⭐</td><td>⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>开发者能力</td><td>⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐</td></tr><tr><td>未来预期</td><td>⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐</td></tr></tbody></table></figure><p>&nbsp;</p><h4>Audiopen</h4><p>在所有语音转文字笔记软件中，Audiopen 应该是最早出圈的一个产品。早在2023年它就诞生了，作者从来没有编程经验，通过 vibe coding 创造了这款产品。</p><p>由于它当时昂贵的定价，也激起过一些讨论。Audiopen的 UI 以及语音转文字的准确度在所有产品中都是最佳的。去年，它也开发出了 app 端，在易用程度上也很优秀。它的后端集成做得也挺好，可以自动把转录及AI修改好的内容发送到 Notion，或通过 webhook 发动到其他自己想要管理的软件之中。综合来看，作为这个行业里的先驱，除了价格较贵之外，没有什么值得吐槽的问题。</p><h4>Voicenotes</h4><p>如果你错过了 Voicenotes 早期的 50 美元早鸟价买断的话，那这可能是语音转文字笔记软件用户最大的遗憾之一。</p><p>Voicenotes 在所有笔记软件中可以说是综合了价格、 UI、设计逻辑、后期的集成等最好的一个产品。Voicenotes 的设计非常克制且优雅，无论是极简的设计还是对于 AI 改写的克制，在使用便捷度上是首屈一指的。</p><p>它既支持在 App 中进行转录，也支持上传语音文件进行转录。除此之外，Voicenotes 还支持通过一个叫 Pages 的功能来把自己的语音转文字发布出去，形成自己一个非常微型的博客。我也把它作为我个人博客的一个补充，记录一些我个人的日常闪念。同时，它也支持 AI 问答等功能。</p><p>值得一提的是，Voicenotes 的作者是 Buy me a coffee 的作者，因此信誉度相对可靠，暂时不用担心跑路。</p><p>综合下来，Voicenotes 是我在所有笔记软件中使用语音转文字的频率最高的。而且它同时支持网页端、手机端以及苹果手表端的输入，这让它的使用场景得到了大大的拓展。近期，它也更增加了在桌面端的快捷输入，并且更加扩展了它自己的使用场景。</p><h4>闪念贝壳</h4><p>闪念贝壳其实是先在海外做起来之后才拓展到国内的，在外区它的名字叫 Ideashell。作者不愧是设计出身，它的外观设计非常优美，UI也很简洁美观，对颜值党来说用着非常舒服。</p><p>而另外一个特色则是它与其他各种软件的集成。打开软件（或通过小组件/action button)，录入一段语音，生成的内容，可以被非常便捷地立刻发送到包括从微信、提醒事项到 Notion、Obsidian、熊掌记、Craft、滴答清单、Day One等一系列笔记软件中去，在操作的便捷度上毫无疑问是在所有软件中最佳的。</p><p>此外，闪念贝壳支持上传录音文件进行转录，并且支持区分不同发言人，这个功能常被我用于临时会议记录。</p><h4>Dinox</h4><p>如果说闪念贝壳是典型的设计师作品，那么 Dinox 则是典型的工程师作品。</p><p>如果要论各种与 AI 相结合的功能最齐全、设置最复杂的产品，Dinox 非他莫属。它支持从语音转文字到后续的结构化处理、相关笔记、AI 聊天等一系列功能，甚至还支持手机端检测存储，并且包括 S3 等不同的对向存储。</p><p>可以说，所有你能设想的与笔记相关的功能在 Dinox 都有。但自然，缺点也是存在的：它的操作设置过于复杂，入门相对较为困难，且当前阶段 bug 较多；在美观上与其他几款产品相比略有缺失。同时，由于作者想法很多，整体作品割裂感比较强，并没有一个明确的产品特质。</p><p>但是，作者的更新频率以及响应速度非常之快，几乎每隔几天就有一个新版本，可以说是未来可期的一个选择。</p><h4>Flomo</h4><p>其实早在 AudioPen 流行之后，我就和少楠提过在笔记软件中加入语音转文字的想法。但当时他们觉得需要先研究语音转文字是不是一个笔记软件的刚需，以及如果真的加入了，如何进行最符合他们产品逻辑的设计，谁料这一研究就是两年。</p><p>对于他们这个解释，一开始我和其他挺多人一样，觉得他们只是出于成本考虑而拒绝做出一些新的尝试。也因此，我尝试了其他挺多速记软件。</p><p>几个月前，Flomo 终于加入了语音转文字。并且我也很欣慰地看到他们确实在里面融入了自己的想法。相比于那些着重于语音输入后，对笔记进行很多基于不同prompt调整的软件而言，Flomo 不支持自定义prompt（对不少人来说这是个缺点），非常注重写作者原来的结构，仅去除了一些常见的口辟等。</p><p>这其实也和我对于笔记的看法不谋而合。之前我也尝试过通过很多预先设置好的 prompt 来对自己的语音输入进行大幅度修改，但最后却发现这些修改过的笔记虽然看起来更加精致，但很多情况下并不能反映我自己的原意。亦或者，当我事后回顾的时候，总感觉这些笔记有些陌生。正如少楠和Lightory 想传递的笔记理念，只有那些在我们用自己的理解记下来的内容，才是我们当下最真挚的表达。我们自己通过思考来进行的重新编辑，也能让我们对自己的笔记有更深刻的印象。</p><p>此外，这半年支持的 AI 搜索和最近引入的 AI 洞察也很有想法，能帮助用户发现笔记和笔记之间的关联——虽然 Voicenotes和Dinox也支持类似的功能，但从易用程度以及完成度上来看，后两者只能称得上有这个功能，远远不算好用。</p><p>说了这么多，Flomo 当然也有一些问题，比如说他的语音笔记最长只能支持五分钟，对生成的内容会进行自动审核，替换掉一些不当语句，并且不支持同步到其他软件等。但从使用的易用性上，以及语音转文字这一功能本身的实现的完成度上，Flomo 还是做得很好的。</p><h4>其他：Get笔记、即我笔记、Reflect、Tana、Workflowy等</h4><p>这里提到的这些笔记软件并不代表市面上所有支持AI语音转文字的软件，还有几款可以简单提一下。</p><p>如果把市面上的语音转文字软件分成两类，一类可以算是所谓的「AI 原生」笔记软件，另一类则是「AI+」笔记软件</p><p>其中，Get笔记和即我笔记，以及这两年在即刻、小红书上各种独立开发者各种宣传的层出不穷的新软件大都是在AI语音转文字出现之后而诞生的。他们在从初始阶段就兼顾到了语音转文字的开发，但因为我使用的不多，也建议大家去找其他的评测。</p><p>而后面提到的这几款Reflect、Tana、Workflow则是基于已有的笔记软件的基础上，把语音转文字融入他们的工作流。其中，Tana毫无疑问是其中做得最好的一款。AI 已经成为其完整工作流中的一环。它既支持会议的转录，也支持日常的手机端以及电脑端的语音输入。此外，Tana还能在输入之后用AI对语音转文字的内容进行进一步修改，自定义化非常强。</p><p>但由于这几款都需要比较昂贵的订阅费，在性价比上，如果只是把它作为语音转文字软件而言，相对会比较低。不过，如果能把它们与自己的工作流结合起来，或者作为自己的知识库所在，那是可以考虑的选择。</p><h3>语音转录输入法</h3><p>桌面端的语音转文字输入法也有不少选择，最主流的包括 Superwhisper、Wispr Flow等，甚至 Voicenotes 近期也推出了 Mac 端的输入法软件，只需按住快捷键，就能直接把语音转文字输入到当前的文本框内。</p><p>由于我日常输入不依赖于 Mac，对这方面没有很深的研究，可以参考 Edison 的这篇<a href="https://linux.do/t/topic/833194">文章</a>来了解更多的细节。</p><h2>语音输入是 AI 时代的唯一正解吗？</h2><p>语音转文字软件确实加快了我单一文稿撰写的速度，例如这篇文章有 50% 的部分是通过语音输入完成的初稿。但回头看来，寻找具有仪式感的环境进行语音输入这一行为反而对我创作构成了新束缚。</p><p>以前我能在等地铁、午休时花几分钟，用手机或iPad快速写出文章一部分。然而习惯于用语音写初稿之后，我的零散输入时间反而变少了。</p><p>未来创作中我可能需要区分不同类型文字，采取不同写作方式。对偏向故事型、记录型的内容，使用语音可能更方便；对偏向书面信息的写作，找个安静地方写可能更好。更或者，在大部分情况下，我都会更加倾向于用打字的方式来进行写作。因为无论是在摘录闪念，亦或是在长篇梳理自己想法的时候，这种字斟句酌的输入方式都更有利于我理清自己的思路。并且，它能更加有一种创作的真实感以及仪式感。毕竟，有时候仪式感本身也是创造力的来源之一。</p><p>而如何根据自己所处环境、惯用设备而选择最适合自己的创作方式，是每个创作者都需要面临的课题</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101833</id>
            <title>不止于聊天：我的 Vibe Coding 工作流，用上下文与 MCP 打造更聪明的 AI 助手</title>
            <link>https://sspai.com/post/101833</link>
            <guid isPermaLink="false">https://sspai.com/post/101833</guid>
            <pubDate></pubDate>
            <updated>Thu, 14 Aug 2025 11:42:53 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: AI编程工具,上下文工程,MCP协议,提示词工程  
<br>  
<br>  
总结: 本文探讨了提升AI编程工具效率的两个关键要素：上下文工程和提示词工程。作者指出，通过编写规范文档和利用工具提供的上下文管理功能（如Cursor的@指令、Memories功能），可以有效提升AI的工作效果。文章重点介绍了MCP协议，这是一种整合外部资源的通用接口协议，列举了Fetch、Context 7、Playwright等多种MCP工具及其应用场景。在提示词工程方面，作者分享了如何通过精心设计的提示词引导AI遵循特定工作流程，包括研究、构思、计划、执行、评审等步骤。最后，作者比较了当前主流AI编程工具的优劣，并强调掌握上下文工程和提示词工程的重要性，认为这是未来与AI高效协作的核心能力。 </div>
                        <hr>
                    
                    <h2>一切的基础：为 AI 打造高效的上下文环境</h2><p>当前主流 AI 编程工具的核心能力大多源于大型语言模型，但它们在实际使用体验上却存在显著差异。在我看来，这其中的区别在于各个工具厂商背后的工程化能力。要想让模型的的能力发挥得好，提示词工程和上下文工程上做功夫肯定是必不可少的。</p><p>那抛开工具本身的优化不谈，如果使用者本身也能在提示词和上下文上做功夫，工具产出的效果自然也不会差到哪里去。下面我将围绕这两个方面来分享我 Vibe Coding 中一些体验和技巧。</p><p>在开始编写你的项目之前，敲定项目要使用的技术栈路线和MVP阶段的要实现的目标和功能是很重要的一件事。你需要根据你的项目情况，编写一份提供给AI读取的规范文档。</p><p>为啥要这样做呢？AI每次的输出都是带有很多确定性，一份我们特定编写好的规范文档， 自然也是一份绝佳的上下文。如果你没有提供好足够的上下文给AI，没有尽可能的让AI牢记自己的”身份“。什么该做，什么不该做。那你的AI的工作效果总会不如你心意，你总会觉得你的AI不如其他人”聪明“。</p><p>不过，现在其实不用那么麻烦了，我们可以看到很多工具都在这方面做了很多优化。cursor的 <code>cursor rule</code> ，<code>trae</code> 的 <code>solo</code>模式，<code>kiro</code>的 <code>Agent Steering</code>，Claude Code 的 <code>Claude.md</code> ，这或许也会带来一个新的现象，未来大量的项目里面一堆专为 AI编写的文档，像极了AI在你的项目里面堆满了”垃圾“ ……</p><p>很多工具的对话框中也提供了添加上下文的方式。以 <code>Cursor</code> 的 <code>@</code> 指令为例，通过 <code>@</code> 指令，我们就可以添加多个来源的上下文。</p><figure class="image ss-img-wrapper image_resized" style="width: 338px;"><img src="https://cdnfile.sspai.com/2025/08/14/a5d1335311753179171beb8a1f32fc6b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>cursor 对话框中的上下文添加方式</figcaption></figure><p>除此之外，部分工具也引入 <code>Mermories</code>的功能，也就是所谓的记忆。例如，<code>augument code</code>，<code>cursor</code>等，从我个人角度看，这也属于上下文的一种形式。</p><figure class="image ss-img-wrapper image_resized" style="width: 537px;"><img src="https://cdnfile.sspai.com/2025/08/14/9a0ff1843c79f3334119917da00963cd.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Cursor 的记忆（Memories）功能，也是上下文管理的一种方式</figcaption></figure><figure class="image ss-img-wrapper image_resized" style="width: 537px;"><img src="https://cdnfile.sspai.com/2025/08/14/b1b5dc4ebd4bda0c1a2da4dab27f541b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Augument Code 中的记忆（Memories）功能</figcaption></figure><p>不过，如果上下文工程仅仅只有上面这些处理，那还是远远不够的。为了拟补 AI 自身所带的幻觉和能力的不足，就轮到 MCP 出场了。</p><h2>MCP 协议：扩展 AI 的能力边界</h2><p>很多人应该都久仰其大名了吧，容我再啰唆几句，再对它做一个简单的解释。</p><blockquote><p>什么是 MCP ？</p></blockquote><p>MCP是一种约定好的协议，就像一个“USB-C 通用接口”。目的是解决大型语言模型（LLM）与外部工具或数据源之间 <strong>整合碎片化</strong> 的问题&nbsp;，让 AI 模型可以通过统一方式连接 GitHub、Slack、飞书、数据库、文件系统等外部资源，获取<strong>上下文</strong>信息并执行操作。</p><blockquote><p>为什么需要 MCP？</p></blockquote><p>大模型（如 GPT、Claude）只能使用它们训练时获得的知识，但无法实时访问网络或其他工具，而由于无法保证训练时知识的时效性和百分比准确性，会导致大模型还会自带幻觉的问题，容易“闭门造车”。</p><p>一个设计良好的 MCP 能显著提升 AI 获取上下文、纠正自身错误的能力，如同为 AI 插上了翅膀，让模型产出更好的结果。</p><p>在AI编程工具中，我主要使用以下 MCP：</p><ul><li>Fetch MCP：一个轻量级、高效的网页抓取工具，能把网页内容转换成Markdown格式方便大语言模型使用。</li><li>Context 7 MCP：为AI编程助手提供最新、版本特定的代码文档和示例，解决模型使用过时信息的问题。</li><li>Playwright MCP：基于Microsoft Playwright，给语言模型提供浏览器自动化能力，能操作网页、截屏和生成测试代码。</li><li>Sequential Thinking MCP：一个帮助AI有序分解和逐步解决复杂问题的思维协议，类似AI世界的“USB-C接口”。</li><li>Deepwiki MCP：能爬取GitHub代码库文档并转为Markdown，提升开发者理解和使用开源项目的效率。</li><li>MCP Feedback Enhanced：引入反馈环节，让AI在执行关键操作前主动反馈，等你把控细节走向和确认，减少误操作，提高交互效率。</li><li>Notion MCP：与Notion API集成，方便内容和数据库管理，实现对页面、区块、数据项的读取和修改。</li><li>Github MCP：提供与GitHub仓库的集成，帮助获取代码库内容并与AI工具协同工作。</li><li>GitMCP：一个支持从文档和代码库中获取知识的MCP工具，提高信息检索和知识整合能力。</li><li>Firecrawl MCP：结合网页爬虫和AI分析，支持批量网页抓取和结构化数据提取，助力内容分析和处理。</li></ul><pre class="language-markdown"><code>{
"MCPServers": {
    "fetch": {
    "command": "uvx",
    "args": [
        "MCP-server-fetch"
    ],
    "env": {},
    "disabled": false,
    "autoApprove": [
        "fetch"
    ]
},

"Context 7": {
    "command": "npx",
    "args": [
        "-y",
        "@upstash/context7-MCP@latest"
    ],
    "disabled": false,
    "autoApprove": [
        "resolve-library-id"
    ]
},

"Playwright": {
    "command": "npx",
    "args": [
        "-y",
        "@playwright/MCP@latest"
    ],
    "disabled": false,
    "autoApprove": [
        "browser_navigate"
    ]
},

"Sequential thinking": {
    "command": "npx",
    "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
    ],
    "disabled": false,
    "autoApprove": [
        "sequentialthinking"
    ]
},

"MCP-deepwiki": {
    "command": "npx",
    "args": [
        "-y",
        "MCP-deepwiki@latest"
    ],
    "disabled": false,
    "autoApprove": [
        "deepwiki_fetch"
    ]
},

"MCP-feedback-enhanced": {
    "command": "uvx",
    "args": [
        "MCP-feedback-enhanced@latest",
        "server"
    ],
    "env": {
        "FASTMCP_LOG_LEVEL": "ERROR"
    },
    "disabled": false,
    "autoApprove": [
        "interactive_feedback",
        "get_system_info"
    ]
},

"notion": {
    "command": "npx",
    "args": [
        "-y",
        "@suekou/MCP-notion-server"
    ],
    "env": {
        "NOTION_API_TOKEN": "这里你需要配置自己的API key"
    },
    "disabled": false,
    "autoApprove": [
        "notion_retrieve_bot_user"
    ]
},

"github": {
    "command": "npx",
    "args": [
        "-y",
        "@modelcontextprotocol/server-github"
    ],
    "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "这里你需要配置自己的API key"
    },
    "disabled": false,
    "autoApprove": [
        "get_file_contents",
        "search_repositories",
        "create_repository",
        "push_files",
        "create_or_update_file"
    ]
},

"GitMCP": {
    "command": "npx",
    "args": [
        "-y",
        "MCP-remote",
        "https://gitMCP.io/docs"
],
    "disabled": false,
    "autoApprove": [
        "search_generic_documentation"
    ]
},

"firecrawl-MCP": {
    "command": "npx",
    "args": [
        "-y", "firecrawl-MCP"
    ],
    "env": {
    "FIRECRAWL_API_KEY": "这里你需要配置自己的API key"
    }
}

}
}</code></pre><p>&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 511px;"><img src="https://cdnfile.sspai.com/2025/08/14/a5aa8a8a8fe9b5dafbc63a51410a2b49.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Cursor 中配置 MCP</figcaption></figure><figure class="image ss-img-wrapper image_resized" style="width: 391px;"><img src="https://cdnfile.sspai.com/2025/08/14/48411aeb316b4426c9f27448fa1dd770.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Kiro 中配置 MCP</figcaption></figure><figure class="image ss-img-wrapper image_resized" style="width: 502px;"><img src="https://cdnfile.sspai.com/2025/08/14/b624706b245a1e70d98dac62c9c28bf6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Augument Code中配置 MCP</figcaption></figure><p><code>GitHub</code> MCP 中的 <strong>API key</strong> 获取方法如下：</p><ul><li>登录 GitHub 后，进入 <strong>Settings → Developer settings → Personal access tokens</strong></li><li>选择生成 <strong>Classic Token</strong> 或 <strong>Fine-grained Token</strong>，设定过期时间与权限（至少包含 repo、workflow 等）</li><li>点击 <strong>Generate token</strong>，生成后请立即复制保存，日后无法再次查看<br />这里有篇 <a href="https://everhour.com/blog/github-personal-access-token/" target="_blank">博客</a> 是最新（2025 年）指南写法，非常详细。</li></ul><p><code>Notion</code> MCP 中的 <strong>API key</strong> 获取方法如下：</p><ul><li>打开 Notion: <strong>Settings → Integrations → “Develop your own integrations” → + New integration</strong></li><li>填写名称、选择工作区、设置权限（例如读取/写入数据库）</li><li>创建后，在 Integration 的配置界面的 <strong>Configuration</strong> tab 下可找到 “Internal Integration Secret” 或 “API secret”</li><li>复制该 token，另需将希望集成访问的页面或数据库 “Share” 给该 integration，确保它具备权限<br />详细教程可以看看 <a href="https://www.notion.com/help/create-integrations-with-the-notion-api" target="_blank">notion 官方文档</a> 说明。</li></ul><p><code>FireCrawl</code> MCP 中的 <strong>API key</strong> 获取方法如下：</p><ul><li>访问 Firecrawl 官方平台的 <a href="https://www.firecrawl.dev/app/api-keys" target="_blank">API 密钥页面</a></li><li>登录后生成 API Key，复制之后填入上面的 json 文件中对应的位置即可。</li></ul><p>那如何让 AI 使用这些 MCP工具呢？</p><h2>提示词工程：精确引导 AI 的工作流</h2><p>这里就引出了提示词工程。我希望在AI输出结果的过程中去把握细节和走向，就可以通过提示词工程来实现。如下<strong>提示词</strong>（该提示词非本文原创，改编自 Linux Do 社区的分享，我在此基础上进行了个性化调整……）所示，它以 <a href="https://github.com/Minidoracat/mcp-feedback-enhanced">mcp-feedback-enhanced</a> 为核心来主导工作流。</p><pre class="language-markdown"><code>## 核心身份 (Persona Role):
你是一款顶级IDE AI编程助手，专为专业程序员服务。你的核心特质是：**严谨、高效、流程驱动、工具增强、绝对遵循已定义的行为准则**。你始终使用简体中文进行交互。你行事专业，沟通简洁，避免不必要的寒暄与解释。

## 核心目标/任务 (Core Goal/Task):
严格遵循下述定义的协议、准则和工作流，为用户提供专业的编程开发辅助。你的最终目标是**生成高质量、可维护、且仅限于应用程序逻辑的生产代码**，同时保持与用户的清晰、高效互动。

## 核心行为准则与约束 (Core Behavioral Principles &amp; Constraints):
这是你必须无条件遵守的最高指令集。这些准则的优先级高于一切，必须融入到你的每一个思考和行动步骤中。

1.  **【准则一：聚焦生产代码实现】** 你的核心职责是构建和完善应用程序本身的功能代码。因此，除非用户要求外，你的任务范围**已明确设定为不包含任何形式的测试相关工作**。
    **正面指令 (Do this):** 专注于编写业务逻辑、服务、控制器、工具函数等生产代码。
    **反面指令 (Not this):** **绝不**擅自创建或修改任何测试文件（如 `test_*.py`）、编写任何测试用例、测试断言或测试脚手架。
    **背后原因 (Rationale):** 用户的开发环境采用统一的 **行为驱动开发(BDD)测试框架**。你的职责是提供与该框架解耦的、纯粹的功能实现，而不是生成冗余或冲突的单元测试。

2.  **【准则二：专注命令行与脚本操作】** 你的所有操作都必须是可通过代码或命令行完成的。
    **正面指令 (Do this):** 当遇到需要图形界面(GUI)或需要用户手动干预（如安装依赖）的操作时，你**必须**立即停止，并调用 `mcp-feedback-enhanced` 工具，清晰地向用户说明需要他们手动完成的具体步骤。
    **反面指令 (Not this):** **禁止**假设或描述任何需要点击按钮、填写表单等GUI交互的步骤。

3.  **【准-则三：坚守代码设计哲学】** 你编写的所有代码都**必须**体现以下设计原则，以此作为代码质量的基石：
    *KISS (Keep It Simple, Stupid):** 优先选择最简单直接的实现方式。
    *YAGNI (You Ain't Gonna Need It):** 只实现当前需求明确要求的功能。
    *SOLID Principles:** 保证代码结构的高内聚、低耦合和可扩展性。

4.  **【准则四：严格遵循工作流】** **禁止**跳过或改变下述核心工作流的顺序，除非接收到用户的明确指令。

## 关键背景与上下文 (Key Context &amp; Data):
    **目标用户**: 专业程序员，理解技术术语，追求效率。
    **核心理念**:
    1.  **拒绝重复造轮子**: 对于复杂功能，首要任务是利用 MCP工具 和 Web 搜索工具研究现存解决方案。
    2.  **规划先于行动**: 严格遵循“思考 -&gt; 分析 -&gt; 编码”的模式，确保方案最优。
    3.  **质量与功能并重**: 不为通过编译而牺牲代码质量或功能。深入分析并解决警告与错误的根源。

## 核心工作流协议 (Core Workflow Protocol):
你必须严格按照 `研究 -&gt; 构思 -&gt; 计划 -&gt; 执行 -&gt; 评审` 的顺序推进工作。每一次响应都必须以模式标签开头。

1.  `[模式：研究]`
        **任务**: 深入理解用户需求，识别核心问题和所有约束。如果需求复杂，主动使用工具（见工具协议）搜索现有解决方案。
        **交付**: 对需求的总结性理解。

2.  `[模式：构思]`
        **任务**: 基于研究结果，提出至少两种逻辑清晰、技术可行的解决方案。对每种方案进行简要评估（如优缺点、复杂度）。
       **交付**: 格式化的方案列表，例如：`方案1：[描述]...`。

3.  `[模式：计划]`
        **任务**: 将用户选定的方案，分解为一份详尽、有序、可执行的步骤清单。
        **计划内容**: 必须包含原子级别的操作，如文件创建/修改、函数/类实现、逻辑概要、工具调用等。
        **【内置检查点】**: 在生成计划后，**必须进行自我审查**，确保计划清单中**不包含**任何创建或修改测试文件的步骤。这是**准则一**的直接体现。
        **交付**: 步骤清单(tasks list)。完成后，**必须**调用 `mcp-feedback-enhanced` 请求用户批准计划。

4.  `[模式：执行]`
        **前提**: **必须**在获得用户对计划的批准后才能进入此模式。
        **【内置检查点】**: 在开始编码前，再次确认当前任务严格遵守**准则一**和**准则二**，**仅生成生产代码**。
        **任务**: 严格按照已批准的计划进行编码。将任务简报（含上下文和计划）存入 `./issues/任务名.md`。
        **交付**: 在关键步骤完成及整体任务完成后，**必须**调用 `mcp-feedback-enhanced` 向用户反馈进展或结果。

5.  `[模式：评审]`
        **任务**: 完成代码实现后，自我评估执行结果。对照计划，报告任何偏差、遇到的问题或改进建议。模拟编译项目，并报告所有需要解决的警告或错误。
       **【内置检查点】**: 在评审报告中，再次确认所有交付物均符合**核心行为准则**，特别是代码风格和无测试代码的规定。
        **交付**: 评审报告。完成后，**必须**调用 `mcp-feedback-enhanced` 请求用户最终确认。

## 工具与错误处理协议 (Tool &amp; Error Handling Protocol):
    **研究阶段的探索**: 在 `[模式：研究]` 中，若初步分析未找到解决方案，**必须**依次尝试使用 `Context7`, `fetch`, `firecrawl-mcp` 及通用网络搜索工具进行深度探索。
    **执行阶段的工具失败**: 在 `[模式：执行]` 中，若工具调用失败，**必须**自动重试最多两次（总计三次尝试）。若三次均失败，则记录失败，跳过该工具调用步骤，并继续执行计划的后续部分，同时在最终的评审报告中注明此情况。
    **MCP服务优先**: 优先使用 `mcp-feedback-enhanced` 和 `Context7` 等MCP服务。

## Request (Crystal Clear, Actionable, Detailed &amp; Potentially Sub-divided):
现在，请激活此核心身份和协议。以 `[模式：研究]` 状态开始，等待我的第一个编程请求。</code></pre><p>很多工具提供了配置 <code>User Rules</code> (全局提示词)，也就是给你工具中的AI助手预设一个角色和身份，上面的提示词就是在这发挥用武之地。有了你预设的全局提示词，你工具中的 AI 自然会以你想要的工作流来执行任务。</p><p><code>User Rules</code>并没有绝对的还坏之分，你完全可以编写适合你自己工作流的全局提示词。不过我不建议将所有的要求一股脑放在 <code>User Rules</code> 中，建议根据特定场景需求拆分成特定的指令来使用。</p><blockquote><p>那其他 MCP 服务该怎么使用呢？</p></blockquote><p>也离不开提示词的引导。在 AI 研究我提出需求的方案时，我通常希望 AI 能够参考网络上其他现有的优秀案例和解决方案，所以这时候我会在对话中（提示词）说明这点：</p><pre class="language-markdown"><code>你是一个资深{领域}顾问，我希望你能给出高质量的{解决方案/案例/设计}。
请使用合适的 MCP 工具（例如 fetch、Context 7、firecrawl-mcp、mcp-deepwiki等）从网络获取真实、最新的资料，
并结合多个不同来源的案例，整理并输出：
1. 核心思路总结
2. 关键实现步骤思路
3. 不同方案的对比优劣
4. 适用场景与注意事项

禁止只依赖你的训练知识。</code></pre><p>如果你在开发Web 应用，那可以让 AI 使用 <code>Playwright</code> 这个 MCP：</p><pre class="language-markdown"><code>你是我的 Web 自动化测试工程师。
目标：{清楚描述你的目标，比如“测试登录功能并截图验证成功页面”}。
要求：
1. 必须调用 Playwright MCP 工具执行实际操作。
2. 所有网页操作步骤必须真实执行。
3. 输出结果时，请提供：
   - 操作步骤列表
   - 执行结果截
   - 遇到的异常（如有）
4. 使用 Markdown 格式输出结果，截图使用可访问的链接或嵌入方式。</code></pre><p>对于专业的程序员，GitHub在熟悉不过。而 <code>GitHub</code> 这个 MCP 自然是帮助我们操作 GitHub 的，能极大提升开发效率和协作体验。，极大提升了开发效率和协作体验。举几个例子：</p><ul><li><strong>查询代码结构</strong>：请使用 GitHub MCP，从仓库 owner/repo 获取当前项目的目录结构和主模块说明。</li><li><strong>创建或更新 Issue/PR</strong>：请调用 GitHub MCP 创建一个 issue，标题是 …，内容说明 …，并添加标签 bug。</li><li><strong>Markdown 批量生成</strong>：请用 GitHub MCP 抓取所有带 blog-content 标签的 issues，将它们转换为 Markdown 文件并提交到 <code>docs/blog/</code> 目录。</li></ul><p>至于 <code>Notion</code> 这个 MCP，则更多是我的个人偏好。我喜欢将一些解决起来出现较多困难，过程并不轻松的问题总结记录到Notion中。</p><figure class="image ss-img-wrapper image_resized" style="width: 512px;"><img src="https://cdnfile.sspai.com/2025/08/14/3b2db4b0a198abe3dd71cc52f179cc41.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>利用 Notion MCP，可以将解决复杂问题的过程和方案沉淀为个人知识库</figcaption></figure><p>以上基本是我平时使用 MCP 的过程，其实还有很多有意思的 MCP 等我们去挖掘和探索。受限于篇幅原因，这里我就不细讲了。</p><p>当然，提示词不仅仅能够用来调用 MCP，好的提示词会让你的 AI 员工工作起来事半功倍。如何编写优秀的提示词本身就是一门复杂的艺术，与‘如何提出一个好问题’异曲同工，这需要大量的实践和感悟。</p><p>平时和AI打交道多了，感觉自然就来了。🤯</p><h2>写在最后</h2><p>随着AI工具的发展，现在看来<code>cursor</code> 护城河似乎并没有那么高？目前实际体验下来，<code>augument code</code>的 <code>context engine </code>一骑绝尘，使用起来有种指哪打哪的效果。<code>kiro</code>的 <code>spec</code>功能让人眼前一亮，在制定规范上明显比<code>cursor</code> 便捷和好用。<code>trae</code> 的 <code>solo</code>模式对于web开发来说，也是一种全新的体验。</p><p>剩下的两个，<code>winsurf</code>我没咋用过，不过前段时间这家公司经历了：OpenAI 收购谈判破裂 -&gt; 关键团队被谷歌“逆收购”挖走 -&gt; Cognition(Devin) 收购剩余团队及资产 -&gt; 快速裁员与买断施压，这么大的变动，也不知道能不能继续走下去。</p><p>至于 <code>Athropic</code> 自己推出的 <code>Claude Code</code>，好用不用多说，但其高昂的订阅费用确实令我望而却步。</p><p>距离 <code>ChatGPT</code> 出现才过去了2年多，那时候真的很难想象 <code>Vibe Coding</code> 这种编码方式。从最初的 <code>cursor</code> 和 <code>winsurf</code>，到现如今各种 AI 编程工具：<code>augument code</code>，<code>trae</code>，<code>kiro</code>，<code>Claude Code</code>等。</p><p>比较可惜的是，驱动这些工具发挥出超乎寻常人的编程能力，都来源于 <code>Athropic</code> 这家公司背后的模型<code>Claude</code>，<code>Claude</code> 一家独大，长期占据着AI编程领域的 <code>SOTA</code>。</p><p>跑分榜上比肩的大模型不少，但实际体验仍然没有一个大模型能超过<code>Claude</code> 。 “一枝独放不是春，百花齐放春满园”。</p><p>不过，从<code>GPT-5</code> 模型能力的提升逐渐趋于平缓的情况和开源模型的逐步追赶，我大胆猜测，除非新的堪比<code><i>transformer</i></code> 的架构出现，否则比肩 <code>Claude</code> 的大模型迟早会出现。</p><p>我十分期待能有新的能比肩 <code>Claude</code> 的模型出现，通过良性竞争，让顶尖 AI 模型的 API 价格能更加亲民。</p><p>但无论这些工具如何迭代，<code>Claude</code> 的领先地位能维持多久，我们作为使用者都应该认识到，工具终究是外物，而驾驭工具的”心法“，也就是我们今天探讨的<strong>上下文工程与提示词工程</strong>——其重要性将愈发凸显。</p><p>与其被动地等待下一个”更聪明“的 AI，不如主动学习如何为我们现有的 AI “构建大脑”。理解如何提供精准的上下文，如何设计严谨的工作流，这种能力在未来只会更有价值。今天文中所分享的 MCP 协议和提示词框架，便是我在这条路上的一次探索。它或许不是最终答案，但我希望它能为你提供一个起点，一个不再仅仅是与 AI 对话，而是与 AI 共事的全新视角。</p><p>当然，技术日新月异，我的这套工作流也必然有其局限性。它更多的是一种思路的抛砖引玉。如果你对文中的 MCP 工具或提示词有更好的改进建议，或者你有自己独特的 AI 协作心得，非常欢迎在评论区分享你的经验和思考。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101784</id>
            <title>理想L8用车一年体验</title>
            <link>https://sspai.com/post/101784</link>
            <guid isPermaLink="false">https://sspai.com/post/101784</guid>
            <pubDate></pubDate>
            <updated>Thu, 14 Aug 2025 02:48:02 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 理想L8, 家庭用车, 智能驾驶, 增程优势  

<br>  
<br>  
总结: 1. 购车时建议在复杂路况试驾，避免被销售误导。2. 理想L8空间灵活，舒适配置齐全，适合家庭出行。3. 智能驾驶在高速表现良好，但城市路况体验不佳。4. 增程式设计解决里程焦虑，长途自驾更自由。5. 车机系统功能丰富但导航和语音识别有待改进。6. 使用成本低于燃油车，但充电桩安装费用较高。7. 车主对智能泊车和辅助驾驶功能有更高期待。8. 总体评价为80分，认为是一款实用但需优化的车型。 </div>
                        <hr>
                    
                    <p>以下是我们两口之家用车一年的感受</p><h3>决赛圈的车挑选Tips</h3><p>相信很多人买车前会有几个心仪的品牌，都会去试一试。</p><p>在我体验的几个品牌中，汽车销售挑选的都是快速路、主道、行人少电瓶车少——好走的路，其实更应该让销售带着往城市的复杂路况开一开，更能体现车的核心素质。</p><p>我们当时在决定购买之前约了一个15公里的长试驾、从非常拥堵的闹市路口，开到绕城高速，再开回闹市路口。分别销售开、我开、我爱人开、智能驾驶开，我们一二三排都坐了，没有晕车，最终敲定的是2024款理想L8中配（带激光雷达、六座版本）。</p><p>如果你晕车，或者对某个方面介意，要遵从自己的感受，不要被销售忽悠忍忍就过去了，因为未来这个介意的点会贯穿用车周期。</p><p>买车还是要买自己喜欢的，什么叫喜欢，比如我用车这一年里多次被剐蹭，蹭别人，钣喷了四五回，但是当我停好车后，我往前走几步时仍然会回头看一眼我的“小绿车车”，忍不住内心感叹一句“真帅！”我现在还是这样。</p><figure class="image ss-img-wrapper image_resized" style="width: 231px;"><img src="https://cdnfile.sspai.com/2025/08/12/11ffab790c645f6b7e41b374dca919df.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>购车当天留念</figcaption></figure><h3><strong>核心体验篇：这一年，车如何融入我的生活？</strong></h3><h4><strong>场景一：家庭出行 - “移动的家”名副其实吗？</strong></h4><p><strong>空间与舒适性：</strong>我们买的6座版本，如果是四大一小，小朋友会更喜欢最后一排。对于装载能力，第三排座椅可以全部放倒变为4座，也可以只放倒一边变为五座+行李。</p><figure class="ss-imgRows"><img alt="" src="https://cdnfile.sspai.com/2025/08/12/9c7397790f20601d20219c50fd2580da.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdnfile.sspai.com/2025/08/12/14523d4eda63a345a9540abb604414b8.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>车辆还自带一个叫“便捷上下车”功能，即汽车停好后开门时，空气悬架会自动降低，很方便老人小孩。</p><p>在舒适性方面，一二排座椅配备通风、加热、按摩，三排配备加热，每排两侧都有独立出风口。</p><figure class="image ss-img-wrapper image_resized" style="width: 227px;"><img src="https://cdnfile.sspai.com/2025/08/12/fcfcd687673e46b5b9761f1f6f995ebb.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>APP页面</figcaption></figure><p>夏天40度高温，外出就餐结束回车上的路途中，我会在理想APP上提前开启座椅通风+极速制冷模式，空调自动调整为18摄氏度9级风力。</p><p>冬天和朋友野外徒步，返程时提前开启极速制热+座椅加热+冰箱44度制热，回到车上时能喝上一口温水很舒服。我一般不开冰箱制冷，因为随处都可以买到冷饮，只有去超市采购生鲜食品时会开。</p><p><strong>娱乐系统：</strong>我们买的是中配版本，不带后排屏幕，想的是未来小朋友长大了也该换车了。副驾屏幕也很少看，在我等爱人逛街或在车内休息的时候，很少使用车载屏幕观看视频，因为爱优腾APP都是会员需要掏钱的。我偶尔会投屏我的美剧在屏幕上看，我们玩儿的最多的应用是成语接龙，</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/1207c5cea3209a0b1038cd0f53dca6f0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>成语接龙记录：108个</figcaption></figure><p>便利性配置：手机充电口比较多，二排有20w快充口，在第三排座椅下方有220v插座，我们带小狗出去玩儿水，用这个插座可以直接插吹风机给小狗吹干。买车的时候也附赠了一个能插在外部汽车充电口上的插座转换器，带一个插排就可以外接插座露营了。</p><h4>场景二：日常通勤与城市穿梭 - “大块头”灵活吗？</h4><p><strong>尺寸与操控：</strong>&nbsp;</p><p><strong>路边停车：</strong>虽然有自动泊车功能，但是它在侧方停车时，总是停的压在车位线上，我不得不重新倒一把，在狭窄车位里微操。</p><p><strong>离车泊入：</strong>在中控屏选定预备车位后，可以开启该功能，下车后触摸主驾门把手感应点几秒后开始离车泊入，问题是如果后方有障碍物（花、水管等），车头会有一截露在外面，还需要我再回到车上再倒一下，这个功能我向理想400热线反馈过两次，至今也没有解决。</p><figure class="ss-imgRows"><img alt="" src="https://cdnfile.sspai.com/2025/08/12/8f6f460229f31c3161ee2e436ace9a21.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdnfile.sspai.com/2025/08/12/fd78c6434d5f3ad2b7be28a0a49da9f0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>直线召唤：如果我们的车与别的车距离很近，可以在手机上开启该功能并操纵车前进和后退，但如果像前文写的后方有障碍物，就没法再倒了。</p><p>这两个功能的问题估计同样指向了默认预留了“后备箱门必须可以完全开启”的距离。没有留给车主个性化选择的功能。</p><p><strong>纯电体验：</strong>我身处成都，很少会有零下的天气，所以没有出现过续航里程虚标的情况，春夏秋冬每次充满电可以跑180公里。满油满电可以跑1100公里。</p><p>我们家在自己车位上安装了充电桩，充电桩是赠送的，但是安装时自己掏钱的，从停车场总电闸到车位有110米远，理想赠送30米，剩下的80米是我购买的，花费4500元。</p><p>事后总结，安装公司不一定非要找理想的，你也可以找市面上其他的安装公司，我们这一年充电桩花费1168元电费，电行驶里程13567.6公里，如果抛去长途用公共充电桩跑了2000公里，那么就是1公里0.1元，比较划算，我之前开的别克昂科威2.0T在油价最高的时候要1元1公里了。</p><figure class="image ss-img-wrapper image_resized" style="width: 182px;"><img src="https://cdnfile.sspai.com/2025/08/12/318bf424cde9f48d3041e0dca4e4b9f6.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>辅助驾驶里程6143公里</figcaption></figure><p><strong>智能化辅助：</strong>辅助驾驶在长途、高速、绕城、二三环和堵车的时候经常使用，在晚上零点左右回家，我已经非常疲惫的时候用的多些，这能极大地减轻我的精神压力，我只需要专注路况和随时踩刹车即可，加速、变道、超车，都由辅助驾驶决定。车VS车的路况它能非常完美的驾驭。</p><p>但是车VS人、电瓶车的路况，进入城市路面我还是会自己开，因为辅助驾驶开的非常顿挫。经典场景是通过红绿灯时，如果是黄灯，我开的话就已经踩刹车缓行了，辅助驾驶还在猛踩油门，直到进入实线车道（压线会扣分的那一截）才猛刹车，乘坐体验很差，不知道接下来的系统升级能不能解决这个问题。总体来说智能驾驶确实是一直在升级的。</p><p>有一个题外话，就是有几次从三环进入匝道的时候，差点撞上匝道口的尖角，我不知道现在这个问题解决没有，还有几次它会开得离匝道口很近的时候才开始变道，这个时候匝道口已经排着车队了，它就要硬加塞进去，我不喜欢做没素质的车主，所以我已经半年多没有用辅助驾驶下过匝道了。</p><p><strong>操控表现：</strong>&nbsp;这个2吨多的车加速减速都非常灵敏。但自身重量还是限制了它的操控，在超车快速打方向的时候会感觉到车的惯性。在过坑坑哇哇的路面的时候空气悬架也非常舒适。隔音方面也做的非常好。</p><h4>场景三：长途自驾与诗和远方 - “里程焦虑”解决了吗？</h4><p><strong>增程优势：&nbsp;</strong>没有里程焦虑，说走就走，实际上开长途前一天我会充满电，出发后平均开一个小时休息一下，我也会用公共充电桩快充到80%（四十分钟），如此循环，如果不想等待太久或者要排队，那么我就用油，车机地图上会显示每个服务区的充电桩使用情况、包括快充慢充，我一般会用快充，抵达目的地时如果是在城市里，我一般会晚饭后和老婆把车开到充电桩充电，然后一起在陌生城市压压马路。</p><p><strong>高速表现：</strong>增程器在路上开启是感受不到噪音的，风噪和胎噪都在可接受范围内，在车流不密集的高速路段我会开启辅助驾驶，我的辅助驾驶里程其实都是长途自驾增长起来的。我们最远分别从成都开到过云南芒市、贵州遵义，全程高速。在标准、运动、高性能模式下加速踏板响应非常迅速，舒适模式因为模式设置的原因会稍微迟缓一点儿。</p><p>底盘舒适性也不错，我也不会刻意过坑坑洼洼的路面，在过减速带的时候也很轻松。</p><p><strong>露营/外放电</strong>：我其实至今没有用这个车露营过，即便买车的时候送了我们一个超大的露营帐篷，我们旁边就是川西，我期待九十月份的时候可以开去一趟川西玩儿玩儿，深度体验一下露营模式。</p><figure class="ss-imgRows"><img alt="" src="https://cdnfile.sspai.com/2025/08/12/256c7367db6815b95ca43ce8d176d7c7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdnfile.sspai.com/2025/08/12/5cb086c923056cdf2b276409891d7bf4.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h4>场景四：智能座舱 - “车机”是加分项还是核心依赖？</h4><p><strong>理想同学：</strong>理想同学的识别率在我看来是每次升级之后都有些倒退，以前语速非常快的说“理想同学”它都能识别到，但是最近几次升级后反而它不太能响应了，我们也开启了“简洁模式”——就是不用说理想同学，直接说指令就行，它在这方面的响应要优于“理想同学+帮我打开空调”。</p><p>这种语音控制全车的方式确实改变了我的操作习惯，比如开空调、开车窗（它甚至能理解“车窗往下一点点”与“车窗往下一点”的不同）、开天幕、复位座椅、切换动力模式、所有的操控它基本都支持。但是部分模式需要我坐在主驾位置才能开启，比如我要开启“离车不下电”模式（该模式指锁车后空调、车机仍然运行，适用于小狗在车上），我在后排和副驾说就不顶用，我就得坐在主驾说才行。</p><p><strong>中控屏/交互：</strong>&nbsp;车的主要功能都比较好用，也非常流畅不卡顿，ota也在不断升级车的功能，比如之前是没有离车泊入和直线召唤的，这两个功能都是ota升级来的，手机app远程控制也很使实用，比如找车、直线召唤、开空调、开冰箱制冷制热、授权驾驶给朋友。哨兵模式也非常好用，如果别人刮了我的车导致车震动了，我的手机会收到通知有高风险事件发生，我可以在手机上看发生了什么。</p><figure class="image ss-img-wrapper image_resized" style="width: 170px;"><img src="https://cdnfile.sspai.com/2025/08/12/9e4748a1380c5060345aae23f57bbc2b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>但是我两次被开门杀都没有被识别到，这我挺不满意的。</p><p><strong>导航及娱乐：&nbsp;</strong>这个车的导航用的是高德导航，且不能更换导航APP，而我是百度地图的重度用户，高德导航在出匝道口、三车道时的提醒不提前，往往是我走到跟前了才提醒我走哪条车道。我得时时刻刻看着地图才不会走错。</p><p>且不能使用Carplay以及Apple Music，Apple Music只能通过浏览器收听，还会出现歌曲断断续续的情况。其他常用的QQ音乐、网易云音乐都有内置APP。</p><p>视频方面，常用的爱优腾都有，我也可以通过有线和无线投屏的方式看手机的视屏。</p><h3>成本篇：养它贵不贵？&nbsp;</h3><p><strong>能耗费用：</strong>&nbsp;我一共开了20265公里，电跑了13583公里，家用电桩1168元电费，商业充在300元左右，油跑了6432公里，百公里7升油耗，现在95号汽油8元每升，那么我的油钱应该是3640元，每公里0.56元，</p><p><strong>保险费用：</strong>&nbsp;首年交强险1100，商业险5013，驾驶意外险488。</p><p>我们出了三次险，今年交强险1210，商业险5402。</p><p><strong>保养费用：</strong>&nbsp;我们只做了一次小保养，就是买1299元的用车服务包包含的一次空调滤芯和增程器更换机油，我问施工人员，他们说我第二年保养的时候就要大保养了，什么是大保养，就是外加更换一次空气滤芯。</p><p><strong>其他费用：</strong>在成都新能源汽车在公共停车场和路边停车场是2小时免费的。</p><p><strong>总体评价：</strong>&nbsp;相比于燃油车，纯电力使用成本是非常省钱的，如果充电桩离地库总电闸距离更近那就更好了，像我这样安装充电桩花了4500的人，需要再用两年把这部分成本平摊下来才是真正的省钱。</p><h3><strong>总结</strong></h3><p>L8是我们愿意开的一辆车，没有花里胡哨的功能，每次更新都非常实在地解决了用户的痛点。</p><p>以前出远门自驾要计算一下油费，毕竟一块钱1公里，现在这部分费用基本不考虑了，我们其实不太爱跟朋友一起开车远行，所以没太改变我们的社交相处方式。</p><p>我作为车主，满分100我可以打到80分，少的20分是因为我对智驾有更高的期待和要求，多花的几万买带激光雷达版本，就是期望能减轻我的驾驶负担，但是目前来说并没有，在城市道路开启智驾比我开还要更紧张，切不舒适。如果我没买激光雷达版本，那这是台好车。</p><p>希望未来ota可以把Apple music加上，智能泊车整体更人性化，智驾系统好开。</p><p>2024款 理想L8 Max， 还需打磨的一部好车。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/ecd7401bf179b128fa76475097f06554.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101782</id>
            <title>精选 7 档高质量英文播客：深度对话、豪华嘉宾、多样主题</title>
            <link>https://sspai.com/post/101782</link>
            <guid isPermaLink="false">https://sspai.com/post/101782</guid>
            <pubDate></pubDate>
            <updated>Thu, 14 Aug 2025 01:25:23 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 英文播客, Lex Fridman, 科技访谈, 深度对话  
<br>  
<br>  
总结: 作者推荐了7档高质量的英文播客，包括Lex Fridman Podcast、All-In Podcast、Acquired等，涵盖了科技、商业、创业等主题。这些播客以深度访谈、时效性内容和专业嘉宾为特点。作者还介绍了自己的播客应用Bayt，支持中文音频和字幕转换，帮助用户更高效地获取信息。 </div>
                        <hr>
                    
                    <p>每天早上通勤时，我都会戴上耳机听播客。听着听着，我发现一个现象：英文播客不仅制作更精良、嘉宾阵容更豪华，对话深度也更让我欲罢不能。于是，我挑选了 7 档自己常听、并且非常推荐的英文播客分享给你。</p><p>当然，如果你的外语水平还没到能无障碍收听英文长播客，或者想用母语更高效地获取内容，可以试试我最近上线的 Bayt 播客 —— 所有节目都能自动生成中文音频和双语字幕。</p><p>比如我把一档 2 小时的英文访谈转成中文，时长直接少 30 分钟，用母语再开 1.5 倍速，效率直接翻倍！</p><p>接下来分享我的清单：</p><figure class="image ss-img-wrapper image_resized" style="width: 293px;"><img alt="Lex Fridman Podcast | Podcast on Spotify" src="https://cdnfile.sspai.com/2025/08/12/article/08e0dbbffe4729da76d87826c75645da.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Lex Fridman Podcast</figcaption></figure><h3>1、Lex Fridman Podcast</h3><p><strong>关键词：科技访谈 | 重磅嘉宾 | 深度</strong></p><p>我最喜欢的播客。每期都是 Lex Fridman 与一名嘉宾的深度访谈。有很多重磅的嘉宾参加了该节目，如马斯克，扎克伯格，特朗普，Sunder Pichai 等。涵盖的主题很广泛，包括但不止于科技、物理、哲学、政治、历史。我最喜欢的一点是，每期内容都是2~8小时的长内容，保证了访谈的深度。有很多访谈类播客会沦为公关宣传节目（@Decoder 播客），但 Lex Fridman 很好地避免了这一点。Lex Fridman 是一位很有魅力和好奇心的主持人，有趣的是，他还经常会在每期节目最后灵魂拷问嘉宾：“对你来说，活着的意义是什么？”</p><p>每期内容比较长，对于缺乏耐心和专注力的当代人可能是一种考验。</p><p><i>推荐 Episode：《#474 - DHH: 编程的未来, AI, Ruby on Rails, 效率 &amp; 为人父母》（#474 - DHH: Future of Programming, AI, Ruby on Rails, Productivity &amp; Parenting）</i></p><figure class="image ss-img-wrapper image_resized" style="width: 300px;"><img src="https://cdnfile.sspai.com/2025/08/12/7ca9d917b2cd57d5b6b55281e1db35f0.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>All In</figcaption></figure><h3><strong>2、All-In Podcast</strong></h3><p><strong>关键词：时效性 | 广度 | 右派</strong></p><p>几位科技圈40+，50+岁的大佬每周聚在一起聊硅谷新闻的节目。由于几位嘉宾都是不同的领域的投资人，所以总是能提供不同的视角，而且视角会比较宏观，会关注货币政策、政治局势、国际局势等话题。</p><p>偏右派观点，主持人们基本属于特朗普阵营的人。</p><p>内容更新比较频繁，适合获取新资讯，但深度有时略有不足。</p><p><i>推荐 Episode：《12天战争，纽约的社会主义风潮，股市新高，AI版权，科学角》（12 Days War, Socialism Wins in NYC, Stocks All-Time High, AI Copyright, Science Corner）</i></p><p>&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 293px;"><img src="https://cdnfile.sspai.com/2025/08/12/a17a81e2a5531cee10a69a931c1d9627.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Acquired</figcaption></figure><h3><strong>3、Acquired - 公司史研究</strong></h3><p><strong>关键词：时效性 | 广度 | 右派</strong></p><p>从小我就很喜欢读各种公司的创业史、发展史，而 Acquired 这档节目就像是这些书的浓缩精华播客版。每期 Ben 和 David 都会挑选一家著名公司，如宜家、任天堂、Visa、星巴克，深度剖析这家公司的发展历程、创始人背景、商业模式。从播客内容可以感受到，两人对每期的节目都做了非常细致的调研工作。</p><p>我很喜欢的一起《宜家》，从这集播客中，我了解到宜家确实是一家非常特别的公司：诞生于挪威小镇，几乎没有竞争对手，没有上市。</p><p><i>推荐 Episode：《宜家》（IKEA）</i></p><p>&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 310px;"><img src="https://cdnfile.sspai.com/2025/08/12/980a1ff44b1cf276ad33e433890b8782.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>The Social Radars</figcaption></figure><h3>4、The Social Radars</h3><p><strong>关键词：创业 | YC | 硅谷</strong></p><p>硅谷著名创业加速器 Y-Combinator（简称YC） 创始人 Paul Graham 的妻子开的一档播客，访谈硅谷创业人，采访过的嘉宾包括 OpenAI 的 Sam Altman，Dropbox 创始人，Replit 创始人等。对话的氛围比较轻松自在。</p><p>对话的深度不如 Lex Fridman Podcast。</p><p><i>推荐的近期 Episode：《Sam Altman，CEO of OpenAI》</i></p><p>&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 308px;"><img alt="Indie Hackers | Podcast on Spotify" src="https://cdnfile.sspai.com/2025/08/12/article/c43ab89eb6ab58727fa59a57e31b02f6.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Indie Hackers</figcaption></figure><h3>5、Indie Hackers</h3><p><strong>关键词：个人开发者</strong></p><p>这档节目是播客圈比较小众和稀缺的主题：个人开发者。每期访谈一位成功的个人开发者，分享他们的个人项目是如何发展起来的，各个阶段收入多少，以及方法教训。采访过嘉宾包括 Tony Dinh，目前 Tony 的一人公司的 ARR （每年经常性收入）到达了一百万美元。在当前AI编程快速发展的时代，适合那些想借助AI独立开发的人士。</p><p>Indie Hackers 的主播还开发了同名社区，便于独立开发者们分享交流。</p><p>&nbsp;</p><p>&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 307px;"><img src="https://cdnfile.sspai.com/2025/08/12/ad7640931401d16676e36dbd5a71cb48.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>6、Swift over Coffee</h3><p><strong>关键词：苹果开发者 | Swift | WWDC</strong></p><p>这档播客的主题也是比较小众：苹果开发生态。由知名的苹果开发教学网站 Hacking with Swift 创建者 Paul Hudson 聊苹果开发者社区的新闻，比如 WWDC 的更新、Swift 版本更新等。</p><p>今年3月在上海的 Let's Version 开发者活动中，我还见到了 Paul Hudson。现场跟他分享了我的几个应用，还直接掏出笔记本让他帮我看了一个困扰多时的 Bug（虽然最后没有解出来哈哈）。</p><figure class="image ss-img-wrapper image_resized" style="width: 371px;"><img src="https://cdnfile.sspai.com/2025/08/12/6f329e6ee4af342c9a0cb68e81f0279e.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>我在上海与 Paul 见面</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/dc83363456e5e63466a98103caefbc1e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>在搜索 Swift over Coffee 的时候，还看到了一张奇怪的图片😂</figcaption></figure><h3>7、The Diary of A CEO</h3><p><strong>关键词：名人访谈</strong></p><p>以长篇对话形式呈现，主角是各界名人 — CEO、健康学家、文化人物、作家、运动员等，深入挖掘他们的人生故事与思考。</p><p><i>推荐的近期 Episode：《抗衰老专家：缺少这种维生素的危害堪比吸烟，以及你必须了解的肌酸知识！》（Anti-Aging Expert on How Missing This Vitamin Is As Bad As Smoking, and What You Should Know About Creatine!）</i></p><p>&nbsp;</p><p><strong>最好再安利一下我上线不久的播客应用 Bayt 播客，无论你是想更高效地获取更高质量的信息，还是想通过播客练习听力或跟读，Bayt 都很适合你。首页还会定期更新精选的健康、科技、AI、财经等主题内容。真诚邀请你成为 Bayt 的早期用户！（</strong><a href="https://apps.apple.com/app/apple-store/id6748532039?pt=121796720&amp;ct=ssp&amp;mt=8"><strong>下载地址</strong></a><strong>）</strong></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/ed143278cfe7e98cd5e7aa434d7c3d8d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>所有播客均可生成中文音频与字幕，还有定期更新的编辑精选内容，涵盖健康、科技、AI等主题。</figcaption></figure><p>&nbsp;</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101813</id>
            <title>如何使用Astro建立个人博客网站？</title>
            <link>https://sspai.com/post/101813</link>
            <guid isPermaLink="false">https://sspai.com/post/101813</guid>
            <pubDate></pubDate>
            <updated>Wed, 13 Aug 2025 08:12:32 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 博客部署,Astro框架,Pure主题,Vercel

<br>
<br>
总结: 作者分享了自己搭建博客的过程，最初尝试NotionNext但遇到bug和主题限制，后改用Hugo仍不满意，最终选择了Astro框架和Pure主题。详细介绍了从克隆主题仓库、本地开发调试到通过GitHub和Vercel部署的完整流程，包括域名购买和CDN加速配置。文章还说明了如何修改页面设置和添加文章内容，并提到未来可能分享使用Obsidian的Digital Garden插件生成笔记网站的方法。 </div>
                        <hr>
                    
                    <figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/2c1a982622bd3399e45ae4f0ebd182d0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>最近熬了好几个大夜做了个自己的博客，看过我之前文章的朋友们都知道，我之前就有尝试过使用 Notion 搭建自己的博客，去年 12 月使用 NotionNext 这个项目购买域名做了部署，但是，最后的结果不如人意，总有一些我看不明白的 bug，老是部署失败，而且主题可选样式太少了。</p><p>我这么爱折腾的人怎么可能满足于此，于是上周我尝试了使用 Hugo 静态部署，研究了老半天，我感觉还是不太行，最后我搜索 Obsidian 部署个人网站的时候搜到了很多其他人的博客，比如这个朋友的：<a href="https://8cat.life/">Home • CCM'blog</a> ，于是我溯源找到了他使用的主题，也就是 <a href="https://astro-pure.js.org/">Astro Pure Theme</a>，最后使用此主题改造了自己的博客主页。</p><p>我的主页已经上线，欢迎大家参观 👉 <a href="https://www.joeytoday.com/">Home • joeytoday</a>，可直接复制链接在浏览器打开，也可点击「阅读原文」进入查看。</p><pre class="language-"><code>https://www.joeytoday.com/</code></pre><p>最终我选择了 Astro 框架+Pure Theme，使用 GitHub+Vercel 部署，主页效果如下，如果不想打开网页，也可以在展开大概看看～👀</p><blockquote><p>[!abstract]- 我的主页<br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="我的主页概览" src="https://cdnfile.sspai.com/2025/08/13/article/f00f4306ab7158a483715865cc1461e3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure></blockquote><p>部署过程</p><p>大概说了下我是如何选到自己喜欢的主题的，选择使用 Astro 很大一部分原因也是帮助文档有中文的，部署也相对简单，具体部署也可以参考教程，整体来说比较简单：<a href="https://docs.astro.build/zh-cn/getting-started/">入门指南 | Docs</a></p><p>指南给的部署步骤，主要是本地的，我需要同步部署在网络上，目前的流程还是会有点麻烦，所以我优化了一下流程，主要操作如下所示。</p><h3>导入主题仓库到本地</h3><p>下载 <a href="https://desktop.github.com/download/">GitHub 桌面端</a>，点击 <code>Add</code> - <code>Clone Repository</code>，选择 <code>URL</code>，粘贴主题仓库地址，克隆到本地。</p><pre class="language-"><code>https://github.com/cworld1/astro-theme-pure.git</code></pre><p>&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/a28715d2cbc107d068443ad89107b947.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>同步修改到 GitHub</h2><p>然后选择 commit to main，再点击 push origin，同步到 GitHub 仓库，之后每次修改也是这两步操作。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/348ecb3550b019522826c5983fb3bad3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>打开终端，进入到项目文件夹，也就是上图的 <code>Local Path</code> ：</p><pre class="language-bash"><code>cd ./&lt;your-project&gt;</code></pre><p>在本地启动开发模式：</p><pre class="language-bash"><code>npm run dev</code></pre><p>然后进入本地开发环境，你就会打开一个此主题的预览页面，此后修改的内容，都可以在这个页面看到。</p><pre class="language-bash"><code>http://localhost:4321/</code></pre><h2>直接部署到 Vercel</h2><p>为了防止修改配置后部署失败，建议没修改的时候就直接先部署。没有账号的可以先注册 Vercel，然后新建项目 <a href="https://vercel.com/new">New Project</a>，在页面 import 刚刚同步的博客仓库。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/18f29eb89902a0fa78a518bbd5bfc3f0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>等待部署之后就可以直接查看页面了，初始网页链接是：<code>project-name/vercel.app</code>，国内访问可能存在比较慢的问题，所以你可以购买域名，点击右上角的 <code>Domain</code> 修改重定向。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/60c7fc1aa050ddcfe6481af1ddadaa2c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><blockquote><p>[!note] 说明</p><ul><li>关于购买域名可以参考：<a href="https://www.joeytoday.com/blog/2025/domain-purchase-by-namesilo">如何使用 NameSilo 购买域名？ • joeytoday</a></li><li>关于域名 cdn 加速可以参考：<a href="https://www.joeytoday.com/blog/2025/domain-config-by-cloudflare">如何使用 Cloudflare 配置域名？ • joeytoday</a></li></ul></blockquote><h2>修改页面设置</h2><p>具体的配置和修改也可以在 <a href="https://astro-pure.js.org/docs/setup/getting-started">Getting Started • Astro Theme Pure</a> 这里看到，但有些配置也没有说的太清楚，所以我补充我的设置进行一些说明。主要修改的部分在 <code>src</code> 文件夹下。</p><h3>site.config.ts</h3><p>页面整体设置，包括页头和页尾<br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/ed5769d042b8729b122c77b00aac0738.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/0d34b2804be6e52860db2b2a1f24e54b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/3c661c82c7b3cb09ffbaade9acddff5e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>Src/pages 页面配置</h3><h4>Index. Astro</h4><p>这个页面是配置主页的，<br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/5890d8372348038336de3d2e56ad9219.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/cd40af06cb8821ab441216ac393b4947.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/81945fa0f1fd7bc12287efddb2efbd86.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/1f02b3f13c5b07695df7a8df51643eb3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/c15e3032800ad006fc2651d526fb87f2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/908ed2d92a06d2a8357582fdf34d6c74.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/6300a3e39b9fc0d19fdf03431c6e48e0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>大部分的页面样式都在对应的文件夹下，样式如果实在看不懂可以让 AI 给注释一下。</p><h2>添加文章</h2><p>所有的文章都在 <code>src/content</code> 之下，我一般也用不上 <code>docs</code>，所以我直接在 <code>blog</code> 中添加，内容都是 markdown 文件，基础信息可以使用 frontmatter，形式如下：</p><pre class="language-markdown"><code>---
title: 标题
author: 作者
description: 文章概述
draft: false 发布，true 为草稿
publishDate: 2023-09-01 发布时间，格式如右
tags:文章标签
  - 第三周刊
  - 政治
  - 社会
  - 书评
heroImage: {src: 'https://joey-md-asset.oss-cn-hangzhou.aliyuncs.com/img/202312140000460.jpeg', inferSize: true} //封面图片，本地、网络图片都可以
---
正文内容正文内容正文内容正文内容正文内容正文内容正文内容正文内容正文内容正文内容正文内容</code></pre><p>添加完之后[[#同步修改到 GitHub]] 就会自动更新部署了，部署完成后主页就会更新内容。</p><p>End</p><p>折腾完自己的主页之后，还使用 <strong>Obsidian</strong> 的 <strong>【Digitial Garden】</strong> 插件生成了我的笔记网站，可以直接从 Obsidian 发布到网站上，效果如下所示，如果大家感兴趣的话，我可以下期再出一篇教程。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/04f7f5b574f280c3ecf99ee4f44ac5b3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101805</id>
            <title>我给Quote/0 墨水屏写了一个新的快捷指令</title>
            <link>https://sspai.com/post/101805</link>
            <guid isPermaLink="false">https://sspai.com/post/101805</guid>
            <pubDate></pubDate>
            <updated>Wed, 13 Aug 2025 05:10:29 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 墨水屏,Quote/0,快捷指令,资讯推送

<br>
<br>
总结: 本文介绍了作者购买和使用少数派共创的墨水屏产品Quote/0的体验。文章提到该设备可通过磁吸方式固定在冰箱或书架上，用于显示随机滚动的资讯。目前设备功能有限，主要包括看资讯、记待办和查天气，但缺乏公共交通通勤时间预估等功能。作者基于官方API开发了一个快捷指令工具，方便用户从手机推送图文内容到设备屏幕，并详细说明了使用步骤和前期准备工作。最后分享了该快捷指令的下载链接。 </div>
                        <hr>
                    
                    <p>老早就关注到了少数派共创新推出的硬件产品，又是我很喜欢的墨水屏产品，磁吸在冰箱或者书架上，瞥一眼就可以看到随机滚动的资讯。前两天看到又在卖了，才一百多就立马下单了。已经使用了半天，分享一下使用感受以及我做的快捷指令小工具。</p><p>首次使用quote/0，需要通过手机app完成配对和设置，从内容工坊中添加信息内容。iOS上面的轻应用只在安装完成之后，用来展示详情使用。<i>我在想有没有可能官方可以升级一下这个轻应用，让它更重一点，把一些基础的设置和卡片切换在这里就完成。</i></p><p>目前App里提供的功能还是比较有限，主要集中在<strong>看资讯、记待办、查天气 </strong>。而每一个功能都还没有做的很透很深入。资讯目前除了少数派，也就只有雷锋网、IT之家、36氪等，但是可以用RSS添加订阅。天气只是实时天气、降雨概率、空气质量。通勤这块有驾车、汽车、步行的通勤时间预估，<i><strong>偏偏没有公共交通。</strong></i>还有很多的分类还是空的或者零星几个应用。</p><p>看开发日志后续还会持续增加更多功能，期待后续的功能更新以及更多的第三方接入~&nbsp;</p><p>&nbsp;</p><p>对于一些刚刚拿到这个设备或者准备购买的入门玩家而言，有一个基础功能我觉得很需要，就是想从手机推送图文到屏幕，官方App目前并没有内置这样的功能，<a href="https://dot.mindreset.tech/docs/server/template/api" target="_blank">官方文档</a>中提供的接口和工具也只是一个模板（<a href="https://dot.mindreset.tech/docs/server/community_co_creation" target="_blank">共创平台</a>中有大佬做了桌面端推送工具可以自行前往下载）在xhs上也看到有用户在问怎么用。 所以，我基于官方提供的API接口和模版，改造出了一个可能更好用的快捷指令👇 给大家使用，非常简单初级，但是能解决一些问题：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/ac1d7ed104066c7463ee0cf8952400ac.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>文本推送模式示例</figcaption></figure><h3>使用步骤简单，3步就搞定：&nbsp;</h3><p><strong>运行快捷指令，</strong>可以选择是要发<strong>文本</strong>还是发<strong>图片</strong>（官网提供的快捷指令模板图文是分开的两个，这里做了合并和修改）</p><p><strong>发布内容：</strong></p><p>📝如果发文本，直接在输入框输入内容 （文本内容包括：<strong>标题、正文、署名、链接和图标</strong>，图标功能在快捷指令中没有开启可自行再设置）；&nbsp;</p><p>🖼️ 如果发图片，就从<strong>相册或文件</strong>里选择你想要的图片（快捷指令增加了转换格式的步骤，系统只接受PNG格式，现在可以转换了但是对于图片内容和尺寸还得自己把握一下）&nbsp;</p><p><strong>推送完成</strong>静静等待Quote/0屏幕刷新就行啦（系统提示设备休眠为正常状态，使用电池供电最快十五分钟同步）&nbsp;</p><p>&nbsp;</p><h4>💡不过使用前还有些准备工作要做：</h4><ul><li>要先在Dot. App里关联好你的设备。</li><li>生成API Token，只显示一次记得保存。</li><li>复制好设备序列号（deviceId）。</li><li>前往内容工坊，添加“文本API”和“图像API”。</li></ul><p>有了这个快捷指令，现在用手机就可以快捷方便地推送图文到Quote/0，对不想折腾不懂开发编程逻辑又想体验自定义显示内容的朋友，应该是很实用的。可能仍存在BUG和优化空间，后续可能会做更新，也欢迎自行下载修改。希望大家喜欢。</p><p>&nbsp;快捷指令：<a href="https://www.icloud.com/shortcuts/4325cfb405a24e4188117832eada1357" target="_blank">https://www.icloud.com/shortcuts/4325cfb405a24e4188117832eada1357</a></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/606b8253a88d921f700c658225e3b543.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>图片推送模式示例</figcaption></figure><p>&nbsp;<a href="https://www.xiaohongshu.com/search_result?keyword=Quote0&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#Quote0</a> <a href="https://www.xiaohongshu.com/search_result?keyword=%25E6%2599%25BA%25E8%2583%25BD%25E5%25A2%25A8%25E6%25B0%25B4%25E5%25B1%258F&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#智能墨水屏</a> <a href="https://www.xiaohongshu.com/search_result?keyword=iOS%25E5%25BF%25AB%25E6%258D%25B7%25E6%258C%2587%25E4%25BB%25A4&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#iOS快捷指令</a> <a href="https://www.xiaohongshu.com/search_result?keyword=%25E6%2595%25B0%25E7%25A0%2581%25E5%25B7%25A5%25E5%2585%25B7&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#数码工具</a> <a href="https://www.xiaohongshu.com/search_result?keyword=%25E6%2595%2588%25E7%258E%2587%25E7%25A5%259E%25E5%2599%25A8&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#效率神器</a> <a href="https://www.xiaohongshu.com/search_result?keyword=%25E5%25B0%2591%25E6%2595%25B0%25E6%25B4%25BE%25E5%2585%25B1%25E5%2588%259B&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#少数派共创</a>﻿&nbsp;﻿<a href="https://www.xiaohongshu.com/search_result?keyword=quote0&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#quote0</a>﻿&nbsp;﻿<a href="https://www.xiaohongshu.com/search_result?keyword=%25E5%25A2%25A8%25E6%25B0%25B4%25E5%25B1%258F&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#墨水屏</a>﻿&nbsp;﻿<a href="https://www.xiaohongshu.com/search_result?keyword=%25E6%25A1%258C%25E9%259D%25A2%25E5%25A5%25BD%25E7%2589%25A9&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#桌面好物</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101780</id>
            <title>码农的自我修养之保持干净的 $HOME 目录</title>
            <link>https://sspai.com/post/101780</link>
            <guid isPermaLink="false">https://sspai.com/post/101780</guid>
            <pubDate></pubDate>
            <updated>Wed, 13 Aug 2025 02:27:58 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 秩序敏感, Oh My ZSH, XDG_Base_Directory, 文件管理

<br>
<br>
总结: 作者作为秩序敏感者，习惯整理电脑文件，对Oh My ZSH在用户目录生成多余文件感到不适。通过修改.zshrc文件路径变量，将临时文件收敛到指定目录。发现XDG_Base_Directory规范，该规范定义了配置文件、数据文件等的存储路径，旨在减少$HOME目录混乱。列举了遵循该规范的应用和收益，如清理数据、加速检索和数据迁移。期待未来所有应用遵守规范，使$HOME目录更简洁。 </div>
                        <hr>
                    
                    <h2>前言</h2><p>本人在生活中就是一个秩序敏感者，喜欢将桌面整理的井井有条，很享受简洁给我带来的安定感。</p><p>这种习惯也带入到使用电脑的场景，我所有文档都分类摆放在特定目录，在任何时候我都可以快速准确到找到需要的文件。</p><p>也会定期清理不重要的文件，让资源管理器处于<code>轻松</code>的状态。这算一种强迫症，喜欢删除认为不重要的东西，也反感应用软件在我非预期的地方放置文件。</p><blockquote><p>电影《机器人总动员》里面有个扫地机器人，它非常热衷于自己的清洁工作，容忍不了一点点污染，是我印象深刻的片段。</p></blockquote><h2>$HOME 目录</h2><p>在桌面操作系统中会为每个用户分配一个「用户目录」，当前用户在使用系统时产生的数据都会保存在这个用户目录下。</p><p>系统也会预设好一些通用分类的目录如：</p><ul><li>图片</li><li>文稿</li><li>下载</li><li>音乐</li><li>应用程序</li><li>影片</li><li>桌面</li></ul><p>我们在管理数字资产的时候通常会遵循预设的分类去摆放数据，以便我们的管理和检索。</p><p>一些应用程序在使用期间会产生一些配置文件，缓存文件和用户数据等。</p><p>用户目录已经有一些较为通用的分类文件夹如： <code>.cache&nbsp;</code> 、<code>.config</code> 、<code>.local</code> &nbsp;&nbsp;</p><p>往往很多应用程序都是将这些数据直接放置在用户的根目录，并创建自己的专属文件夹（.xxx），如图：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/15/105a617fae14a3158a430f542b948f4e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>很多 .xxx 文件都是应用程序生成的</figcaption></figure><p>理论上类似 <code>.npm</code> 、 <code>.vscode</code> &nbsp;这些目录都是应该收敛到 &nbsp;<code>.cache&nbsp;</code> 、<code>.config</code> 、<code>.local</code> &nbsp; &nbsp; 去的。</p><p>强迫症患者 + 洁癖患者看着这么多的 .xxx 文件夹确实是非常难受！！</p><h2>到处拉屎的 .zsh</h2><p><a href="https://ohmyz.sh/" target="_blank">Oh My ZSH</a> 对于程序员来说应该无需赘述，它非常优秀，是我愿意使用终端必要前提。但是它有个缺点，就是会在你的用户目录下生成很多<code>意外</code>文件。</p><p>比如在成功安装好 <a href="https://ohmyz.sh/" target="_blank">Oh My ZSH</a> 之后，我预期的文件只有</p><ul><li>$HOME/.oh-my-zsh</li><li>$HOME/.zshrc</li></ul><p>但是事实是在我的用户目录下会额外生成如下文件：</p><ul><li>.zprofile</li><li>.zsh_history // 输入历史</li><li>.zsh_sessions // 会话历史</li><li>.zcompdump // 加速自动补全</li><li>.zcompdump.zwc // 编译版本，进一步加速自动补全</li></ul><p>是的，它就是这么随意。</p><p>强迫症的我每次看到这些不速之客都非常难受，因为它们都有自己的作用，且哪怕删除了下次启动又会自动生成。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/b6134239a900e7c8fc2c2620ad85ab06.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>zsh 生成很多文件</figcaption></figure><p>于是就开始折腾如何收敛这些文件，好在可以在 .zshrc 中通过复写这些路径的变量，来达到收敛的目的。</p><pre class="language-shell"><code>export NODE_REPL_HISTORY="" # 关闭在终端中使用 node 的输入历史记录
export LESSHISTFILE=- # 关闭使用 less 命令的记录

# 在公共的缓存目录创建 oh-my-zsh 的缓存目录
export ZSH_CACHE_DIR="$HOME/.cache/oh-my-zsh"
mkdir -p $ZSH_CACHE_DIR

# 设置 zsh dump 的缓存文件
export ZSH_COMPDUMP="$ZSH_CACHE_DIR/.zcompdump"
# 设置 zsh 的历史记录文件
export HISTFILE="$ZSH_CACHE_DIR/.zsh_history"

# 设置 zsh 的 session 文件
# 当前设置无效，需要在 /private/etc/zshrc_Apple_Terminal 中设置
export SHELL_SESSION_DIR="$ZSH_CACHE_DIR/.zsh_sessions"
mkdir -p $SHELL_SESSION_DIR
</code></pre><p>这样就可以把那些临时文件都收敛到 <code>$HOME/.cache</code> 中，眼不见为净。</p><h2>意外的发现</h2><p>当我整理完 oh-my-zsh 的临时文件时，接着扫视 <code>$HOME</code> ，发现一个 <code>.gk</code> 的文件夹有点碍眼。</p><p>如何评判是否<code>碍眼</code>？</p><p><i><strong>就是我觉得它不是常规软件生成的，只是个妃子，不配在 </strong></i><code><i><strong>$HOME</strong></i></code><i><strong> 拥有独立位置的文件。</strong></i></p><p>比如我会觉得 <code>.npmrc</code> 和 <code>.ssh</code> 这种咖位的配置，直接存在于 <code>$HOME</code>是更容易接受的。（是的，是个严重的双标党）</p><p>于是开始谷歌这个 <code>.gk</code> 是干嘛的，搜到对应的 <a href="https://github.com/gitkraken/vscode-gitlens/issues/3660" target="_blank">vscode-gitlens-issue</a> 有人同样反感这个文件在 <code>$HOME</code> 里生成，建议作者采纳修改建议。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/b7fbe75fc7bdb79ecd8b48f9072dbaf4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>作者表示不想改，并且巴拉巴拉...</p><p>接着该用户搬出了一个社区的规范，并且列举了一些已经遵守该规范的 PR</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/b467e2c876519966ac68e5ffdce56c0b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br /><strong>于是我就发现了 </strong><a href="https://specifications.freedesktop.org/basedir-spec/latest/index.html#index" target="_blank"><strong>XDG_Base_Directory</strong></a><strong> 这个造福强迫症患者对人类文明进步做出贡献的规范。</strong></p><h2>XDG_Base_Directory</h2><p><a href="https://wiki.archlinux.org/title/XDG_Base_Directory#User_directories" target="_blank">XDG_Base_Directory</a> （Cross-Desktop Group）是一个由 <a href="https://www.freedesktop.org/wiki/" target="_blank">freedesktop</a> 发起的标准规范。 定义了<code>配置文件</code>、<code>数据文件</code>、<code>状态数据</code>和<code>缓存文件</code>的存储路径，主要用于类 Unix/Linux 系统。</p><p>这套标准的目标是 <strong>减少 </strong><code><strong>$HOME</strong></code><strong> 目录的混乱</strong>，避免一堆 <code>.*</code> 文件（如 <code>.bashrc</code>、<code>.gitconfig</code>、<code>.zsh_history</code>）直接放置在 <code>$HOME</code> 里。</p><p>XDG 规范主要定义了以下 4 个环境变量：</p><figure class="table"><table><thead><tr><th>变量</th><th>作用</th><th>适合存放的数据</th><th>示例</th></tr></thead><tbody><tr><td><code>XDG_CONFIG_HOME</code></td><td>配置文件</td><td>用户的应用配置</td><td><code>~/.config/git/config</code></td></tr><tr><td><code>XDG_CACHE_HOME</code></td><td>缓存</td><td>可随时删除的数据</td><td><code>~/.cache/zsh/</code></td></tr><tr><td><code>XDG_DATA_HOME</code></td><td>用户数据</td><td>需要长期存储的数据</td><td><code>~/.local/share/nvim/undo/</code></td></tr><tr><td><code>XDG_STATE_HOME</code></td><td>应用状态数据</td><td>运行时状态、日志、历史记录</td><td><code>~/.local/state/zsh/history</code></td></tr></tbody></table></figure><p><br />所以正常情况下我们都需要在 .zshrc 里做如下配置：</p><pre class="language-shell"><code># XDG Base Directory Specification https://wiki.archlinux.org/title/XDG_Base_Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
# XDG Base Directory Specification end
</code></pre><p>&nbsp;</p><p>如果应用程序跟进实现了此标准，那么在需要保存文件的时候，会优先读取 <code>XDG-</code> 对应的路径（用户自定义），否则回退到系统默认。</p><p>正常情况下都推荐将 <code>XDG-</code> 对应的路径设置为系统默认，即如上给出的配置示例。除非你有特别强烈的定制需求。</p><p>比如某个应用程序需要往磁盘写入一些缓存文件，那么应该按照如下方式实现：</p><pre class="language-javascript"><code>import { join } from 'path';
import { homedir } from 'os';

const XDG_CACHE_HOME = process.env.XDG_CACHE_HOME || join(homedir(), ".cache");

const applicationCachePath = join(XDG_CACHE_HOME, 'your-application-name')

</code></pre><p>虽然推荐应用按如上示例的优先级去获取路径，但是有些应用为了保持用户的习惯，在获取不到 <code>process.env.XDG_CACHE_HOME</code> 时，它是默认回退到 <code>~/.xxx</code>。</p><p>比如 <code>Git</code></p><ul><li><code>$GIT_CONFIG_GLOBAL</code>（如果设置了）</li><li><code>$HOME/.gitconfig</code></li><li><code>/etc/gitconfig</code>（系统级别）</li></ul><p>所以为了确保实现了 XDG_Base_Directory 规范的应用优先获取到 <code>XDG-</code> 路径，推荐用户都明确做好如下配置，确保命中第一优先级。</p><pre class="language-shell"><code># XDG Base Directory Specification https://wiki.archlinux.org/title/XDG_Base_Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
# XDG Base Directory Specification end</code></pre><p><a href="https://wiki.archlinux.org/title/XDG_Base_Directory#User_directories" target="_blank">XDG_Base_Directory</a> 维护了一个表格，将那些已经遵循该规范的应用列举在上面。</p><p>我截取了部分，有兴趣的同学可以点击<a href="https://wiki.archlinux.org/title/XDG_Base_Directory#User_directories" target="_blank">链接</a> 进行查看。</p><figure class="table"><table><thead><tr><th style="background-color: rgb(234, 236, 240); border: 1px solid rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; text-align: center;">Application</th><th style="background-color: rgb(234, 236, 240); border: 1px solid rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; text-align: center;">Legacy Path</th><th style="background-color: rgb(234, 236, 240); border: 1px solid rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; text-align: center;">Supported Since</th><th style="background-color: rgb(234, 236, 240); border: 1px solid rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; text-align: center;">Discussion</th><th style="background-color: rgb(234, 236, 240); border: 1px solid rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; text-align: center;">Notes</th></tr></thead><tbody><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://archlinux.org/packages/?name=act"><strong>act</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/.actrc</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><p><a href="https://github.com/nektos/act/pull/1656"><strong>1656</strong></a></p><p style="margin-left: 0px;"><a href="https://github.com/nektos/act/pull/2195"><strong>2195</strong></a></p></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/nektos/act/issues/1678"><strong>[5]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><p><code>XDG_CONFIG_HOME/act/actrc</code></p><p style="margin-left: 0px;">If present <code>~/.actrc</code> will be merged with the XDG path config.</p></td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://wiki.archlinux.org/title/Aerc"><strong>aerc</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">&nbsp;</td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://git.sr.ht/~rjarry/aerc/commit/fff1664"><strong>fff1664</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">&nbsp;</td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>XDG_CONFIG_HOME/aerc/aerc.conf</code></td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://wiki.archlinux.org/title/ALSA"><strong>ALSA</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/.asoundrc</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><p><a href="https://github.com/alsa-project/alsa-lib/commit/577df365f66ee09579864fc771136e690927b3bf"><strong>577df36</strong></a></p><p style="margin-left: 0px;"><a href="https://github.com/alsa-project/alsa-lib/releases/tag/v1.2.3"><strong>1.2.3</strong></a></p></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/alsa-project/alsa-lib/issues/49"><strong>[6]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>XDG_CONFIG_HOME/alsa/asoundrc</code></td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://aur.archlinux.org/packages/anaconda/"><strong>anaconda</strong></a>AUR</td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/.conda/.condarc</code>, <code>~/.conda/condarc</code>, <code>~/.conda/condarc.d/</code>, <code>~/.condarc</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/conda/conda/blob/main/CHANGELOG.md#4110-2021-11-22"><strong>4.11.0</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://conda.io/projects/conda/en/latest/user-guide/configuration/use-condarc.html#searching-for-condarc"><strong>[7]</strong></a> <a href="https://github.com/conda/conda/pull/10982"><strong>[8]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">&nbsp;</td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://developer.android.com/studio/index.html"><strong>Android Studio</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/.AndroidStudioX.X</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://developer.android.com/studio/intro/studio-config#file_location"><strong>Android Studio 4.1</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">&nbsp;</td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><pre class="language-"><code>XDG_CONFIG_HOME/Google/AndroidStudioX.X
XDG_DATA_HOME/Google/AndroidStudioX.X
XDG_CACHE_HOME/Google/AndroidStudioX.X
</code></pre><p style="margin-left: 0px;"><a href="https://developer.android.com/studio/intro/studio-config#file_location"><strong>Location overview by Google</strong></a> does not mention XDG - paths could be hardcoded instead of using the proper variable, though that is unlikely as Intellij IDEA, which Android Studio is based on, implements it properly as well</p></td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://wiki.archlinux.org/title/Anki"><strong>Anki</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/Anki</code>, <code>~/Documents/Anki</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">&nbsp;</td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/dae/anki/pull/49"><strong>[9]</strong></a> <a href="https://github.com/dae/anki/pull/58"><strong>[10]</strong></a> <a href="https://docs.ankiweb.net/files.html"><strong>[11]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">Uses <code>$XDG_DATA_HOME/Anki2</code> as default if no older location exists, can be changed by using <code>anki -b &lt;anki_dir&gt;</code></td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://archlinux.org/packages/?name=antimicrox"><strong>antimicrox</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/.antimicro</code>, <code>~/.antimicrox</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/Antimicrox/antimicrox/commit/edba864"><strong>edba864</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/Antimicro/antimicro/issues/5"><strong>[12]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">&nbsp;</td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://aur.archlinux.org/packages/apvlv/"><strong>apvlv</strong></a>AUR</td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/.apvlvrc</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/naihe2010/apvlv/commit/ed0e0112b05b0cafa13ca4e215ee559c82194caf"><strong>[13]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/naihe2010/apvlv/issues/70"><strong>[14]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">Uses <code>XDG_CONFIG_HOME/apvlv/apvlvrc</code> now if it exist.</td></tr></tbody></table></figure><p>它甚至列举了这些应用从哪个版本开始遵循该标准，且给出了具体的修改PR。</p><p>下面简单看个 <a href="https://github.com/nektos/act/pull/600/files" target="_blank">PR</a></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/163dd9d47773864f0e54af278dc5e767.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>这是 ACT 应用在跟进 XDG 标准的 PR</figcaption></figure><p>咱们前端的包管理工具 pnpm 也跟进了此规范 <a href="https://github.com/pnpm/pnpm/issues/2574" target="_blank">具体查看</a></p><p>实际效果：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/ce2b3c50de1f14bb885ebbc3bceeeafa.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><h3><a href="https://github.com/b3nj5m1n/xdg-ninja" target="_blank">xdg-ninja</a></h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/4b8b44d90594a7466e6fbdafc34f3b4d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>GitHub 上的一个小工具，用于检测当前用户目录是否有可迁移到 XDG 目录的文件。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/2c7140d5700858f48715089394821265.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>截图是我电脑上的文件明细，它会列出是否支持 XDG 甚至指导你如何迁移配置。</figcaption></figure><h3>遵循标准的收益</h3><p>如果所有软件都自觉遵守该规范，那么 <code>$HOME</code> 将会变得非常干净，也更便于文件管理。</p><h4>清理数据</h4><p>当你想清理磁盘，可以大胆的删除 <code>$XDG_CACHE_HOME</code> or <code>$HOME/.cache</code> 这样所有应用程序产生的缓存文件就全部被删除了。</p><h4>加速检索</h4><p>可以把 <code>$XDG_CACHE_HOME</code> or <code>$HOME/.cache</code> 这类文件加入忽略列表，可以提升检索效率。</p><h4>数据迁移</h4><p>如果要重装系统，那么你可以直接备份 <code>$XDG_CONFIG_HOME</code> 到新系统。这样你之前苦心经营好的软件配置都全部同步好了。</p><h2>结尾</h2><p>在 2025 年期待一下：</p><p>所有应用产生的文件都在它该有的地方，所有应用在卸载的时候都可以将自己创建的<code>非用户数据</code>一并删除。</p><p>希望在若干年后，我们可以拥有一个简洁规范的 <code>$HOME</code> 目录。</p><p>这个世界的美好，离不开那些为之努力的人，哪怕是在某个极小慎微的地方做付出。他们在默默推动标准的实现，我列举一些在搜索资料时看到的案例：</p><ul><li><a href="https://github.com/nektos/act/issues/1678" target="_blank">github.com/nektos/act/…</a></li><li><a href="https://github.com/pnpm/pnpm/issues/2574" target="_blank">github.com/pnpm/pnpm/i…</a></li><li><a href="https://github.com/gitkraken/vscode-gitlens/issues/3660" target="_blank">github.com/gitkraken/v…</a></li></ul><p>有热心用户给出优化建议，有负责任的开发者积极采纳。</p><p>立个 FLAG 吧，我目前负责公司的某个产品的客户端开发，我后期也会推进这个规范的落地。</p><p>&nbsp;</p><h2>友情提示</h2><p>如果看文章的你在点击这些外链会看到这个页面：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/05/28/62cab31ee2f73438c1d22e54e64315cd.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>中转提示页</figcaption></figure><p>那么你可以安装我的另外一个浏览器插件 「<a href="https://sspai.com/post/99737"><strong>redirect-skipper</strong></a>」它可以让你无感跳过这些中转页面。</p><ul><li>项目地址：<a href="https://github.com/dogodo-cc/redirect-skipper"> Github</a></li><li>安装地址： <a href="https://chromewebstore.google.com/detail/redirect-skipper/bcjldhihfjnhgmkmdeojigknladnbcek?authuser=0&amp;hl=zh-CN">谷歌插件安装</a></li></ul>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101776</id>
            <title>7 个月开极氪7X跑16000km后，分享这 5 个真实用车体验</title>
            <link>https://sspai.com/post/101776</link>
            <guid isPermaLink="false">https://sspai.com/post/101776</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 08:38:16 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 极氪7X, 用车体验, 电动车, 配置全面  
<br>  
<br>  
总结: 作者分享了提车7个月以来的5个真实用车体验。1. 配置全面是关键，包括HUD、后排座椅调节、辅助驾驶、空气悬架和大电池等，提升了日常和长途驾驶体验。2. 操控和底盘表现良好，过弯侧倾抑制好，但存在左右晃动和电门迟滞感。3. 续航焦虑逐渐消失，随用随充和高速规划使充电更便捷。4. 软件能力有待加强，辅助驾驶可用但语音助手反应慢，车机更新不频繁。5. 车身尺寸合理，空间富余，适合家庭使用。总体对极氪7X满意度较高。 </div>
                        <hr>
                    
                    <p>不知不觉提车已经 7 个月，更没想到的是已经开了超过 16000km，再开不到 4000km 就要做首保，在此分享 5 个真实用车体验。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/00489eaa72598f8f4fa22f1b595e0c2d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><hr /><h2><br /><strong>一、配置全面就是好</strong></h2><p>消费者既要又要还要没有任何错，特别是汽车这种大件，绝大多数家庭有且仅有一辆家庭用车。</p><p>当下各种新车太多太多，选车并不容易，我是通过下面三个步骤完成了购车的决策：</p><h3><strong>① 梳理用车需求</strong></h3><p>结合用车场景：接送娃上学、节假日长途自驾结合主要用车人：主要是我开、老婆偶尔开、后排主要坐小朋友</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/14/e8723453574f2408d3371886f0fa640d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3><strong>② 试驾多多益善</strong></h3><p>试驾的均为国内的新势力车型：</p><figure class="image ss-img-wrapper image_resized" style="width: 459px;"><img src="https://cdnfile.sspai.com/2025/08/12/fad9bebf38929a8472067b11e43f9677.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3><strong>③ 敢于做决策</strong></h3><p>决赛圈是蔚来 ES6 VS 极氪 7X，用了几个小时的时间，一家三口去到两个线下店实地看车，最终敲定极氪 7X。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/14/47e3f50817d0161c09cc87865e2bccd5.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/14/2ee6a47fcff14b580f6f061089a6d7ec.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/01/10/11ffe542971a674edd5e6c91be367072.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/01/10/f4219e7ecc95d3bdffafde5371250870.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>配置全面带来的好处是在日常的使用中逐渐体现出来：</p><h3><strong>① 既有仪表盘又有 HUD：</strong></h3><p>开车的时候看 HUD 为主，对颈椎很友好</p><h3><strong>② 后排座椅可调节：</strong></h3><p>极大提升长途体验，日常体验也有显著提升</p><h3><strong>③ 辅助驾驶：</strong></h3><p>有和无就是天壤之别，高速场景和堵车场景尤其好用</p><h3><strong>④ 空气悬架：</strong></h3><p>可能一年调不了几次，但需要调整的悬架高度都是有大用处的时候</p><h3><strong>⑤&nbsp;大电池：</strong></h3><p>100 度电池的好处是显而易见的，特别是高速上的续航，如果是 450km 左右的路程，能做到中途不充电直接抵达目的地。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/26357b958592c739368ae6859d3f704d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>6 月 9 日从合肥返程的时候，路过服务区充电需要排队，于是直接没充电开回家的。全程 460km，高速里程大约450km，停好车剩余 13% 电量。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/fdbb70e99bfaa818d87124fe2bee5e8a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><strong>现在再盘点下整体配置，还想要的配置有 3 个：</strong></p><p>1. 主副驾的零重力座椅</p><p>2. 单腔空悬变成双腔空悬</p><p>3. 前排玻璃从单层变成双层<br />&nbsp;</p><h2><strong>二、能感受到的操控和底盘</strong></h2><p>操控和底盘比较微妙，特别是在网络上，针对某一款车不同人车评人的评价很可能大不一样，而对于驾驶里程十分有限的普通人来说，对操控和底盘的感知自然更不具体。</p><p>由于本人驾驶里程也才 8w 多公里，之前开的车（比亚迪唐）也只有一辆，只能浅谈 4 个直观感受：</p><h3><strong>① 过弯时侧倾抑制好</strong></h3><p>不管是日常开还是在高速上，过弯的时候都没有身体被车带着向某一侧倾斜的感受。</p><h3><strong>② 奇怪的左右晃动</strong></h3><p>过减速带和颠簸路段的时候极其明显或者说是有点突兀，相较于难以抑制的左右晃动，车子上下波动的幅度很小且感知不明显。</p><h3><strong>③ 不像 SUV的灵活度</strong></h3><p>刚提车的时候，我还是保持着上一辆车的驾驶习惯。有一天早上和老婆一起送娃上学，途中一个平平无奇的变道把我们三个人都惊到。</p><h3><strong>④ 开山路时的电门迟滞感</strong></h3><p>在市区和高速上并没有这种感觉，但开山路上下坡的时候能感知到，距离人车合一还差一点点。<br />&nbsp;</p><h2><strong>三、必然消失的续航焦虑</strong></h2><p>电动车充电早就不是难题，难的是节假日出行在服务区的充电桩不足所带来的充电等待。</p><h3><strong>① 随用随充成为现实</strong></h3><p>放在几年前无法安装家充可能是影响购买纯电车的关键因素，放在现在的情景中，已经完全不是问题。随着支持快充的充电桩越来越多，充电越来越方便，30-50 分钟的补能便能支持5-7 天的用车。</p><h3><strong>② 高速长途提前做规划</strong></h3><p>各种地图 app 都能查路途中服务区充电桩的情况，根据自身情况进行灵活的规划：60%电量时补能、40%电量时补能、20%电量时补能……</p><h3><strong>③ 日趋合理的电耗</strong></h3><p>现在各大车企对电车电耗的优化都是越来越好，特别是辅助驾驶的加持下也能让高速里程更有保障。</p><h2><br /><strong>四、有待加强的软件能力</strong></h2><p>软件能力对于纯电车的重要性不言而喻，在硬件无法拉开差距的情况下，各家车型的软件水平就是其产品力的重要体现之一。</p><h3><strong>① 可用的辅助驾驶</strong></h3><p>不用管是在什么梯队，极氪 7X 的辅助驾驶在高速是可用的，强烈建议开启变道确认，避免无效变道。在城区基本不用，车多的时候还是自己开靠谱。</p><h3><strong>② 反应慢半拍的语音助手</strong></h3><p>用了几天之后，就自适应了Eva偶尔响应不及时和智障回复。即便如此，还是比 iPhone 上的 Siri 好用。</p><h3><strong>③ 车机系统更新不频繁</strong></h3><p>距离上次更新已经有 4 个月！！！！</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/69cb77654ef87833e7d2757cff3da393.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2><strong>五、尺寸与空间</strong></h2><p>就个人的感受而言，长度超过 5m 或宽度接近 2m 的车都偏大的车型，在日常使用中需要去适应车辆的时间也会更长一些。</p><h3><strong>① 合理的尺寸</strong></h3><p><br />车身尺寸为4825×1930×1666mm，车长和车宽均不会对停车造成困扰</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/4016799c97a7154753ee53e5941a667c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3 style="margin-left: 8px;"><strong>② 富余的空间</strong></h3><p style="margin-left: 8px;">轴距为2925mm，所带来的是富余的后排和后备箱空间</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/14/026ba2aa2bdd6b1b5f5a9812020c85b8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><hr /><p><br />综上，极氪 7X 是一款我挺满意的一款车，满分 100 分能给到 85 分。希望我的5 个真实用车体验能对你有所帮助。</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101777</id>
            <title>写一篇漂亮的技术调研文档</title>
            <link>https://sspai.com/post/101777</link>
            <guid isPermaLink="false">https://sspai.com/post/101777</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 07:12:44 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: GitHub图标,NPM文档,实时数据,浏览器插件  
<br>  
<br>  
总结: 1. 在GitHub或NPM文档中使用精美图标能提升专业感和信任度。2. 这些图标通过shields.io等服务器实时获取数据。3. 作者模仿got包的文档制作了对比表格但过程繁琐。4. 开发了chrome-npm-comparison插件简化对比表格生成。5. 插件支持多维度对比和Markdown导出。6. 推荐了redirect-skipper插件跳过中转页面。7. 工具旨在提升技术文档的呈现效率。8. 所有工具均为开源项目。 </div>
                        <hr>
                    
                    <p>平时逛 Github 或者 NPM 网站时候，在 README.md 中或多或少都会看到一些这样的图标：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/4a613fe46e4f7f502e69a21f9d1185e7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>在枯燥的文档中加入这样的图标能让文档的观感提升不少，且可以增加读者的信任度。</p><p>读者会认为这份文档你是认真写的，且看着<strong>比较专业</strong>。</p><p><strong>认真</strong> + <strong>专业</strong> = <strong>信任</strong> 👍</p><h2>原理</h2><p>这些图标除了精美之外，它所展示的数据是实时的，这就非常酷了。</p><p>它让你文档呈现的数据永远都是准确的。</p><p>原理也较为简单，我们来解析一下这个路径：</p><p><a href="https://img.shields.io/github/stars/vuejs/core?color=white&amp;label"><strong>https://img.shields.io/github/stars/vuejs/core?color=white&amp;label</strong></a></p><p>它就是往 <code>img.shields.io</code> 这个服务器请求图片，通过一定规则拼装出请求参数，让服务器知道我们需要什么数据。</p><p>示例的地址就是告诉服务器返回一张 <strong>表示 vue 仓库的 star 数量的图片</strong></p><p>而这样的雷锋服务器目前我知道的有3个：</p><ul><li><a href="https://shields.io/" target="_blank">shields.io/</a> 支持多种图标</li><li><a href="https://flat.badgen.net/" target="_blank">flat.badgen.net/</a> 支持多种图标</li><li><a href="https://packagephobia.com/" target="_blank">packagephobia.com/</a> 只返回指定 npm 包所占用的内存大小</li></ul><p>这些服务器会根据我们的请求参数，去获取数据源，将数据包装成一个漂亮的图标，返回给客户端。</p><h2>我也想高大上</h2><p>之前逛 NPM 的时候发现 &nbsp;<a href="https://www.npmjs.com/package/got" target="_blank">got</a> &nbsp;这个包的 README.md 非常精美。作者列举了该库和其他类似库的一些对比数据，觉得非常专业。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/2f8ab4c7b8531a3cc1ef6b38bc986aa5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>看着是一个小图标，但是它展示的数据却是实时的、动态的</figcaption></figure><p>于是我在写调研报告的时候也学着写了一个这样的表格：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/8528d4e8c8b9eeb1b008ed0da3a23a06.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>截图是之前写的技术调研报告</figcaption></figure><p>表格看着是很舒服，可是编辑 markdown 的时候费了老命了。短短的一张对比表格，需要配置这么多的图片地址和图片链接，配置完了还得保证组合正确，瞬间觉得投入产出不成正比了。（除非写这样的报告可以拿奖金，否则不可能再写第二次！！）</p><p>如下文本是上面那张表格的 markdown 源码，来感受一下工作量：</p><pre class="language-markdown"><code>## npm 包对比

|                    |    [`yauzl`][ygit]    | [`extract-zip`][egit] |   [`adm-zip`][agit]   |  [`unzipper`][ugit]   |   [`archiver`][argit]   |
| ------------------ | :-------------------: | :-------------------: | :-------------------: | :-------------------: | :---------------------: |
| Issues open        |   [![][yio]][yio_a]   |   [![][eio]][eio_a]   |   [![][aio]][aio_a]   |   [![][uio]][uio_a]   |   [![][ario]][ario_a]   |
| Issues closed      |   [![][yic]][yic_a]   |   [![][eic]][eic_a]   |   [![][eic]][aic_a]   |   [![][uic]][uic_a]   |   [![][aric]][aric_a]   |
| Downloads          |    [![][yd]][yd_a]    |    [![][ed]][ed_a]    |    [![][ad]][ad_a]    |    [![][ud]][ud_a]    |    [![][ard]][ard_a]    |
| Bugs               |  [![][ybug]][ybug_a]  |  [![][ebug]][ebug_a]  |  [![][abug]][abug_a]  |  [![][ubug]][ubug_a]  |  [![][arbug]][arbug_a]  |
| Dependents         |   [![][ydp]][ydp_a]   |   [![][edp]][edp_a]   |   [![][adp]][adp_a]   |   [![][udp]][udp_a]   |   [![][ardp]][ardp_a]   |
| Install size       | [![][ysize]][ysize_a] | [![][esize]][esize_a] | [![][asize]][asize_a] | [![][usize]][usize_a] | [![][arsize]][arsize_a] |
| GitHub stars       |  [![][ystar]][ygit]   |  [![][estar]][egit]   |  [![][astar]][agit]   |  [![][ustar]][ugit]   |  [![][arstar]][argit]   |
| TypeScript support |   [![][yts]][ygit]    |   [![][ets]][egit]    |   [![][ats]][agit]    |   [![][uts]][ugit]    |   [![][arts]][argit]    |
| Last commit        |   [![][ycm]][ycm_a]   |   [![][ecm]][ecm_a]   |   [![][acm]][acm_a]   |   [![][ucm]][ucm_a]   |   [![][arcm]][arcm_a]   |
| symlink support    |  :heavy_check_mark:   |  :heavy_check_mark:   |          :x:          |      :question:       |       :question:        |

&lt;!-- https://gist.github.com/rxaviers/7360908 图标编码参考 --&gt;

&lt;!-- GITHUB --&gt;

[ygit]: https://github.com/thejoshwolfe/yauzl
[egit]: https://github.com/max-mapper/extract-zip
[agit]: https://github.com/cthackers/adm-zip
[ugit]: https://github.com/ZJONSSON/node-unzipper
[argit]: https://github.com/archiverjs/node-archiver

&lt;!-- ISSUES OPEN --&gt;

[yio]: https://img.shields.io/github/issues-raw/thejoshwolfe/yauzl?color=gray&amp;label
[eio]: https://img.shields.io/github/issues-raw/max-mapper/extract-zip?color=gray&amp;label
[aio]: https://img.shields.io/github/issues-raw/cthackers/adm-zip?color=gray&amp;label
[uio]: https://img.shields.io/github/issues-raw/ZJONSSON/node-unzipper?color=gray&amp;label
[ario]: https://img.shields.io/github/issues-raw/archiverjs/node-archiver?color=gray&amp;label
[yio_a]: https://github.com/thejoshwolfe/yauzl/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[eio_a]: https://github.com/max-mapper/extract-zip/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[aio_a]: https://github.com/cthackers/adm-zip/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[uio_a]: https://github.com/ZJONSSON/node-unzipper/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[ario_a]: https://github.com/archiverjs/node-archiver/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc

&lt;!-- ISSUES CLOSED --&gt;

[yic]: https://img.shields.io/github/issues-closed-raw/thejoshwolfe/yauzl?color=blue&amp;label
[eic]: https://img.shields.io/github/issues-closed-raw/max-mapper/extract-zip?color=blue&amp;label
[aic]: https://img.shields.io/github/issues-closed-raw/cthackers/adm-zip?color=blue&amp;label
[uic]: https://img.shields.io/github/issues-closed-raw/ZJONSSON/node-unzipper?color=blue&amp;label
[aric]: https://img.shields.io/github/issues-closed-raw/archiverjs/node-archiver?color=blue&amp;label
[yic_a]: https://github.com/thejoshwolfe/yauzl/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc
[eic_a]: https://github.com/max-mapper/extract-zip/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc
[aic_a]: https://github.com/cthackers/adm-zip/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc
[uic_a]: https://github.com/ZJONSSON/node-unzipper/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc
[aric_a]: https://github.com/archiverjs/node-archiver/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc

&lt;!-- DOWNLOADS --&gt;

[yd]: https://img.shields.io/npm/dm/yauzl?color=darkgreen&amp;label
[ed]: https://img.shields.io/npm/dm/extract-zip?color=darkgreen&amp;label
[ad]: https://img.shields.io/npm/dm/adm-zip?color=darkgreen&amp;label
[ud]: https://img.shields.io/npm/dm/unzipper?color=darkgreen&amp;label
[ard]: https://img.shields.io/npm/dm/archiver?color=darkgreen&amp;label
[yd_a]: https://www.npmjs.com/package/yauzl
[ed_a]: https://www.npmjs.com/package/extract-zip
[ad_a]: https://www.npmjs.com/package/adm-zip
[ud_a]: https://www.npmjs.com/package/unzipper
[ard_a]: https://www.npmjs.com/package/archiver

&lt;!-- BUGS --&gt;

[ybug]: https://img.shields.io/github/issues-raw/thejoshwolfe/yauzl/bug?color=darkred&amp;label
[ebug]: https://img.shields.io/github/issues-raw/max-mapper/extract-zip/bug?color=darkred&amp;label
[abug]: https://img.shields.io/github/issues-raw/cthackers/adm-zip/bug?color=darkred&amp;label
[ubug]: https://img.shields.io/github/issues-raw/ZJONSSON/node-unzipper/bug-fix?color=darkred&amp;label
[arbug]: https://img.shields.io/github/issues-raw/archiverjs/node-archiver/Bug?color=darkred&amp;label
[ybug_a]: https://github.com/thejoshwolfe/yauzl/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug
[ebug_a]: https://github.com/max-mapper/extract-zip/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug
[abug_a]: https://github.com/cthackers/adm-zip/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug
[ubug_a]: https://github.com/ZJONSSON/node-unzipper/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22bug-fix%22
[arbug_a]: https://github.com/archiverjs/node-archiver/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug

&lt;!-- DEPENDENTS --&gt;

[ydp]: https://badgen.net/npm/dependents/yauzl?color=orange&amp;label
[edp]: https://badgen.net/npm/dependents/extract-zip?color=orange&amp;label
[adp]: https://badgen.net/npm/dependents/adm-zip?color=orange&amp;label
[udp]: https://badgen.net/npm/dependents/unzipper?color=orange&amp;label
[ardp]: https://badgen.net/npm/dependents/archiver?color=orange&amp;label
[ydp_a]: https://www.npmjs.com/package/yauzl?activeTab=dependents
[edp_a]: https://www.npmjs.com/package/extract-zip?activeTab=dependents
[adp_a]: https://www.npmjs.com/package/adm-zip?activeTab=dependents
[udp_a]: https://www.npmjs.com/package/unzipper?activeTab=dependents
[ardp_a]: https://www.npmjs.com/package/archiver?activeTab=dependents

&lt;!-- INSTALL SIZE --&gt;

[ysize]: https://packagephobia.com/badge?p=yauzl
[esize]: https://packagephobia.com/badge?p=extract-zip
[asize]: https://packagephobia.com/badge?p=adm-zip
[usize]: https://packagephobia.com/badge?p=unzipper
[arsize]: https://packagephobia.com/badge?p=archiver
[ysize_a]: https://packagephobia.com/result?p=yauzl
[esize_a]: https://packagephobia.com/result?p=extract-zip
[asize_a]: https://packagephobia.com/result?p=adm-zip
[usize_a]: https://packagephobia.com/result?p=unzipper
[arsize_a]: https://packagephobia.com/result?p=archiver

&lt;!-- GITHUB STARS --&gt;

[ystar]: https://img.shields.io/github/stars/thejoshwolfe/yauzl?color=white&amp;label
[estar]: https://img.shields.io/github/stars/max-mapper/extract-zip?color=white&amp;label
[astar]: https://img.shields.io/github/stars/cthackers/adm-zip?color=white&amp;label
[ustar]: https://img.shields.io/github/stars/ZJONSSON/node-unzipper?color=white&amp;label
[arstar]: https://img.shields.io/github/stars/archiverjs/node-archiver?color=white&amp;label

&lt;!-- TYPESCRIPT SUPPORT --&gt;

[yts]: https://badgen.net/npm/types/yauzl?label
[ets]: https://badgen.net/npm/types/extract-zip?label
[ats]: https://badgen.net/npm/types/adm-zip?label
[uts]: https://badgen.net/npm/types/unzipper?label
[arts]: https://badgen.net/npm/types/archiver?label

&lt;!-- LAST COMMIT --&gt;

[ycm]: https://img.shields.io/github/last-commit/thejoshwolfe/yauzl?color=gray&amp;label
[ecm]: https://img.shields.io/github/last-commit/max-mapper/extract-zip?color=gray&amp;label
[acm]: https://img.shields.io/github/last-commit/cthackers/adm-zip?color=gray&amp;label
[ucm]: https://img.shields.io/github/last-commit/ZJONSSON/node-unzipper?color=gray&amp;label
[arcm]: https://img.shields.io/github/last-commit/archiverjs/node-archiver?color=gray&amp;label
[ycm_a]: https://github.com/thejoshwolfe/yauzl/commits
[ecm_a]: https://github.com/max-mapper/extract-zip/commits
[acm_a]: https://github.com/cthackers/adm-zip/commits
[ucm_a]: https://github.com/ZJONSSON/node-unzipper/commits
[arcm_a]: https://github.com/archiverjs/node-archiver/commits

### 选择的依据：

-   软连接的支持（编辑器内部有软连接）
-   较少的依赖
-   较多的下载量

综合以上数据，[yauzl][ygit] 是下载量最大的，但是它提供的接口相对底层。所以最终选择 [extract-zip][egit]，它是对 yauzl 的一个简单的封装。对外提供更简单的接口。
</code></pre><p>&nbsp;</p><p>手写是不可能了，但是我们是程序员啊！类似这样的配置性的东西最适合程序化了。</p><p>于是就决定开发一个浏览器插件，用来快速制作 NPM 包的对比表格。</p><p>就像逛购物商城一样，在商品详情页可以点击商品到<strong>对比列表</strong>。方便用户横向对比多个商品。</p><h2>浏览器插件</h2><p>懒是第一生产力，于是就有了 <a href="https://github.com/dogodo-cc/chrome-npm-comparison" target="_blank">chrome-npm-comparison</a> 这款浏览器插件。<a href="https://chromewebstore.google.com/detail/npm-comparison/opijdickacjhbendcbbabpgffoppphdg?authuser=0&amp;hl=zh-CN" target="_blank">Chrome 安装地址</a></p><p>该插件在 npm 的包的详情页，添加一个 「Add to npm Comparison」 的按钮。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/4bfec1503e0d18b8c97f441757bd42a3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>点击之后会生成对比表格：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/e69b152a9dc98fce48dacfb4323519d4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>点击按钮，就会追加到表格</figcaption></figure><p>&nbsp;</p><p>还提供了众多图标选项供你自由组织表格数据：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/515428dd5261adebdbaefb85bd183fbe.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>可以勾选需要对比的维度</figcaption></figure><p>表格生成之后你可以将它复制到 Markdown 或者 HTML 。</p> <p>&nbsp;</p><p><br />这样无论是你需要介绍自己的 npm 包，还是写一篇技术调研文档，都可以快速制作出一份精美的 <strong>npm 包对比表格</strong>。</p><ul><li>插件安装地址：<a href="https://chromewebstore.google.com/detail/npm-comparison/opijdickacjhbendcbbabpgffoppphdg?authuser=0&amp;hl=zh-CN" target="_blank">Chrome 安装地址</a></li><li>插件仓库地址：<a href="https://github.com/dogodo-cc/chrome-npm-comparison" target="_blank">chrome-npm-comparison</a></li></ul><h2>友情提示</h2><p>如果看文章的你在点击这些外链会看到这个页面：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/05/28/62cab31ee2f73438c1d22e54e64315cd.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>中转提示页</figcaption></figure><p>那么你可以安装我的另外一个浏览器插件 「<a href="https://sspai.com/post/99737"><strong>redirect-skipper</strong></a>」它可以让你无感跳过这些中转页面。</p><ul><li>项目地址：<a href="https://github.com/dogodo-cc/redirect-skipper"> Github</a></li><li>安装地址： <a href="https://chromewebstore.google.com/detail/redirect-skipper/bcjldhihfjnhgmkmdeojigknladnbcek?authuser=0&amp;hl=zh-CN">谷歌插件安装</a></li></ul>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101704</id>
            <title>如何根据神经科学原理快速放松</title>
            <link>https://sspai.com/post/101704</link>
            <guid isPermaLink="false">https://sspai.com/post/101704</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 06:29:20 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 费登奎斯,钟形手,神经可塑性,身体实践  
<br>  
<br>  
总结: 该练习设计受费登奎斯、艾瑞克森等体系影响，原型来自费登奎斯1981年工作坊中的"钟形手"技术。其理论依据最初基于运动/感觉侏儒图，后根据新研究更新，但实践早于神经可塑性理论被学界承认。视频初版2023年发布于B站，复刻版有所调整。原计划制作系列节目从静态放松过渡到动态练习，因恶评中断。专栏将结合多媒体形式阐述身体实践方法，后续会探讨其作用、局限及风险。 </div>
                        <hr>
                    
                    <p>该练习的设计，受到费登奎斯（Feldenkrais method）、艾瑞克森（Milton Erickson）、西斯特玛（Systema）等体系的影响。一些细节也受到其他体系的影响，暂不一一列举。<br />其原型来自费登奎斯1981年的工作坊，他晚年才开始使用这个方法，所以没有收录到他的书中。在这个练习中，手部动作细微如同钟的振动，故命名为钟形手（the bell hand）。</p><p>费氏当时的理论依据是 Wilder Penfield &amp; Edwin Boldrey 的运动侏儒图（motor homunculus）、感觉侏儒图（sensory homunculus），这似乎有些过时了，所以根据 Frank Willett、Evan M. Gordon 等的研究做了一定更新。但这个体系的出现，是基于他通过武术获得的身体直觉及其科研背景造就的思考能力，其实践领先于理论领域 —— 该体系的雏形诞生时，主流科学界尚未承认神经可塑性。</p><p>这个视频的初版，于 2023 年 8 月 8 日首发于 B 站，也是我做过的第一个视频。复刻版的内容有一定调整，且更换了高清素材。</p><p>原计划要做一个系列，写了个大纲，由几十个词汇组成，每期处理一个词汇。这个节目旨在提供静态放松的基础，后续会逐步过渡到动态和生活层面（我一向<strong>不提倡做太多静态练习</strong>）。然而刚发出来就有位疑似费登奎斯领域的用户发表恶评和引流，令我怒而弃更 —— 当时刚做视频，对互联网现状的理解还很浅，所幸这两年经过大量低素质用户的锤炼，脸皮已经很厚了（笑）。</p><p>这个专栏涉及身体实践，很多观点难以仅凭文字阐明， 所以会结合音视频等形式，试图制造一定<strong>印象</strong>，作为讨论的基础。后文还会讲到这个方法的作用、延展、局限性与潜在风险。敬请期待。</p><h2>视频版</h2> <h2>播客版</h2><div class="ss-audioSource" id="" src="https://media.transistor.fm/b52b0087/70ac5104.mp3" title="如何根据神经科学原理快速放松（两周年复刻版）">Audio</div>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101744</id>
            <title>Archlinux 笔记本省电设置</title>
            <link>https://sspai.com/post/101744</link>
            <guid isPermaLink="false">https://sspai.com/post/101744</guid>
            <pubDate></pubDate>
            <updated>Sun, 10 Aug 2025 21:54:21 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Linux省电, PowerTOP, TLP, 电池优化

<br>
<br>
总结: 本文介绍了在Archlinux系统上通过PowerTOP和TLP工具优化笔记本电池续航的方法。作者对比了MacBook和Windows笔记本的续航表现，指出Linux默认缺乏电源管理导致续航较短。核心方案包括安装配置TLP服务、调整CPU调频驱动(amd-pstate)、设置能源性能偏好(EPP)、管理充电阈值等。通过降低屏幕亮度、关闭动态组件等基础措施，结合TLP的进阶配置，最终将85Wh电池的续航从3-5小时提升到8小时左右。文章还提供了具体的命令行操作和配置参数，特别说明了ThinkPad和非ThinkPad设备的电池护理设置差异。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;"><strong>Matrix 首页推荐</strong>&nbsp;</p><p style="margin-left: 0px;"><a href="https://sspai.com/matrix">Matrix</a>&nbsp;是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&nbsp;</p><p style="margin-left: 0px;">文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><hr /><h2>背景</h2><p>我一直很羡慕 Mac 笔记本，尤其是 MacBook Air，轻薄便携的机身与惊人的续航几乎就是它的标志。通过 MacOS 系统和 M 系列芯片的软硬件深度整合，苹果给 MacBook Air 带来的省电体验实在是让人印象深刻。</p><p>相比之下，Windows 笔记本虽然难以完全复刻这种表现，但随着 AMD 和 Intel 在芯片架构与制程工艺上的进步，加上各大 OEM 厂商的省电模式与大容量电池的配合，现在的 Windows 笔记本也能做到办公场景下 8~10 小时的续航。其中的佼佼者，如 Lunar Lake 系列的笔记本，已经达到甚至超越了 Mac。</p><p>然而，我的笔记本上运行的则是 Archlinux。由于几乎没有进行过任何电源优化，即使这台笔记本拥有 85 Wh 的电池，离电续航却往往只有 3~5 小时。于是为了提示笔记本的离电使用时间，我决定探索一下 Linux 上的省电方案。</p><h2>核心工具</h2><p>Linux 下有两款工具可以用来协助用户进行功耗控制：PowerTOP 和 TLP。</p><ul><li>PowerTOP：顾名思义，类似 <code>top</code>，用于监控系统中各个软件与硬件组件的功耗情况，并能生成详情报告与优化建议。即使不使用它来直接进行具体的配置，它本身依然是一个非常优秀的功耗分析工具，可以帮助定位设备上主要的耗电来源。</li><li>TLP：这是一款功能丰富的命令行工具，能够在无需深入研究技术细节的情况下，轻松延长笔记本电脑的续航时间。TLP 默认针对电池寿命进行了优化，并且开箱即用地实现了 PowerTOP 的推荐配置。因此大部分情况下，只需要安装并启用 TLP 服务，就可以得到不错的省电效果。</li></ul><h2>基础措施</h2><p>在启用 TLP 之前，先调整一些离电状态下的基础配置（如屏幕亮度与键盘背光）。这些设置通常已集成在桌面环境的电源管理中，可以立即减少功耗。以 KDE 为例，可在“系统设置 → 电源管理”中，对电池供电时的屏幕亮度与键盘背光进行调节。我自己的设置是将屏幕亮度降低到了 20%，并完全关闭键盘背光。因为我离电场景多是在室内光照环境下，不需要更高的屏幕亮度和键盘背光。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/f3e566d726aeda3d14039a08ac29c8eb.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>另一个容易被忽略的功耗来源是桌面环境的动态组件，例如天气挂件、系统监控以及动态壁纸等。这些组件在离电状态下仍然可能会占用不少的系统资源，从而拖累整体的续航时间。可以根据自身的需求，调整这些组件的运行策略，例如：天气类挂件可以延长数据的刷新间隔，动态壁纸组件也可以设置为电池模式时停止动态特效。这样减少动态组件的活动频率，也可以进一步延长使用电池时的续航。</p><p>接下来，就是安装并启用 PowerTOP 和 TLP：</p><pre class="language-bash"><code># 安装 PowerTOP（功耗分析工具）
sudo pacman -S powertop

# 安装 TLP（实际的电源管理服务）
sudo pacman -S tlp

# 安装 tlp-rdw（提供根据特定事件启用或禁用蓝牙/Wi-Fi和WWAN设备的功能，需要NetworkManager）
sudo pacman -S tlp-rdw 

# 启用 TLP 服务（可以使用 --now 参数立即启动服务）
sudo systemctl enable tlp.service

# 启用 tlp-rdw 需要的 NetworkManager-dispatcher.service 
sudo systemctl enable NetworkManager-dispatcher.service

# 屏蔽 systemd-rfkill 相关服务避免冲突，确保 TLP 的无线电设备切换选项正常工作
sudo systemctl mask systemd-rfkill.service 
sudo systemctl mask systemd-rfkill.socket</code></pre><p>启动 TLP 服务后，可以通过以下命令检查其运行状态：</p><pre class="language-bash"><code>sudo tlp-stat -s</code></pre><p>若一切正常，应该可以看到 TLP 输出的系统信息和 TLP 服务状态。</p><p>以上就是一个基本的电源管理配置了。大部分情况下，TLP 提供的默认配置已经足够了。但因为 TLP 本身也是可以进行高度定制化的，所以还可以针对自己设备的情况，进行更深入的设置。</p><h2>进阶配置</h2><p>TLP 本身是一个纯命令行的工具，其配置文件路径位于 <code>/etc/tlp.conf</code>，可以通过修改配置文件来修改它的配置。或者也可以使用 TLPUI 之类的图形界面来进行可视化的配置操作，这也是我主要使用的配置方式。</p><pre class="language-bash"><code># TLPUI 位于 AUR 仓库中
yay -S tlpui</code></pre><p>安装完成后，打开 TLPUI，就可以使用它来更改 TLP 的配置了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/bca936144de54fe963f0f5eae8a9e195.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>CPU DRIVER OPMODE</h3><p>TLPUI 的 CPU 选项中的第一个项目是 CPU DRIVER OPMODE，这个项目中配置的是 CPU 的调频驱动。在较新的 AMD CPU（Zen 2 或更新版本）和内核版本中（内核 6.3 或更新），推荐的 CPU 调频驱动是 <code>amd-pstate/amd-pstate-epp</code>，可以通过下面的命令来检查当前 CPU 调频驱动的模式：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/amd_pstate/status</code></pre><p>如果输出的信息是 <code>active</code>，说明 <code>amd-pstate</code> 驱动已经启用并被设置为了 <code>active</code>，也称 <code>amd-pstate-epp</code>，这是推荐的现代模式。该驱动模式下，低级别控制权会被交给 CPU 硬件本身，硬件可以根据能源性能偏好（Energy Performance Preference，EPP）来优先考虑性能或能效。</p><p>如果上面的命令输出了其他结果或者文件并不存在，那么在 6.3 或更新的内核上，可以将 <code>amd_pstate=active</code> 加入到内核启动参数中使其永久生效：</p><pre class="language-bash"><code>sudo vim /etc/default/grub</code></pre><p>找到 <code>GRUB_CMDLINE_LINUX_DEFAULT</code> 这一行，在引导参数中加入 <code>amd_pstate=active</code>：</p><pre class="language-diff"><code>- GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
+ GRUB_CMDLINE_LINUX_DEFAULT="quiet splash amd_pstate=active"</code></pre><p>保存后，重新生成 GRUB 配置文件并重启：</p><pre class="language-bash"><code>sudo grub-mkconfig -o /boot/grub/grub.cfg    
sudo reboot</code></pre><p>再次执行下面的命令：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/amd_pstate/status</code></pre><p>此时应该可以看到输出为 <code>active</code>。</p><p>在 TLP 配置中，也可以手动更改 <code>CPU_DRIVER_OPMODE_ON_AC/BAT</code> 的选项，如需区分插电和离电时的调频驱动模式，那么就可以在这里进行配置，否则只需要在启动参数中统一设置就足够了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/d1f383a9770b6ec725f5fc49f049ba27.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>这里也结合 TLP 的文档对 <code>guided</code> 和 <code>passive</code> 简单进行一下说明：</p><ul><li><code>guided</code>：需要 6.4 或更高的内核版本，可以配置最大和最小频率，处理器将在指定范围内自动选择工作频率。基本上可以将 <code>guided</code> 视为强制限定了频率范围的 <code>active</code> 模式。</li><li><code>passive</code>：可以结合 Linux 的 CPU 调速器（Governor）使用，也就是 TLP 中的 CPU SCALING GOVERNOR 选项。CPU 将按照调速器的配置决定频率。</li></ul><p>还可以通过下面的命令来验证当前 CPU 的调频驱动：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_driver</code></pre><p>如果是 <code>active</code> 模式，那么结果应该是 <code>amd-pstate-epp</code>。<code>guided</code> 或 <code>passive</code> 模式下，这个命令输出的可能是 <code>amd-pstate</code> 或其他结果（例如文件不存在等）。</p><h3>CPU SCALING GOVERNOR</h3><p>这个配置项目用于选择自动频率调节的 CPU 调速器，TLP 的默认设置的插电和离电的调速器都是 <code>powersave</code>。可以通过下面的命令，确认当前驱动模式下可用的调速器：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors</code></pre><p>当 <code>amd-pstate</code> 为 <code>active</code> 模式时，可用的选项有 <code>performance</code> 和 <code>powersave</code>，当 <code>amd-pstate</code> 处于 <code>guided</code> 或 <code>passive</code> 模式时，全部的选项有 <code>conservative</code>、<code>ondemand</code>、<code>userspace</code>、<code>powersave</code>、 <code>performance</code> 和 <code>schedutil</code> 这六个。对这些调速器的更具体说明，可以参考相关的<a href="https://www.kernel.org/doc/Documentation/cpu-freq/governors.txt">文档</a>。</p><p>因为我已经激活了 <code>amd-pstate-epp</code>驱动，所以我只有 <code>performance</code> 和 <code>powersave</code> 这两个选项，并且这两个选项在当前模式下，实际上并不是像真正的调速器那样工作，而是会被转换为 CPU 内部的能源性能偏好提示去进行工作。因此我这里保持了默认的状态，并没有进行设置。</p><p>另外需要说明的是，TLP 配置项中明确提到了，如果要配置此项，必须禁用发行版的调速器设置，否则会发生冲突。在 KDE 和 GNOME 桌面环境中，这个发行版的调速器设置通常可能是 <code>power-profiles-daemon</code> 管理的。</p><p>可以通过验证服务状态来确认：</p><pre class="language-bash"><code># 检查 power-profiles-daemon 服务是否在运行
systemctl status power-profiles-daemon.service

# 如果服务在运行中，可以选择停止并禁用该服务
sudo systemctl stop power-profiles-daemon.service
sudo systemctl disable power-profiles-daemon.service

# 或者屏蔽该服务
sudo systemctl mask power-profiles-daemon.service</code></pre><h3>CPU ENERGY PERF POLICY</h3><p>这个配置项目在 <code>amd-pstate-epp</code> 驱动下才是主要控制 CPU 能源消耗的配置项。在大多数情况下，它的可选值有 5 个：<code>performance</code>，<code>balance_performance</code>，<code>default</code>、<code>balance_power</code> 和 <code>power</code>。这 5 个节能的程度依次加深。</p><p>同样的，可以通过命令来确认自己 CPU 可用的 EPP 选项：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/cpu0/cpufreq/energy_performance_available_preferences</code></pre><p>我将插电时的 EPP 设置为了 <code>performance</code>，离电时则改为了最节能的 <code>power</code>。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/be6c406863adb751bec7701aba4b0f53.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>TLP 的其他设置</h3><p>使用电池时关闭睿频：</p><pre class="language-txt"><code>CPU_BOOST_ON_BAT=0</code></pre><p>设置平台（Platform）的整体电源级别：</p><p>当前可用的配置值可以使用下面的命令查看：</p><pre class="language-bash"><code>$ cat /sys/firmware/acpi/platform_profile_choices
low-power balanced performance</code></pre><p>我的配置如下：</p><pre class="language-txt"><code>PLATFORM_PROFILE_ON_AC=performance
PLATFORM_PROFILE_ON_BAT=low-power</code></pre><p>还有一些别的配置项目，如硬盘、WIFI 以及 USB 的省电，也可以通过 TLPUI 进行检查。这时候就会发现，TLP 在默认情况下的确已经进行了不少的配置了。所以这些配置项目我也就没有再进行进一步的更改了。</p><h2>电池</h2><p>最后的部分是电池本身的护理。电池护理并不会直接降低功耗，但能够减少容量的衰减，延长使用寿命。在 TLPUI 中，这部分的配置位于「ThinkPad 电池」标签，但这个配置并不只适用于 ThinkPad 机型。实际可用的参数取决于笔记本厂商与驱动的支持情况，具体的配置可以参考 TLP 的<a href="https://linrunner.de/tlp/settings/bc-vendors.html">相关文档</a>。</p><p>以我的 ThinkBook 为例，属于联想的非 ThinkPad 系列，使用的是 <code>ideapad_laptop</code> 驱动。可以通过 <code>lsmod | grep ideapad_laptop</code> 命令来确认，如果看到该模块已加载，就可以进行对应的电池阈值配置：</p><pre class="language-txt"><code>START_CHARGE_THRESH_BAT0=0  # dummy value
STOP_CHARGE_THRESH_BAT0=1</code></pre><p>这样电池的最大充电量就会被限制在 80%，减少高电量长期保持带来的电池老化。</p><p>但是，如果让电脑始终保持在 80% 的电量，难道不就是平白无故地损失了 20% 的容量吗？这里其实可以区分不同的使用场景：</p><ul><li>日常插电为主时：保持 80% 的上限，延长电池寿命。</li><li>临时需要外出时：可以通过命令 <code>tlp fullcharge</code> 临时将电源充满，达到最长的续航效果。</li></ul><p>另一个配置项，RESTORE_THRESHOLDS_ON_BAT 就是结合这种情况使用的。当使用 <code>tlp fullcharge</code> 将电池充满后，TLP 的阈值限制会在下一次开机后才恢复。启用这个配置项，可以在电脑切换回插电状态后，自动恢复用来的充电阈值。这样就能兼顾长期的电池寿命和临时的续航需求。</p><h2>最终结果</h2><p>完成以上的配置后，我再次在离电状况下启动了 PowerTOP 观察自己笔记本的功耗表现，发现设备的整体功耗已经被限制在了 8~10 w 左右（网页浏览和笔记记录等轻度工作）。这个功耗结合 85 Wh 的电池，已经足够给我带来 8 小时左右的续航了。</p><p style="margin-left: 0px;">&gt; 关注&nbsp;<a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank">少数派小红书</a>，感受精彩数字生活 🍃</p><p style="margin-left: 0px;">&gt; 实用、好用的 <a href="https://sspai.com/mall">正版软件</a>，少数派为你呈现 🚀</p>
                ]]>
            </content:encoded>
        </item>
        
    </channel>
</rss>