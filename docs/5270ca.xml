<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>少数派 -- Matrix</title>
        <link>https://sspai.com/matrix</link>
        
        <item>
            <id>https://sspai.com/post/101776</id>
            <title>7 个月开极氪7X跑16000km后，分享这 5 个真实用车体验</title>
            <link>https://sspai.com/post/101776</link>
            <guid isPermaLink="false">https://sspai.com/post/101776</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 08:38:16 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 极氪7X, 用车体验, 电动车, 配置全面  
<br>  
<br>  
总结: 作者分享了提车7个月以来的5个真实用车体验。1. 配置全面是关键，包括HUD、后排座椅调节、辅助驾驶、空气悬架和大电池等，提升了日常和长途驾驶体验。2. 操控和底盘表现良好，过弯侧倾抑制好，但存在左右晃动和电门迟滞感。3. 续航焦虑逐渐消失，随用随充和高速规划使充电更便捷。4. 软件能力有待加强，辅助驾驶可用但语音助手反应慢，车机更新不频繁。5. 车身尺寸合理，空间富余，适合家庭使用。总体对极氪7X满意度较高。 </div>
                        <hr>
                    
                    <p>不知不觉提车已经 7 个月，更没想到的是已经开了超过 16000km，再开不到 4000km 就要做首保，在此分享 5 个真实用车体验。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/00489eaa72598f8f4fa22f1b595e0c2d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><hr /><h2><br /><strong>一、配置全面就是好</strong></h2><p>消费者既要又要还要没有任何错，特别是汽车这种大件，绝大多数家庭有且仅有一辆家庭用车。</p><p>当下各种新车太多太多，选车并不容易，我是通过下面三个步骤完成了购车的决策：</p><h3><strong>① 梳理用车需求</strong></h3><p>结合用车场景：接送娃上学、节假日长途自驾结合主要用车人：主要是我开、老婆偶尔开、后排主要坐小朋友</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/c765b0bb62e43caa8ab6446c0a9ca90e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3><strong>② 试驾多多益善</strong></h3><p>试驾的均为国内的新势力车型：</p><figure class="image ss-img-wrapper image_resized" style="width: 459px;"><img src="https://cdnfile.sspai.com/2025/08/12/fad9bebf38929a8472067b11e43f9677.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3><strong>③ 敢于做决策</strong></h3><p>决赛圈是蔚来 ES6 VS 极氪 7X，用了几个小时的时间，一家三口去到两个线下店实地看车，最终敲定极氪 7X。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/c22418b8976b3a503c809bc732b21d5e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/01/10/11ffe542971a674edd5e6c91be367072.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/01/10/f4219e7ecc95d3bdffafde5371250870.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/01/10/11ffe542971a674edd5e6c91be367072.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>配置全面带来的好处是在日常的使用中逐渐体现出来：</p><h3><strong>① 既有仪表盘又有 HUD：</strong></h3><p>开车的时候看 HUD 为主，对颈椎很友好</p><h3><strong>② 后排座椅可调节：</strong></h3><p>极大提升长途体验，日常体验也有显著提升</p><h3><strong>③ 辅助驾驶：</strong></h3><p>有和无就是天壤之别，高速场景和堵车场景尤其好用</p><h3><strong>④ 空气悬架：</strong></h3><p>可能一年调不了几次，但需要调整的悬架高度都是有大用处的时候</p><h3><strong>⑤&nbsp;大电池：</strong></h3><p>100 度电池的好处是显而易见的，特别是高速上的续航，如果是 450km 左右的路程，能做到中途不充电直接抵达目的地。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/26357b958592c739368ae6859d3f704d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>6 月 9 日从合肥返程的时候，路过服务区充电需要排队，于是直接没充电开回家的。全程 460km，高速里程大约450km，停好车剩余 13% 电量。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/fdbb70e99bfaa818d87124fe2bee5e8a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><strong>现在再盘点下整体配置，还想要的配置有 3 个：</strong></p><p>1. 主副驾的零重力座椅</p><p>2. 单腔空悬变成双腔空悬</p><p>3. 前排玻璃从单层变成双层<br />&nbsp;</p><h2><strong>二、能感受到的操控和底盘</strong></h2><p>操控和底盘比较微妙，特别是在网络上，针对某一款车不同人车评人的评价很可能大不一样，而对于驾驶里程十分有限的普通人来说，对操控和底盘的感知自然更不具体。</p><p>由于本人驾驶里程也才 8w 多公里，之前开的车（比亚迪唐）也只有一辆，只能浅谈 4 个直观感受：</p><h3><strong>① 过弯时侧倾抑制好</strong></h3><p>不管是日常开还是在高速上，过弯的时候都没有身体被车带着向某一侧倾斜的感受。</p><h3><strong>② 奇怪的左右晃动</strong></h3><p>过减速带和颠簸路段的时候极其明显或者说是有点突兀，相较于难以抑制的左右晃动，车子上下波动的幅度很小且感知不明显。</p><h3><strong>③ 不像 SUV的灵活度</strong></h3><p>刚提车的时候，我还是保持着上一辆车的驾驶习惯。有一天早上和老婆一起送我上学，途中一个平平无奇的变道把我们三个人都惊到。</p><h3><strong>④ 开山路时的电门迟滞感</strong></h3><p>在市区和高速上并没有这种感觉，但开山路上下坡的时候能感知到，距离人车合一还差一点点。<br />&nbsp;</p><h2><strong>三、必然消失的续航焦虑</strong></h2><p>电动车充电早就不是难题，难的是节假日出行在服务区的充电桩不足所带来的充电等待。</p><h3><strong>① 随用随充成为现实</strong></h3><p>放在几年前无法安装家充可能是影响购买纯电车的关键因素，放在现在的情景中，已经完全不是问题。随着支持快充的充电桩越来越多，充电越来越方便，30-50 分钟的补能便能支持5-7 天的用车。</p><h3><strong>② 高速长途提前做规划</strong></h3><p>各种地图 app 都能查路途中服务区充电桩的情况，根据自身情况进行灵活的规划：60%电量时补能、40%电量时补能、20%电量时补能……</p><h3><strong>③ 日趋合理的电耗</strong></h3><p>现在各大车企对电车电耗的优化都是越来越好，特别是辅助驾驶的加持下也能让高速里程更有保障。</p><h2><br /><strong>四、有待加强的软件能力</strong></h2><p>软件能力对于纯电车的重要性不言而喻，在硬件无法拉开差距的情况下，各家车型的软件水平就是其产品力的重要体现之一。</p><h3><strong>① 可用的辅助驾驶</strong></h3><p>不用管是在什么梯队，极氪 7X 的辅助驾驶在高速是可用的，强烈建议开启变道确认，避免无效变道。在城区基本不用，车多的时候还是自己开靠谱。</p><h3><strong>② 反应慢半拍的语音助手</strong></h3><p>用了几天之后，就自适应了Eva偶尔响应不及时和智障回复。即便如此，还是比 iPhone 上的 Siri 好用。</p><h3><strong>③ 车机系统更新不频繁</strong></h3><p>距离上次更新已经有 4 个月！！！！</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/69cb77654ef87833e7d2757cff3da393.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2><strong>五、尺寸与空间</strong></h2><p>就个人的感受而言，长度超过 5m 或宽度接近 2m 的车都偏大的车型，在日常使用中需要去适应车辆的时间也会更长一些。</p><h3><strong>① 合理的尺寸</strong></h3><p><br />车身尺寸为4825×1930×1666mm，车长和车宽均不会对停车造成困扰</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/4016799c97a7154753ee53e5941a667c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3 style="margin-left: 8px;"><strong>② 富余的空间</strong></h3><p style="margin-left: 8px;">轴距为2925mm，所带来的是富余的后排和后备箱空间</p><figure class="image ss-img-wrapper"><img alt="wxv_4104070863702376452" src="https://cdnfile.sspai.com/2025/08/12/article/d7b6aa126b161ea5cbdd509ad2c31a62.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><hr /><p><br />综上，极氪 7X 是一款我挺满意的一款车，满分 100 分能给到 85 分。希望我的5 个真实用车体验能对你有所帮助。</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101777</id>
            <title>写一篇漂亮的技术调研文档</title>
            <link>https://sspai.com/post/101777</link>
            <guid isPermaLink="false">https://sspai.com/post/101777</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 07:12:44 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: GitHub图标,NPM文档,实时数据,浏览器插件  
<br>  
<br>  
总结: 1. 在GitHub或NPM文档中使用精美图标能提升专业感和信任度。2. 这些图标通过shields.io等服务器实时获取数据。3. 作者模仿got包的文档制作了对比表格但过程繁琐。4. 开发了chrome-npm-comparison插件简化对比表格生成。5. 插件支持多维度对比和Markdown导出。6. 推荐了redirect-skipper插件跳过中转页面。7. 工具旨在提升技术文档的呈现效率。8. 所有工具均为开源项目。 </div>
                        <hr>
                    
                    <p>平时逛 Github 或者 NPM 网站时候，在 README.md 中或多或少都会看到一些这样的图标：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/4a613fe46e4f7f502e69a21f9d1185e7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>在枯燥的文档中加入这样的图标能让文档的观感提升不少，且可以增加读者的信任度。</p><p>读者会认为这份文档你是认真写的，且看着<strong>比较专业</strong>。</p><p><strong>认真</strong> + <strong>专业</strong> = <strong>信任</strong> 👍</p><h2>原理</h2><p>这些图标除了精美之外，它所展示的数据是实时的，这就非常酷了。</p><p>它让你文档呈现的数据永远都是准确的。</p><p>原理也较为简单，我们来解析一下这个路径：</p><p><a href="https://img.shields.io/github/stars/vuejs/core?color=white&amp;label"><strong>https://img.shields.io/github/stars/vuejs/core?color=white&amp;label</strong></a></p><p>它就是往 <code>img.shields.io</code> 这个服务器请求图片，通过一定规则拼装出请求参数，让服务器知道我们需要什么数据。</p><p>示例的地址就是告诉服务器返回一张 <strong>表示 vue 仓库的 star 数量的图片</strong></p><p>而这样的雷锋服务器目前我知道的有3个：</p><ul><li><a href="https://shields.io/" target="_blank">shields.io/</a> 支持多种图标</li><li><a href="https://flat.badgen.net/" target="_blank">flat.badgen.net/</a> 支持多种图标</li><li><a href="https://packagephobia.com/" target="_blank">packagephobia.com/</a> 只返回指定 npm 包所占用的内存大小</li></ul><p>这些服务器会根据我们的请求参数，去获取数据源，将数据包装成一个漂亮的图标，返回给客户端。</p><h2>我也想高大上</h2><p>之前逛 NPM 的时候发现 &nbsp;<a href="https://www.npmjs.com/package/got" target="_blank">got</a> &nbsp;这个包的 README.md 非常精美。作者列举了该库和其他类似库的一些对比数据，觉得非常专业。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/2f8ab4c7b8531a3cc1ef6b38bc986aa5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>看着是一个小图标，但是它展示的数据却是实时的、动态的</figcaption></figure><p>于是我在写调研报告的时候也学着写了一个这样的表格：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/8528d4e8c8b9eeb1b008ed0da3a23a06.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>截图是之前写的技术调研报告</figcaption></figure><p>表格看着是很舒服，可是编辑 markdown 的时候费了老命了。短短的一张对比表格，需要配置这么多的图片地址和图片链接，配置完了还得保证组合正确，瞬间觉得投入产出不成正比了。（除非写这样的报告可以拿奖金，否则不可能再写第二次！！）</p><p>如下文本是上面那张表格的 markdown 源码，来感受一下工作量：</p><pre class="language-markdown"><code>## npm 包对比

|                    |    [`yauzl`][ygit]    | [`extract-zip`][egit] |   [`adm-zip`][agit]   |  [`unzipper`][ugit]   |   [`archiver`][argit]   |
| ------------------ | :-------------------: | :-------------------: | :-------------------: | :-------------------: | :---------------------: |
| Issues open        |   [![][yio]][yio_a]   |   [![][eio]][eio_a]   |   [![][aio]][aio_a]   |   [![][uio]][uio_a]   |   [![][ario]][ario_a]   |
| Issues closed      |   [![][yic]][yic_a]   |   [![][eic]][eic_a]   |   [![][eic]][aic_a]   |   [![][uic]][uic_a]   |   [![][aric]][aric_a]   |
| Downloads          |    [![][yd]][yd_a]    |    [![][ed]][ed_a]    |    [![][ad]][ad_a]    |    [![][ud]][ud_a]    |    [![][ard]][ard_a]    |
| Bugs               |  [![][ybug]][ybug_a]  |  [![][ebug]][ebug_a]  |  [![][abug]][abug_a]  |  [![][ubug]][ubug_a]  |  [![][arbug]][arbug_a]  |
| Dependents         |   [![][ydp]][ydp_a]   |   [![][edp]][edp_a]   |   [![][adp]][adp_a]   |   [![][udp]][udp_a]   |   [![][ardp]][ardp_a]   |
| Install size       | [![][ysize]][ysize_a] | [![][esize]][esize_a] | [![][asize]][asize_a] | [![][usize]][usize_a] | [![][arsize]][arsize_a] |
| GitHub stars       |  [![][ystar]][ygit]   |  [![][estar]][egit]   |  [![][astar]][agit]   |  [![][ustar]][ugit]   |  [![][arstar]][argit]   |
| TypeScript support |   [![][yts]][ygit]    |   [![][ets]][egit]    |   [![][ats]][agit]    |   [![][uts]][ugit]    |   [![][arts]][argit]    |
| Last commit        |   [![][ycm]][ycm_a]   |   [![][ecm]][ecm_a]   |   [![][acm]][acm_a]   |   [![][ucm]][ucm_a]   |   [![][arcm]][arcm_a]   |
| symlink support    |  :heavy_check_mark:   |  :heavy_check_mark:   |          :x:          |      :question:       |       :question:        |

&lt;!-- https://gist.github.com/rxaviers/7360908 图标编码参考 --&gt;

&lt;!-- GITHUB --&gt;

[ygit]: https://github.com/thejoshwolfe/yauzl
[egit]: https://github.com/max-mapper/extract-zip
[agit]: https://github.com/cthackers/adm-zip
[ugit]: https://github.com/ZJONSSON/node-unzipper
[argit]: https://github.com/archiverjs/node-archiver

&lt;!-- ISSUES OPEN --&gt;

[yio]: https://img.shields.io/github/issues-raw/thejoshwolfe/yauzl?color=gray&amp;label
[eio]: https://img.shields.io/github/issues-raw/max-mapper/extract-zip?color=gray&amp;label
[aio]: https://img.shields.io/github/issues-raw/cthackers/adm-zip?color=gray&amp;label
[uio]: https://img.shields.io/github/issues-raw/ZJONSSON/node-unzipper?color=gray&amp;label
[ario]: https://img.shields.io/github/issues-raw/archiverjs/node-archiver?color=gray&amp;label
[yio_a]: https://github.com/thejoshwolfe/yauzl/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[eio_a]: https://github.com/max-mapper/extract-zip/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[aio_a]: https://github.com/cthackers/adm-zip/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[uio_a]: https://github.com/ZJONSSON/node-unzipper/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[ario_a]: https://github.com/archiverjs/node-archiver/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc

&lt;!-- ISSUES CLOSED --&gt;

[yic]: https://img.shields.io/github/issues-closed-raw/thejoshwolfe/yauzl?color=blue&amp;label
[eic]: https://img.shields.io/github/issues-closed-raw/max-mapper/extract-zip?color=blue&amp;label
[aic]: https://img.shields.io/github/issues-closed-raw/cthackers/adm-zip?color=blue&amp;label
[uic]: https://img.shields.io/github/issues-closed-raw/ZJONSSON/node-unzipper?color=blue&amp;label
[aric]: https://img.shields.io/github/issues-closed-raw/archiverjs/node-archiver?color=blue&amp;label
[yic_a]: https://github.com/thejoshwolfe/yauzl/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc
[eic_a]: https://github.com/max-mapper/extract-zip/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc
[aic_a]: https://github.com/cthackers/adm-zip/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc
[uic_a]: https://github.com/ZJONSSON/node-unzipper/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc
[aric_a]: https://github.com/archiverjs/node-archiver/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc

&lt;!-- DOWNLOADS --&gt;

[yd]: https://img.shields.io/npm/dm/yauzl?color=darkgreen&amp;label
[ed]: https://img.shields.io/npm/dm/extract-zip?color=darkgreen&amp;label
[ad]: https://img.shields.io/npm/dm/adm-zip?color=darkgreen&amp;label
[ud]: https://img.shields.io/npm/dm/unzipper?color=darkgreen&amp;label
[ard]: https://img.shields.io/npm/dm/archiver?color=darkgreen&amp;label
[yd_a]: https://www.npmjs.com/package/yauzl
[ed_a]: https://www.npmjs.com/package/extract-zip
[ad_a]: https://www.npmjs.com/package/adm-zip
[ud_a]: https://www.npmjs.com/package/unzipper
[ard_a]: https://www.npmjs.com/package/archiver

&lt;!-- BUGS --&gt;

[ybug]: https://img.shields.io/github/issues-raw/thejoshwolfe/yauzl/bug?color=darkred&amp;label
[ebug]: https://img.shields.io/github/issues-raw/max-mapper/extract-zip/bug?color=darkred&amp;label
[abug]: https://img.shields.io/github/issues-raw/cthackers/adm-zip/bug?color=darkred&amp;label
[ubug]: https://img.shields.io/github/issues-raw/ZJONSSON/node-unzipper/bug-fix?color=darkred&amp;label
[arbug]: https://img.shields.io/github/issues-raw/archiverjs/node-archiver/Bug?color=darkred&amp;label
[ybug_a]: https://github.com/thejoshwolfe/yauzl/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug
[ebug_a]: https://github.com/max-mapper/extract-zip/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug
[abug_a]: https://github.com/cthackers/adm-zip/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug
[ubug_a]: https://github.com/ZJONSSON/node-unzipper/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22bug-fix%22
[arbug_a]: https://github.com/archiverjs/node-archiver/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug

&lt;!-- DEPENDENTS --&gt;

[ydp]: https://badgen.net/npm/dependents/yauzl?color=orange&amp;label
[edp]: https://badgen.net/npm/dependents/extract-zip?color=orange&amp;label
[adp]: https://badgen.net/npm/dependents/adm-zip?color=orange&amp;label
[udp]: https://badgen.net/npm/dependents/unzipper?color=orange&amp;label
[ardp]: https://badgen.net/npm/dependents/archiver?color=orange&amp;label
[ydp_a]: https://www.npmjs.com/package/yauzl?activeTab=dependents
[edp_a]: https://www.npmjs.com/package/extract-zip?activeTab=dependents
[adp_a]: https://www.npmjs.com/package/adm-zip?activeTab=dependents
[udp_a]: https://www.npmjs.com/package/unzipper?activeTab=dependents
[ardp_a]: https://www.npmjs.com/package/archiver?activeTab=dependents

&lt;!-- INSTALL SIZE --&gt;

[ysize]: https://packagephobia.com/badge?p=yauzl
[esize]: https://packagephobia.com/badge?p=extract-zip
[asize]: https://packagephobia.com/badge?p=adm-zip
[usize]: https://packagephobia.com/badge?p=unzipper
[arsize]: https://packagephobia.com/badge?p=archiver
[ysize_a]: https://packagephobia.com/result?p=yauzl
[esize_a]: https://packagephobia.com/result?p=extract-zip
[asize_a]: https://packagephobia.com/result?p=adm-zip
[usize_a]: https://packagephobia.com/result?p=unzipper
[arsize_a]: https://packagephobia.com/result?p=archiver

&lt;!-- GITHUB STARS --&gt;

[ystar]: https://img.shields.io/github/stars/thejoshwolfe/yauzl?color=white&amp;label
[estar]: https://img.shields.io/github/stars/max-mapper/extract-zip?color=white&amp;label
[astar]: https://img.shields.io/github/stars/cthackers/adm-zip?color=white&amp;label
[ustar]: https://img.shields.io/github/stars/ZJONSSON/node-unzipper?color=white&amp;label
[arstar]: https://img.shields.io/github/stars/archiverjs/node-archiver?color=white&amp;label

&lt;!-- TYPESCRIPT SUPPORT --&gt;

[yts]: https://badgen.net/npm/types/yauzl?label
[ets]: https://badgen.net/npm/types/extract-zip?label
[ats]: https://badgen.net/npm/types/adm-zip?label
[uts]: https://badgen.net/npm/types/unzipper?label
[arts]: https://badgen.net/npm/types/archiver?label

&lt;!-- LAST COMMIT --&gt;

[ycm]: https://img.shields.io/github/last-commit/thejoshwolfe/yauzl?color=gray&amp;label
[ecm]: https://img.shields.io/github/last-commit/max-mapper/extract-zip?color=gray&amp;label
[acm]: https://img.shields.io/github/last-commit/cthackers/adm-zip?color=gray&amp;label
[ucm]: https://img.shields.io/github/last-commit/ZJONSSON/node-unzipper?color=gray&amp;label
[arcm]: https://img.shields.io/github/last-commit/archiverjs/node-archiver?color=gray&amp;label
[ycm_a]: https://github.com/thejoshwolfe/yauzl/commits
[ecm_a]: https://github.com/max-mapper/extract-zip/commits
[acm_a]: https://github.com/cthackers/adm-zip/commits
[ucm_a]: https://github.com/ZJONSSON/node-unzipper/commits
[arcm_a]: https://github.com/archiverjs/node-archiver/commits

### 选择的依据：

-   软连接的支持（编辑器内部有软连接）
-   较少的依赖
-   较多的下载量

综合以上数据，[yauzl][ygit] 是下载量最大的，但是它提供的接口相对底层。所以最终选择 [extract-zip][egit]，它是对 yauzl 的一个简单的封装。对外提供更简单的接口。
</code></pre><p>&nbsp;</p><p>手写是不可能了，但是我们是程序员啊！类似这样的配置性的东西最适合程序化了。</p><p>于是就决定开发一个浏览器插件，用来快速制作 NPM 包的对比表格。</p><p>就像逛购物商城一样，在商品详情页可以点击商品到<strong>对比列表</strong>。方便用户横向对比多个商品。</p><h2>浏览器插件</h2><p>懒是第一生产力，于是就有了 <a href="https://github.com/dogodo-cc/chrome-npm-comparison" target="_blank">chrome-npm-comparison</a> 这款浏览器插件。<a href="https://chromewebstore.google.com/detail/npm-comparison/opijdickacjhbendcbbabpgffoppphdg?authuser=0&amp;hl=zh-CN" target="_blank">Chrome 安装地址</a></p><p>该插件在 npm 的包的详情页，添加一个 「Add to npm Comparison」 的按钮。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/4bfec1503e0d18b8c97f441757bd42a3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>点击之后会生成对比表格：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/e69b152a9dc98fce48dacfb4323519d4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>点击按钮，就会追加到表格</figcaption></figure><p>&nbsp;</p><p>还提供了众多图标选项供你自由组织表格数据：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/515428dd5261adebdbaefb85bd183fbe.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>可以勾选需要对比的维度</figcaption></figure><p>表格生成之后你可以将它复制到 Markdown 或者 HTML 。</p> <p>&nbsp;</p><p><br />这样无论是你需要介绍自己的 npm 包，还是写一篇技术调研文档，都可以快速制作出一份精美的 <strong>npm 包对比表格</strong>。</p><ul><li>插件安装地址：<a href="https://chromewebstore.google.com/detail/npm-comparison/opijdickacjhbendcbbabpgffoppphdg?authuser=0&amp;hl=zh-CN" target="_blank">Chrome 安装地址</a></li><li>插件仓库地址：<a href="https://github.com/dogodo-cc/chrome-npm-comparison" target="_blank">chrome-npm-comparison</a></li></ul><h2>友情提示</h2><p>如果看文章的你在点击这些外链会看到这个页面：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/05/28/62cab31ee2f73438c1d22e54e64315cd.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>中转提示页</figcaption></figure><p>那么你可以安装我的另外一个浏览器插件 「<a href="https://sspai.com/post/99737"><strong>redirect-skipper</strong></a>」它可以让你无感跳过这些中转页面。</p><ul><li>项目地址：<a href="https://github.com/dogodo-cc/redirect-skipper"> Github</a></li><li>安装地址： <a href="https://chromewebstore.google.com/detail/redirect-skipper/bcjldhihfjnhgmkmdeojigknladnbcek?authuser=0&amp;hl=zh-CN">谷歌插件安装</a></li></ul>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101704</id>
            <title>如何根据神经科学原理快速放松</title>
            <link>https://sspai.com/post/101704</link>
            <guid isPermaLink="false">https://sspai.com/post/101704</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 06:29:20 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 费登奎斯,钟形手,神经可塑性,身体实践  
<br>  
<br>  
总结: 该练习设计受费登奎斯、艾瑞克森等体系影响，原型来自费登奎斯1981年工作坊中的"钟形手"技术。其理论依据最初基于运动/感觉侏儒图，后根据新研究更新，但实践早于神经可塑性理论被学界承认。视频初版2023年发布于B站，复刻版有所调整。原计划制作系列节目从静态放松过渡到动态练习，因恶评中断。专栏将结合多媒体形式阐述身体实践方法，后续会探讨其作用、局限及风险。 </div>
                        <hr>
                    
                    <p>该练习的设计，受到费登奎斯（Feldenkrais method）、艾瑞克森（Milton Erickson）、西斯特玛（Systema）等体系的影响。一些细节也受到其他体系的影响，暂不一一列举。<br />其原型来自费登奎斯1981年的工作坊，他晚年才开始使用这个方法，所以没有收录到他的书中。在这个练习中，手部动作细微如同钟的振动，故命名为钟形手（the bell hand）。</p><p>费氏当时的理论依据是 Wilder Penfield &amp; Edwin Boldrey 的运动侏儒图（motor homunculus）、感觉侏儒图（sensory homunculus），这似乎有些过时了，所以根据 Frank Willett、Evan M. Gordon 等的研究做了一定更新。但这个体系的出现，是基于他通过武术获得的身体直觉及其科研背景造就的思考能力，其实践领先于理论领域 —— 该体系的雏形诞生时，主流科学界尚未承认神经可塑性。</p><p>这个视频的初版，于 2023 年 8 月 8 日首发于 B 站，也是我做过的第一个视频。复刻版的内容有一定调整，且更换了高清素材。</p><p>原计划要做一个系列，写了个大纲，由几十个词汇组成，每期处理一个词汇。这个节目旨在提供静态放松的基础，后续会逐步过渡到动态和生活层面（我一向<strong>不提倡做太多静态练习</strong>）。然而刚发出来就有位疑似费登奎斯领域的用户发表恶评和引流，令我怒而弃更 —— 当时刚做视频，对互联网现状的理解还很浅，所幸这两年经过大量低素质用户的锤炼，脸皮已经很厚了（笑）。</p><p>这个专栏涉及身体实践，很多观点难以仅凭文字阐明， 所以会结合音视频等形式，试图制造一定<strong>印象</strong>，作为讨论的基础。后文还会讲到这个方法的作用、延展、局限性与潜在风险。敬请期待。</p><h2>视频版</h2> <h2>播客版</h2><div class="ss-audioSource" id="" src="https://media.transistor.fm/b52b0087/70ac5104.mp3" title="如何根据神经科学原理快速放松（两周年复刻版）">Audio</div>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101749</id>
            <title>Opal：真正让我戒手机的不是屏蔽，而是「不方便」</title>
            <link>https://sspai.com/post/101749</link>
            <guid isPermaLink="false">https://sspai.com/post/101749</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 01:55:08 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 戒手机,Opal,注意力管理,App屏蔽  
<br>  
<br>  
总结: 文章探讨了现代人尝试戒手机的常见方法及其局限性，如卸载娱乐App或使用系统自带限制功能效果不佳。作者通过使用Opal软件，发现其通过设置时间段屏蔽App、增加解锁繁琐流程的方式有效减少了无意识刷手机的行为。Opal的核心逻辑是打断用户习惯性操作，促使有意识地选择使用App，而非完全戒断信息。该软件还能针对不同场景定制专注模式，帮助培养健康习惯。最终作者强调，软件辅助之外，找到人生“主线任务”才是解决注意力分散的根本方法。 </div>
                        <hr>
                    
                    <p>现代人戒手机一般来讲无非就是卸载娱乐型App、采用系统自带的时间限制或重新使用Dumb Phone（功能机），但尝试过后要么发现对生活造成了不便，要么反馈收效甚微。曾经我也是「小红书」、「抖音」等各种APP卸载了又重新下；不断「续杯15分钟后提醒我」；手机刷不了我上电脑网页版刷……抱着死马当活马医的心态，我在某个工作日的上午安装了Opal，一周过后，我发现我的注意力终于回来了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/9334251beb4e9e9b0ff4a405466120eb.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>iPhone自带的App使用时间限制功能</figcaption></figure><p>下载并且填完一些个人需求问卷后，Opal会根据我填写的需求自动设置不同时间段要屏蔽的App，像我的工作日就被设置的比周末严格一些（上班比假期更喜欢刷手机），你也可以按照自己的需求去设置时间段、需要屏蔽的App列表并选择摆脱限制的难易度（我认为选择最简单的那一档就够用了）。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/5861d9f7ee4fc7c825fb48d9605f66b0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Opal的主界面，App屏蔽列表设置</figcaption></figure><p>乍一看，我感觉Opal这款软件和系统自带的「App限制」核心的逻辑其实差不多啊，不就是自动给容易上瘾的App设定时间段屏蔽吗？我抑制住了卸载的冲动，此时我设置屏蔽的App图标已经全都变成了黑色并且打开就是屏蔽画面。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/2e173527040e6c56d40fa2fc47933174.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>我在上班时间我打开“豆瓣”后，App变成了屏蔽画面，只有关闭退出选项</figcaption></figure><p>当我再次拿起手机准备刷小红书时， 除了屏蔽界面外没有「再使用15分钟」之类的选项，只有一个「关闭」按钮。此时要想继续使用App，我只能去Opal App主页，点击「休息一下」，然后等待10秒的时间，再手动点击「休息」（break），选择休息时长后再点一次「休息」，我才能获得最多15分钟的使用时间，时间一到，我又要重复这繁琐的操作。重复几次后，我直接按下了锁屏键。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/1073d04f1c36af8a4c0a358a310d05c2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>解除App使用限制需要操作繁琐的流程</figcaption></figure><p>至此，我终于切身体会到为什么互联网公司会在一个界面的交互、一个按钮上反复地进行调研和优化了，产品使用过程中但凡有一点不够丝滑的地方都会极大地促使用户终止下一步的行动，最终退出使用。</p><p>Opal 的思路就是把这种丝滑的体验打断了。只经过短短的3个工作日后，我发现自己下意识打开社交媒体的习惯逐渐被切断了，手机使用时间从此前的每日4个小时降低到了平均每天2小时左右，这让我感觉一天精力最充沛的时间段里，注意力更加集中。就算是感觉无聊，我也只会看向窗外发会呆或者打开笔记本利用间歇时间学习，因为打开社交媒体App的流程实在是太麻烦了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/2ab0d338af5297155aac9fbaecff5fe8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Opal的周报让我清晰看到自己手机使用时间的下降</figcaption></figure><p>Opal这种具有解锁成本的「App白名单」逻辑在桌面端使用体验也非常的一致。在Opal电脑端设置了视频、社交媒体网站之后，我每次下意识打开这些网页都会进入一个“缓冲区”，必须先去Opal操作一下才能进，而且还面临着使用时间限制。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/5f464bdfbb77ff7d5b4d7ffebbb27ca0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Opal桌面版主页</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/1347464de7567fa73f0f48939160569d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Opal桌面版设置屏蔽的网站和软件列表</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/c1dcf3627da2357661e6ccdb0f7cb256.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>打开网页即被屏蔽，需要回到Opal解锁并设置使用时间</figcaption></figure><p>Opal的核心目的不是让我完全的「信息戒断」，而是让我想清楚，我进某个App或者网页，是带着目的去搜索信息的？还是单纯无聊想打发时间。它让我把无意识刷信息流的习惯转变成有意识的选择和反思。只要我不卸载Opal，我就能坚持「少打开一次、快退出一点」的原则守住我的注意力。</p><p>除此之外，Opal还能针对如阅读、健身、睡眠等细分场景定制每天的专注时刻，进一步减少你培养阅读、健身习惯时的信息干扰，还有你睡前看手机的频次。这些功能和上述的基础功能一样，目前都是免费使用的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/0c4ae3eda3c68e84b4b02444a9842bdf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Opal各类专注场景设置</figcaption></figure><p>对于我来说，Opal解决我的信息上瘾有着独门「秘方」，但也不是万能钥匙。极端情况下你总能想出绕开限制的办法或者干脆卸载Opal。根本上，我认为软件辅助之外，我们还是要找到人生的「主线任务」，它可以是你热爱的事业、是家人与爱人的相处、是某项让你沉浸其中的爱好……</p><p>缺失「主线任务」的人生，哪怕没有手机和互联网，那无处安放的注意力也将被其他廉价的刺激替代。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101770</id>
            <title>AI图像生成技术发展史：从像素艺术到智能创作的技术革命</title>
            <link>https://sspai.com/post/101770</link>
            <guid isPermaLink="false">https://sspai.com/post/101770</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 01:51:17 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: AI绘图,神经网络,深度学习,扩散模型

<br>
<br>
总结: 文章回顾了AI绘图技术的发展历程，从1960年代Sketchpad的诞生到现代扩散模型的应用。早期突破包括1963年Sketchpad开创计算机绘图，1979年Neocognitron奠定CNN基础，1985年玻尔兹曼机引入统计学习方法。2006年后深度学习兴起，2013年VAE实现创造性图像生成，2014年GAN通过对抗训练提升图像质量。2021年DALL-E和CLIP实现文本到图像的跨模态转换，2022年扩散模型和Stable Diffusion开源推动AI绘图进入成熟期，使高质量图像生成普及化。 </div>
                        <hr>
                    
                    <blockquote><p>如果你告诉1960年代的计算机科学家，有一天机器能够仅凭一句话就画出逼真的画作，他们可能会觉得你在说科幻小说。但这个看似不可能的梦想，经过六十多年的技术积累，真的实现了。</p></blockquote><p>从最初笨拙的几何图形绘制，到今天能够生成"红蓝色动力甲蜘蛛侠背上带蜘蛛义肢全身形象"并生成精美图像，这个效果如今已经媲美曾经设计师一周的工作量，但是这条路走得并不容易。每一个技术突破的背后，到底AI是如何一步步学会"画画"的呢？</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/6aa7d93c2d9ea0e03b9ab64c8c64fd55.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2 style="text-align: center;">早期探索：当计算机第一次拿起"画笔"（1960-2000年）</h2><h3 style="text-align: center;">一切从Sketchpad开始</h3><p>1963年说起。MIT的博士生Ivan Sutherland创造了一个叫Sketchpad的程序，这可能是人类历史上第一个真正意义上的计算机绘图软件。在那个年代，大多数人连计算机长什么样都没见过，Sutherland就已经在用光笔直接在屏幕上画图了。Sketchpad奠定了现代计算机图形学和人机交互（HCI）的基础，为后来的AI绘图埋下了种子。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/b09455821952b801d879a7638b82fe4a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Sketchpad的程序</figcaption></figure><h3 style="text-align: center;">神经网络的早期萌芽</h3><p>同一时期，另一条技术路线也在悄悄发展。1979年，日本科学家福岛邦彦提出了Neocognitron一个模仿视觉皮层工作方式的神经网络。当时的人们可能没有意识到，这个看起来很学术的模型，被认为是现代卷积神经网络（CNN）的重要先驱，其实也是是今天所有深度学习图像处理技术的鼻祖。</p><p>Neocognitron的设计灵感来自于Hubel和Wiesel对猫视觉皮层的研究，模拟了视觉皮层中简单细胞和复杂细胞的工作机制。在Hubel-Wiesel模型里面，<strong> 通过动物的视觉刺激， 来观察了脑部接受的电信号来提出假设模型。</strong></p><p>而福岛提出了类似的神经网络模型用来做模式识别的进程。先识别边， 然后识别特征， 然后模式识别。 这不就是我们介绍深度学习里面用的最多的东东？</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/ac43a0ed79ad808f9179661aeb01afc8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Hubel和Wiesel的研究</figcaption></figure><p>并且为此构建了网络模型， 是个多层网络模型， 并且命名了简单单元和复杂单元的映射， 作为每个层次识别的层结构。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/942555f28db564e6b1d3d1bec3a1545f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>1980年推出的neocognitron是<strong>第一个真正意义上的级联卷积神经网络</strong></figcaption></figure><p>1985年，Geoffrey Hinton（就是那个后来获得诺贝尔奖的"深度学习之父"）和同事们发明了玻尔兹曼机。这个名字听起来很高深，其实核心思想很直观：<strong>让机器通过统计学的方法来理解数据的规律</strong>。就像人类通过观察大量画作来理解什么是"美"一样。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/b49e1c93d576491ded75c84c7e76efee.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><strong>玻尔兹曼机的核心奥秘在于能够“学习”并找出数据中隐藏的模式</strong>。你可以把它看作是一个能够通过调整内部连接（我们称之为“权重”）来理解复杂信息的机器，它不像传统程序那样需要你一步步告诉它怎么做，而是能够自己摸索着学习。这个过程之所以被称为“玻尔兹曼”。</p><blockquote><p>玻尔兹曼机就是一个装满开关和磁铁的盒子，它通过随机拨动开关，让盒子整体越来越“舒服”（能量最低）。它还能通过看我们给它的“案例”，学会调整哪些开关之间该用吸引磁铁，哪些该用排斥磁铁。</p></blockquote><h3 style="text-align: center;">深度学习的"觉醒"</h3><p>2006年是个重要的年份。Hinton在《Science》杂志上发表了一篇划时代论文《Reducing the Dimensionality of Data with Neural Networks》，证明了深度神经网络可以被有效训练。这听起来很技术化，但简单说就是：机器终于学会了如何从复杂的数据中提取有意义的特征。</p><blockquote><p>这就像是给了机器一双能够理解世界的"眼睛"。有了这双眼睛，后面的故事才真正开始。</p></blockquote><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/2933ebf6cbcfe56b7a12d51bc581bf72.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2 style="text-align: center;">深度学习时代：机器开始"理解"图像（2010-2016年）</h2><h4 style="text-align: center;">变分自编码器（VAE）：第一次真正的"创作"</h4><p>2013年12月，两位荷兰科学家Kingma和Welling发布了<strong>变分自编码器（VAE）</strong>。这个技术的厉害之处在于，<strong>它不仅能复制已有的图像，还能创造出全新的、从未见过的图像</strong>。</p><p>把概率图模型的“变分推断”和神经网络的“反向传播”无缝拼在一起：</p><p>编码器把输入 x 变成隐变量 z 的概率分布（而不是一个点）；解码器再把 z 还原成 x 的分布；目标函数是“重构误差 + KL 散度”，既能生成新数据，又能给出似然估计。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/13d8be8e2a6dfd1b7e2d5329ed599bf0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/5dafb6996ecc89cc62d2b73e48e187e7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><blockquote><p>想象一下，如果你教一个孩子画苹果，传统的方法是让他模仿现有的苹果画。但VAE就像是教会了这个孩子理解"苹果"这个概念的本质，然后他就能画出各种不同的苹果，甚至是世界上不存在的苹果品种。</p></blockquote><h3 style="text-align: center;">GAN的诞生：一场"艺术较量"</h3><p>2014年6月的一个晚上，在蒙特利尔的一家酒吧里，Ian Goodfellow和朋友们正在讨论如何让机器生成更好的图像。当朋友们提出各种复杂的数学方法时，Goodfellow突然想到了一个绝妙的点子：为什么不让两个神经网络互相竞争呢？</p><p>就这样，生成对抗网络（GAN）诞生了。<strong>一个网络专门负责"画画"（生成器），另一个网络专门负责"鉴定真假"（判别器）。两者在不断的对抗中互相提高，就像真正的艺术家在竞争中成长一样。</strong></p><p>GAN 的核心思想是同时训练两个深度神经网络：</p><ul><li>生成器 Generator：负责“绘画”一些看起来与真实数据无异的图片。</li><li>判别器 Discriminator：像一位“质检员”，判断输入的图片究竟是真实样本还是 G 伪造的。</li></ul><p>在训练过程中，G 和 D 像打擂台的对手：G 不断“造假”，D 不断“打假”。随着回合增加，G 的赝品愈发逼真，D 的火眼金睛也愈发锐利。最终，当 D 再也分不清真假时，G 就学会了如何产出高质量的新数据。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/4b9bbc6871ae89095dc1f1a8ec4059f8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>生成对抗网络（GAN）</figcaption></figure><p>尽管 GAN 已经能合成令人惊艳的图像，但仍有两个痛点：</p><ol><li>训练成本高：对抗式训练既耗时又吃显卡，稍不注意就可能把 GPU 跑崩。</li><li>局部编辑难：GAN 对整个图像“一知半解”，很难精准地只改一只眼睛而不影响整张脸。</li></ol><h3 style="text-align: center;">Transformer：注意力机制的革命</h3><p>2017年，Google的研究团队发表了一篇名为"Attention is All You Need"的论文，提出了Transformer架构。这个看起来专注于自然语言处理的技术，实际上为整个AI领域带来了一场革命。</p><p>Transformer的核心创新是"注意力机制"——让AI能够专注于最重要的信息，就像人类在阅读时会重点关注关键词句一样。这种机制不仅让机器更好地理解语言，也为后来的多模态AI奠定了重要基础。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/ffd31d9e0e530be30efe5fa606623cf9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Transformer</figcaption></figure><blockquote><p>最初，人们可能没有意识到Transformer会对图像生成产生多大影响。但这个架构的优雅和强大很快就显现出来：它能够处理任意长度的序列，能够并行计算，最重要的是，它为不同模态（文字、图像、音频）之间的融合提供了统一的框架。</p></blockquote><h4 style="text-align: center;">StyleGAN：给AI艺术家更多控制权</h4><p>2018年底，NVIDIA再次突破，推出了StyleGAN。这个技术最了不起的地方在于，<strong>它让AI不仅能画得像，还能画得"有风格"。</strong></p><p>想象一下，传统的AI就像是只会临摹的学徒，而StyleGAN就像是有了自己风格的艺术家。你可以告诉它："画一个人，但要有梵高的笔触风格"，或者"保持这个人的五官，但改变发色和表情"。</p><p>大家的QQ里也出现了同样的功能，简单来说，就是可以把照片变成梵高风格：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/ce26aeed5056d8b7a4aa177f6a826598.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>StyleGAN</figcaption></figure><h4 style="text-align: center;">VQ-VAE-2：分层思考的智慧</h4><p>2019年，DeepMind的研究者们想出了一个聪明的方法：VQ-VAE-2。<strong>这个系统模仿人类画画的思维方式——先构思整体布局，再添加具体细节。</strong></p><p>顶层网络负责理解"这是一张海边日落的照片"这样的宏观信息，底层网络负责处理"海浪的纹理应该是什么样的"这样的细节问题。这种分层处理的思想，为后来更先进的生成模型提供了重要启发。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/a0b4751516f6100fc5e42cf504bd7f49.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>VAE原理</figcaption></figure><h2 style="text-align: center;">理解语言的AI画家：多模态时代的到来（2020-2021年）</h2><h4 style="text-align: center;">DALL-E：会读文字的AI画家</h4><p>2021年1月，OpenAI发布了DALL-E，这是一个历史性的时刻。第一次，<strong>我们有了一个真正能够理解人类语言并将其转化为图像的AI。</strong></p><p>DALL-E有12亿个参数，就像一个拥有12亿个"神经元"的大脑。你可以告诉它"一只戴着侦探帽的鳄鱼在下雨天查案"，它就能画出来。更神奇的是，即使是从未在训练数据中见过的奇异组合，它也能合理地创作出来。与当时主流的 GAN 路线不同，DALL·E 把文本和图像都离散化为 token，再用自回归 Transformer 统一建模，从而首次展示了“一句话出图”的可行性</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/e6be0dacbca8a75b3f837ae68bcee98a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>DALL-E这个名字象征着艺术和技术的统一，“DALL”向西班牙艺术家萨尔瓦多·达利致敬，“-E”指的是受欢迎的迪士尼角色Wall-E。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/bba01a6b034df040409ba09890f468a6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>DALL·E 1 的“文字→图像”流程拆成了 4 个你一眼就能看懂的小盒子，可以把它想象成 “写作文→画草图→上色→交卷” 的四步：</p><ol><li>BPE Tokenizer 你敲进去一句话，它先把每个字切成小“积木”（Token），就像把“一只穿西装的猫”切成 <code>一只 / 穿 / 西装 / 的 / 猫</code> 这样的编号。</li><li>dVAE 编码器 真正的照片太大，机器不好直接画。于是先有一个“压缩大师”把参考图压成 32×32 个小方格，每个方格用一个“色号”（codebook 里的编号）表示，变成一张“马赛克草图”。</li><li>Transformer 大脑 现在作文（文字 Token）和草图（马赛克编号）都准备好了。 Transformer 像一位“语文老师兼美术老师”，它一边读作文，一边按顺序猜下一个方格该填哪个色号，直到 32×32 格全部写完——这就是“自回归”地画图。</li><li>dVAE 解码器（也是 VAE 解码器） 最后一步相当于“上色放大”：把 32×32 的草图还原成 256×256 的真彩色高清大图，交卷！</li></ol><p>一句话总结：</p><p>“文字 → 小积木 → 马赛克草图 → Transformer 猜色号 → 上色放大 → 最终图像。”</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/c57000032c6c5feffdb19b402277cfe4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这一技术路线带来了三大突破：</p><ol><li><strong>跨模态对齐：</strong>文本语义与视觉元素精准对应，支持“穿西装的牛油果坐在法庭上”这类复杂组合。</li><li><strong>零样本泛化：</strong>无需针对特定类别微调，即可生成训练集里从未出现过的概念。</li><li><strong>局部可控：</strong>通过修改文本提示词或 token 掩码，就能重新绘制图像的局部区域，解决了 GAN 难以“只改一处”的痛点。</li></ol><p>DALL·E 的出现，标志着“文本→图像”生成进入可商用阶段，也为后续的 DALL·E 2、Stable Diffusion、Midjourney 等模型奠定了架构基础。</p><h3 style="text-align: center;">CLIP：视觉与语言的桥梁</h3><p>同样在2021年，OpenAI还发布了CLIP（Contrastive Language–Image Pre-training对比式语言-图像预训练），这个技术虽然不直接生成图像，但它做了一件同样重要的事：建立起了视觉和语言之间的联系，核心目标是<strong>用自然语言监督来训练一个能同时理解文本和图像的通用表征。</strong></p><p>CLIP就像是一个双语翻译官，能够理解图像的含义，也能理解文字的含义，并且知道它们之间的对应关系。这为后来所有的文本到图像生成系统提供了"语言理解"的基础能力。</p><p>CLIP通过利用大规模图文配对数据（约 4 亿条），通过对比学习让文本编码器和图像编码器在同一个向量空间里学会对齐语义。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/5529682cd9bceb9029e8463cb6c5df1f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>图像和文本编码器的对比学习过程</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/332c8be00cc21ad526567c576b7bf818.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>图像和文本编码器进行匹配的过程</figcaption></figure><h2 style="text-align: center;">扩散模型革命：AI艺术的成熟时代（2022-至今）</h2><h4 style="text-align: center;">扩散模型：从噪声中诞生的艺术</h4><p>扩散模型的核心思想其实很诗意：<strong>从纯粹的噪声开始，一步步去除噪声，最终"显现"出清晰的图像。就像雕塑家从一块粗糙的石头中雕出美丽的雕像一样。</strong></p><p>这个想法最早来自2015年斯坦福大学的研究，他们受到物理学中分子扩散现象的启发。想象一滴墨水在水中慢慢扩散，最终变成均匀的灰色。扩散模型就是要学会这个过程的"倒放"——从均匀的灰色重新聚集成清晰的墨水滴。</p><p>扩散模型灵感源于热力学中的“扩散”过程，分为两个步骤：正向扩散过程和反向扩散过程。</p><ul><li><strong>正向扩散过程：</strong>将初始图像通过基于马尔可夫链原理被逐渐加入随机“噪声”，一般这个过程会迭代上千次进行降噪过程，将原始图像逐渐变成纯粹的随机噪声。</li><li><strong>反向扩散过程：</strong>就是如何“反向”去噪，通常会训练一个神经网络（通常用U-Net）预测每一步需要减去的噪声，逐步去除噪声还原数据。随着这一过程的进行，原始数据的清晰度和细节逐渐显现。</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/afe8f369568f1d740acc25845a442bab.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>到了2020-2021年，研究者们发现扩散模型在图像生成质量上竟然超越了GAN，而且训练过程更加稳定。这就像发现了一个既有天赋又很听话的学生，自然引起了全行业的关注。、</p><h3 style="text-align: center;">Midjourney的出现开启ai绘图纪元</h3><p>2022年7月，一个小团队推出了公测的 Midjourney，打破了 AIGC 领域的大厂垄断。作为一个精调生成模型，以聊天机器人方式部署Discord，目前有980万用户，</p><p>2022年8月，游戏设计师 Jason Allen 凭借 AI 绘画作品《太空歌剧院》获得美国科罗拉多州博览会“数字艺术/数码摄影“竞赛单元一等奖，“AI 绘画”引发全球热议。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/f9bce7d2072385ff2eab1eed7d5abd57.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3 style="text-align: center;">Stable Diffusion：开源的力量</h3><p>2022年8月，Stability AI做了一个大胆的决定：将Stable Diffusion完全开源。这就像是把一个原本只有少数人能用的昂贵艺术工具，免费分享给了全世界。</p><p><strong>Stable Diffusion的厉害之处不仅在于生成质量高，更在于它能在普通的消费级显卡上运行</strong>。为什么叫 Stable？ 不是数学意义上的“稳定”，而是相对早期像素级扩散模型，显存占用低、训练收敛稳、社区生态繁荣。突然之间每个人都可以在自己的电脑上拥有一个AI艺术家。这种技术民主化的影响是革命性的。一夜之间，社交媒体上充满了AI生成的精美图像，各种基于Stable Diffusion的应用如雨后春笋般涌现。从专业设计师到普通用户，每个人都可以成为"AI艺术的导演"。</p><p>基于潜在扩散模型（LDM）的架构，Stable Diffusion在保持生成质量的同时大大降低了计算需求</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/2af42820d30f8c1c456f9023bb889580.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Stable Diffusion架构图，展示VAE编码器-解码器和UNet去噪过程</figcaption></figure><p>Stable Diffusion 并不是单个模型，而是 “文本编码器 → 潜空间扩散器 → 图像解码器” 三段式流水线，用潜空间换效率，用文本嵌入做方向盘，把 1000 步扩散压到 50 步就能跑在消费级显卡上。</p><ul><li>CLIP 把文字变成向量：77 个 token，每个 768 维，语义浓缩。</li><li>U-Net 在潜空间里“降噪”：从纯噪声张量一步步减去预测噪声，得到 4×64×64 的干净潜图。</li><li>VAE 负责“放大”：把潜图解码成高清 512×512 像素图，完成出图。</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/d0240967daf2abc34a1b22eab98b241d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><hr /><p>当前图像生成（“生图”）领域，主流技术路线主要有两类：<strong>自回归模型</strong>与<strong>扩散模型</strong>。二者都能从文本、草图或多模态条件生成高质量图像，但在建模方式、训练与推理流程、可控性与速度等方面存在显著差异。后续我会继续出品主流模型的区别和原理讲解～</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101693</id>
            <title>插件+AI的探索，AI笔记整理助手pickit</title>
            <link>https://sspai.com/post/101693</link>
            <guid isPermaLink="false">https://sspai.com/post/101693</guid>
            <pubDate></pubDate>
            <updated>Mon, 11 Aug 2025 23:05:27 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: AI笔记整理助手, 网页插件, 康奈尔笔记法, 费曼学习法  

总结: 本文介绍了作者开发AI笔记整理助手“Pickit”的思路和过程。该工具通过浏览器插件快速摘录网页文本，结合AI智能体进行自动整理，融合康奈尔笔记法和费曼学习法，输出结构化的笔记文档。核心功能包括快捷键摘录、来源记录、JSON导出及与Coze平台的AI工作流对接，最终在飞书生成包含关键词、原文、总结和教学尝试的标准格式文档。工具适用于浏览器阅读场景，支持移动端回顾，但存在无法记录软件内文本和图片等局限性。文末提供了插件下载和智能体配置指引。 </div>
                        <hr>
                    
                    <h2>前言</h2><p>本文主要讲述我搭建整个AI笔记整理助手的思路，并在文尾提供已完成的插件文件和通过修改coze密钥来使用自己的智能体的相关指引。</p><h2>想法的起始</h2><p>最近在学习一些新的知识，发现日常都是在工作中或者在家中，通过一些论坛或者网站阅读文章后，然后把觉得需要记录的句子或者段落记录下来。</p><p>但是我经常性地为了图省事，经常性地直接把文本直接复制到笔记软件里，想着后面回过头来会看一下。时间一长，就发现笔记本里已经堆满了不同的单句、段落，有时候甚至想不起当时为什么会记录这些内容。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/92963e182b1c0881f8a1d5cf01ba6af0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>把格式也复制下来，笔记排版会更加混乱</figcaption></figure><p>不知道是否也有人和我遇见了一样的问题，我回顾一下了我的笔记摘录路径，试图找出是哪个环节造成了这样的情况。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/13ed048c97391503d00ac377535bfe52.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><ul><li><strong>文章阅读：</strong>浏览器阅读的文章带有不同的格式的文本，不同网站使用的文本格式更是不同，直接复制粘贴会把格式带上；</li><li><strong>文本摘录：</strong>通常需要笔记本软件进行辅助，一般会根据当前的记录主题创建目录再进行摘录；如果需要记录来源网址，则需二次记录。</li><li><strong>摘录文本整理：</strong>一般初步摘录的文本时比较凌乱的，需要时间整理，或者调整格式来达到自己想呈现的笔记效果。</li><li><strong>回顾：</strong>一般在上班或者下班路上进行回顾，需要能用手机进行阅读；而且面对未整理的文档，阅读欲会大大降低。</li></ul><p>归纳了几个我的核心需求点：</p><ul><li><strong>网页的阅读环境下能快速摘录文本；</strong></li><li><strong>自动按我的想法整理文本，能够帮我加强对某些内容和定义的记忆；</strong></li><li><strong>能通过手机进行回顾。</strong></li></ul><p>思考过后，想到之前做的一款插件（<a href="https://sspai.com/post/101285">WordPilot英语学习插件搭建 - 少数派</a>、）可以作为不错的思路延展，既然已经可以记单词，自然也可以做进一步的延展，也用来记录笔记。</p><p>基于前面的核心需求点，已经可以有整个大致思路：<strong>抓手获取、大脑思考、载体承载结果</strong>；我想要的是一个只需要<strong>“拾取”（pick it up）</strong>就能用起来的工具。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/c10bbf136cff7fe7b83d660412efcc84.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>「抓手」：网页插件工具</h2><p>照例还是使用VS code和augment进行插件开发。</p><p>绘制简单的原型图：</p><figure class="image ss-img-wrapper image_resized" style="width: 563px;"><img src="https://cdnfile.sspai.com/2025/08/08/365c0183df5c45a8f05c76c58a2635f0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>原型图草图</figcaption></figure><p>编写初步的的PRD文档，确定核心的必要功能，不需要一步到位完整列出所有功能，只需要讲述完整的项目形态，以及能想到的一些功能。</p><figure class="image ss-img-wrapper image_resized" style="width: 393px;"><img src="https://cdnfile.sspai.com/2025/08/08/a8f2815c6b2026418ed8921c1655284a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>原型和初步的PRD不代表插件的最终形态，只为了给AI有一个整体上的概念，确保产品的关键主干在自己的把控之下，其他部分可以在后续与AI的交流中可以不断完善。</p><p>最后在沟通的过程中，完成具备记录功能的插件「Pickit」的初步产品形态，以下为一些核心的功能点：</p><ul><li>抽屉式功能悬窗触发；</li></ul><figure class="image ss-img-wrapper"><img alt="触发弹窗.mp4 [video-to-gif output image]" src="https://cdnfile.sspai.com/2025/08/09/article/382f88b5606d2f66d1e2aa1cbeb5485e.gif" /></figure><ul><li>部分无限制网站可通过快捷键Alt+p直接获取文本进行摘录，同时记录文本的来源；</li></ul><figure class="image ss-img-wrapper"><img alt="20250809_221116.mp4 [video-to-gif output image]" src="https://cdnfile.sspai.com/2025/08/09/article/9e6bde075878286c88867694ce7afb7e.gif" /></figure><ul><li>部分限制网站无法使用快捷键（如微信读书、知乎等），可先复制，再粘贴到输入框中保存，也会同时记录下摘录文本的来源；</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/09/e19b0cbeb359fbc6db16e4388c2330a4.gif" /></figure><ul><li>支持可导出CSV格式表格在本地备份。</li></ul><figure class="image ss-img-wrapper"><img alt="20250809_224734.mp4 [video-to-gif output image]" src="https://cdnfile.sspai.com/2025/08/09/article/79d18c2aee6a56aaeda4eaffc5868c6c.gif" /></figure><p>除了以上功能，我在这个初步的版本还预留了一个导出JSON格式文件的功能，指定了输出的JSON格式，作为输入为与AI整理分析的智能体进行对接做准备。这次产品的「抓手」已经完成。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/09/01a0bda93ef84000e515dc659637c52b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>「大脑」+「载体」：AI分析整理智能体</h2><p>继续采用对个人使用更为友好的coze，在这个部分，完成「大脑」的搭建，以及「载体」的选中，是支撑整个AI笔记整理助手的核心流程，需要在该部分完成流程如下：</p><figure class="image ss-img-wrapper image_resized" style="width: 538px;"><img src="https://cdnfile.sspai.com/2025/08/09/6911ccf7234fe6c7e2a976a37724dd55.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>搭建后的整体工作流如下：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/09/06816686cb0f70b6416ab0b85bbf2f1b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>JSON输入</h3><p>工作流的起始的节点，在上一步「抓手」搭建中已经确定输入数据的形式，可使用JSON导出功能导出的示例数据，作为该工作流的入参测试数据。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/09/9fd6821d31a3d3f709d0212d2c68e0b9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3><strong>大模型分析整理</strong></h3><p>大模型分析整理环节主要使用了大模型的分析节点，这里的重点是提示词的编写，决定你最终想输出的是怎样的一份笔记成果。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/09/24ee0c9b7dc4bd19ddf7c89ebc8b6fe1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/e16f46c36177e707ca4b96e3dee957d1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>注意调整最大回复长度</figcaption></figure><p>我希望 AI 能帮我实现的，是从<strong>康奈尔笔记法与费曼学习法</strong>中汲取灵感、融合后形成的构想。</p><ul><li>提炼关键词；</li><li>将摘录的笔记分类；</li><li>并帮我做出内容提炼总结；</li><li>以及能够引导我向别人复述相关的定义。</li></ul><p>总结四点，最后输出应具备以下结构：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/8bff91b773c4f7381eba3a1679db72fc.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>最后在大模型组件下完成的提示词编写，即完成了<strong>大模型分析整理</strong>的环节，经过多次测试后，我完成的提示词如下，这里可以按照实际的个人需求进行编写。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/09/693faea3e34b2d8515ddc2456610950f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>输出到载体</h3><p>该节点主要是输出载体的组件的选择，经调研，发现有两个组件符合我的要求。</p><p>第一个是<strong>Notion的create_page插件，</strong>支持创建一个新页面，用户可以在其中输入想要的内容。而Notion是我最近常用的一个笔记软件，完美符合我的「载体」要求。</p><p>但是经过测试后，发现了一个缺点，就是创建的新页面笔记内容被限制在了2000字以内，在我要求记录原文的前提下，2000字远远不够，只能放弃使用该组件。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/3d279d9415f8aa94b43641698919c9ba.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>第二个是<strong>飞书云文档的create_document插件</strong>，支持创建空文档和带内容的文档，支持 markdown 语法创建。这个插件比Notion更好的是，更长的文本输出，且支持markdown格式，这样能让我的笔记通过整理成markdown格式输出后，就能有完整的格式结构。最后，我也是选择了该插件作为「载体」。</p><figure class="image ss-img-wrapper image_resized" style="width: 603px;"><img src="https://cdnfile.sspai.com/2025/08/10/809eb85ac9623974068d43241df81975.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>并且用了一个时间插件，作为标题输出。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/a176cc23c60a3bc60a9b404272013e96.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>智能体接入</h3><p>整个工作流搭建完毕并测试通过后，发布为工作流，供后续的的接口调用。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/41c2175b6b51434bcdadc71877d59c59.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>在扣子API中找到执行工作流，输入自己的的token（具体参考<a href="https://www.coze.cn/open/docs/developer_guides/authentication">鉴权方式概述 - 文档 - 扣子</a>。）和workflow_id后，将接口复制提供给Augment进行对接，把原有的JSON导出功能改造为调用AI智能体智能体功能。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/f1b41737d0f68cda64dd917b8bf474a6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>至此，我获得了我所需要的一个完整形态的AI笔记整理助手，筛选出摘要笔记后，点击AI按钮，触发笔记整理，在飞书中生成整理后的云文档，<strong>最终形成一个具备标准格式且具有[关键词]、[笔记原文、来源]、[笔记总结]、[教学尝试]四个模块的可读文档。</strong></p><p>最终的实现效果如下：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/3e2ee0b0681df9b760248827f70caa35.gif" /></figure><p>同时可以在移动端的飞书中查看生成的云文档。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/32f42f6688e479d6c73a30c1bde30ef8.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>写在最后</h2><p>AI笔记整理助手「pickit」适用于浏览器阅读的场景，能帮助我整理当日的摘录文本后，在上下班的路上进行查看回顾，并能引导我进行内容复述加强记忆，但仍然存在不少缺点：</p><ul><li>受限于浏览器场景，无法记录在软件中阅读的文本内容；</li><li>部分无法进行复制、且服务调用快捷键的网站无法进行记录；</li><li>只适用于纯文本类的阅读整理，不适用于需要图片保存的场景，也无法进行快照。</li></ul><p>感兴趣的朋友可下载已完成的插件，并搭建自己的coze智能体进行接入使用，可直接替换token和workflowID进行使用，具体操作参考压缩包中的<strong>智能体调用配置说明.md</strong>。</p><p>&nbsp;</p><blockquote><p>网盘链接: https://pan.baidu.com/s/1CohnmIPaO9kPX3rXZZfoKw?pwd=a82p</p></blockquote><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101744</id>
            <title>Archlinux 笔记本省电设置</title>
            <link>https://sspai.com/post/101744</link>
            <guid isPermaLink="false">https://sspai.com/post/101744</guid>
            <pubDate></pubDate>
            <updated>Sun, 10 Aug 2025 21:54:21 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Linux省电, TLP, PowerTOP, 电池优化

<br>
<br>
总结: 本文介绍了在Archlinux系统上通过PowerTOP和TLP工具优化笔记本电池续航的方法。作者对比了MacBook和Windows笔记本的续航表现，指出Linux默认配置下续航较短的问题。核心方案包括安装配置TLP电源管理服务、调整CPU调频驱动(amd-pstate)、设置能源性能偏好(EPP)、管理电池充电阈值等。通过图形工具TLPUI进行可视化配置，最终将功耗控制在8-10w，使85Wh电池实现约8小时续航。文章还区分了插电和离电时的不同优化策略，兼顾性能和续航需求。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;"><strong>Matrix 首页推荐</strong>&nbsp;</p><p style="margin-left: 0px;"><a href="https://sspai.com/matrix">Matrix</a>&nbsp;是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&nbsp;</p><p style="margin-left: 0px;">文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><hr /><h2>背景</h2><p>我一直很羡慕 Mac 笔记本，尤其是 MacBook Air，轻薄便携的机身与惊人的续航几乎就是它的标志。通过 MacOS 系统和 M 系列芯片的软硬件深度整合，苹果给 MacBook Air 带来的省电体验实在是让人印象深刻。</p><p>相比之下，Windows 笔记本虽然难以完全复刻这种表现，但随着 AMD 和 Intel 在芯片架构与制程工艺上的进步，加上各大 OEM 厂商的省电模式与大容量电池的配合，现在的 Windows 笔记本也能做到办公场景下 8~10 小时的续航。其中的佼佼者，如 Lunar Lake 系列的笔记本，已经达到甚至超越了 Mac。</p><p>然而，我的笔记本上运行的则是 Archlinux。由于几乎没有进行过任何电源优化，即使这台笔记本拥有 85 Wh 的电池，离电续航却往往只有 3~5 小时。于是为了提示笔记本的离电使用时间，我决定探索一下 Linux 上的省电方案。</p><h2>核心工具</h2><p>Linux 下有两款工具可以用来协助用户进行功耗控制：PowerTOP 和 TLP。</p><ul><li>PowerTOP：顾名思义，类似 <code>top</code>，用于监控系统中各个软件与硬件组件的功耗情况，并能生成详情报告与优化建议。即使不使用它来直接进行具体的配置，它本身依然是一个非常优秀的功耗分析工具，可以帮助定位设备上主要的耗电来源。</li><li>TLP：这是一款功能丰富的命令行工具，能够在无需深入研究技术细节的情况下，轻松延长笔记本电脑的续航时间。TLP 默认针对电池寿命进行了优化，并且开箱即用地实现了 PowerTOP 的推荐配置。因此大部分情况下，只需要安装并启用 TLP 服务，就可以得到不错的省电效果。</li></ul><h2>基础措施</h2><p>在启用 TLP 之前，先调整一些离电状态下的基础配置（如屏幕亮度与键盘背光）。这些设置通常已集成在桌面环境的电源管理中，可以立即减少功耗。以 KDE 为例，可在“系统设置 → 电源管理”中，对电池供电时的屏幕亮度与键盘背光进行调节。我自己的设置是将屏幕亮度降低到了 20%，并完全关闭键盘背光。因为我离电场景多是在室内光照环境下，不需要更高的屏幕亮度和键盘背光。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/f3e566d726aeda3d14039a08ac29c8eb.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>另一个容易被忽略的功耗来源是桌面环境的动态组件，例如天气挂件、系统监控以及动态壁纸等。这些组件在离电状态下仍然可能会占用不少的系统资源，从而拖累整体的续航时间。可以根据自身的需求，调整这些组件的运行策略，例如：天气类挂件可以延长数据的刷新间隔，动态壁纸组件也可以设置为电池模式时停止动态特效。这样减少动态组件的活动频率，也可以进一步延长使用电池时的续航。</p><p>接下来，就是安装并启用 PowerTOP 和 TLP：</p><pre class="language-bash"><code># 安装 PowerTOP（功耗分析工具）
sudo pacman -S powertop

# 安装 TLP（实际的电源管理服务）
sudo pacman -S tlp

# 安装 tlp-rdw（提供根据特定事件启用或禁用蓝牙/Wi-Fi和WWAN设备的功能，需要NetworkManager）
sudo pacman -S tlp-rdw 

# 启用 TLP 服务（可以使用 --now 参数立即启动服务）
sudo systemctl enable tlp.service

# 启用 tlp-rdw 需要的 NetworkManager-dispatcher.service 
sudo systemctl enable NetworkManager-dispatcher.service

# 屏蔽 systemd-rfkill 相关服务避免冲突，确保 TLP 的无线电设备切换选项正常工作
sudo systemctl mask systemd-rfkill.service 
sudo systemctl mask systemd-rfkill.socket</code></pre><p>启动 TLP 服务后，可以通过以下命令检查其运行状态：</p><pre class="language-bash"><code>sudo tlp-stat -s</code></pre><p>若一切正常，应该可以看到 TLP 输出的系统信息和 TLP 服务状态。</p><p>以上就是一个基本的电源管理配置了。大部分情况下，TLP 提供的默认配置已经足够了。但因为 TLP 本身也是可以进行高度定制化的，所以还可以针对自己设备的情况，进行更深入的设置。</p><h2>进阶配置</h2><p>TLP 本身是一个纯命令行的工具，其配置文件路径位于 <code>/etc/tlp.conf</code>，可以通过修改配置文件来修改它的配置。或者也可以使用 TLPUI 之类的图形界面来进行可视化的配置操作，这也是我主要使用的配置方式。</p><pre class="language-bash"><code># TLPUI 位于 AUR 仓库中
yay -S tlpui</code></pre><p>安装完成后，打开 TLPUI，就可以使用它来更改 TLP 的配置了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/bca936144de54fe963f0f5eae8a9e195.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>CPU DRIVER OPMODE</h3><p>TLPUI 的 CPU 选项中的第一个项目是 CPU DRIVER OPMODE，这个项目中配置的是 CPU 的调频驱动。在较新的 AMD CPU（Zen 2 或更新版本）和内核版本中（内核 6.3 或更新），推荐的 CPU 调频驱动是 <code>amd-pstate/amd-pstate-epp</code>，可以通过下面的命令来检查当前 CPU 调频驱动的模式：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/amd_pstate/status</code></pre><p>如果输出的信息是 <code>active</code>，说明 <code>amd-pstate</code> 驱动已经启用并被设置为了 <code>active</code>，也称 <code>amd-pstate-epp</code>，这是推荐的现代模式。该驱动模式下，低级别控制权会被交给 CPU 硬件本身，硬件可以根据能源性能偏好（Energy Performance Preference，EPP）来优先考虑性能或能效。</p><p>如果上面的命令输出了其他结果或者文件并不存在，那么在 6.3 或更新的内核上，可以将 <code>amd_pstate=active</code> 加入到内核启动参数中使其永久生效：</p><pre class="language-bash"><code>sudo vim /etc/default/grub</code></pre><p>找到 <code>GRUB_CMDLINE_LINUX_DEFAULT</code> 这一行，在引导参数中加入 <code>amd_pstate=active</code>：</p><pre class="language-diff"><code>- GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
+ GRUB_CMDLINE_LINUX_DEFAULT="quiet splash amd_pstate=active"</code></pre><p>保存后，重新生成 GRUB 配置文件并重启：</p><pre class="language-bash"><code>sudo grub-mkconfig -o /boot/grub/grub.cfg    
sudo reboot</code></pre><p>再次执行下面的命令：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/amd_pstate/status</code></pre><p>此时应该可以看到输出为 <code>active</code>。</p><p>在 TLP 配置中，也可以手动更改 <code>CPU_DRIVER_OPMODE_ON_AC/BAT</code> 的选项，如需区分插电和离电时的调频驱动模式，那么就可以在这里进行配置，否则只需要在启动参数中统一设置就足够了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/d1f383a9770b6ec725f5fc49f049ba27.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>这里也结合 TLP 的文档对 <code>guided</code> 和 <code>passive</code> 简单进行一下说明：</p><ul><li><code>guided</code>：需要 6.4 或更高的内核版本，可以配置最大和最小频率，处理器将在指定范围内自动选择工作频率。基本上可以将 <code>guided</code> 视为强制限定了频率范围的 <code>active</code> 模式。</li><li><code>passive</code>：可以结合 Linux 的 CPU 调速器（Governor）使用，也就是 TLP 中的 CPU SCALING GOVERNOR 选项。CPU 将按照调速器的配置决定频率。</li></ul><p>还可以通过下面的命令来验证当前 CPU 的调频驱动：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_driver</code></pre><p>如果是 <code>active</code> 模式，那么结果应该是 <code>amd-pstate-epp</code>。<code>guided</code> 或 <code>passive</code> 模式下，这个命令输出的可能是 <code>amd-pstate</code> 或其他结果（例如文件不存在等）。</p><h3>CPU SCALING GOVERNOR</h3><p>这个配置项目用于选择自动频率调节的 CPU 调速器，TLP 的默认设置的插电和离电的调速器都是 <code>powersave</code>。可以通过下面的命令，确认当前驱动模式下可用的调速器：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors</code></pre><p>当 <code>amd-pstate</code> 为 <code>active</code> 模式时，可用的选项有 <code>performance</code> 和 <code>powersave</code>，当 <code>amd-pstate</code> 处于 <code>guided</code> 或 <code>passive</code> 模式时，全部的选项有 <code>conservative</code>、<code>ondemand</code>、<code>userspace</code>、<code>powersave</code>、 <code>performance</code> 和 <code>schedutil</code> 这六个。对这些调速器的更具体说明，可以参考相关的<a href="https://www.kernel.org/doc/Documentation/cpu-freq/governors.txt">文档</a>。</p><p>因为我已经激活了 <code>amd-pstate-epp</code>驱动，所以我只有 <code>performance</code> 和 <code>powersave</code> 这两个选项，并且这两个选项在当前模式下，实际上并不是像真正的调速器那样工作，而是会被转换为 CPU 内部的能源性能偏好提示去进行工作。因此我这里保持了默认的状态，并没有进行设置。</p><p>另外需要说明的是，TLP 配置项中明确提到了，如果要配置此项，必须禁用发行版的调速器设置，否则会发生冲突。在 KDE 和 GNOME 桌面环境中，这个发行版的调速器设置通常可能是 <code>power-profiles-daemon</code> 管理的。</p><p>可以通过验证服务状态来确认：</p><pre class="language-bash"><code># 检查 power-profiles-daemon 服务是否在运行
systemctl status power-profiles-daemon.service

# 如果服务在运行中，可以选择停止并禁用该服务
sudo systemctl stop power-profiles-daemon.service
sudo systemctl disable power-profiles-daemon.service

# 或者屏蔽该服务
sudo systemctl mask power-profiles-daemon.service</code></pre><h3>CPU ENERGY PERF POLICY</h3><p>这个配置项目在 <code>amd-pstate-epp</code> 驱动下才是主要控制 CPU 能源消耗的配置项。在大多数情况下，它的可选值有 5 个：<code>performance</code>，<code>balance_performance</code>，<code>default</code>、<code>balance_power</code> 和 <code>power</code>。这 5 个节能的程度依次加深。</p><p>同样的，可以通过命令来确认自己 CPU 可用的 EPP 选项：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/cpu0/cpufreq/energy_performance_available_preferences</code></pre><p>我将插电时的 EPP 设置为了 <code>performance</code>，离电时则改为了最节能的 <code>power</code>。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/be6c406863adb751bec7701aba4b0f53.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>TLP 的其他设置</h3><p>使用电池时关闭睿频：</p><pre class="language-txt"><code>CPU_BOOST_ON_BAT=0</code></pre><p>设置平台（Platform）的整体电源级别：</p><p>当前可用的配置值可以使用下面的命令查看：</p><pre class="language-bash"><code>$ cat /sys/firmware/acpi/platform_profile_choices
low-power balanced performance</code></pre><p>我的配置如下：</p><pre class="language-txt"><code>PLATFORM_PROFILE_ON_AC=performance
PLATFORM_PROFILE_ON_BAT=low-power</code></pre><p>还有一些别的配置项目，如硬盘、WIFI 以及 USB 的省电，也可以通过 TLPUI 进行检查。这时候就会发现，TLP 在默认情况下的确已经进行了不少的配置了。所以这些配置项目我也就没有再进行进一步的更改了。</p><h2>电池</h2><p>最后的部分是电池本身的护理。电池护理并不会直接降低功耗，但能够减少容量的衰减，延长使用寿命。在 TLPUI 中，这部分的配置位于「ThinkPad 电池」标签，但这个配置并不只适用于 ThinkPad 机型。实际可用的参数取决于笔记本厂商与驱动的支持情况，具体的配置可以参考 TLP 的<a href="https://linrunner.de/tlp/settings/bc-vendors.html">相关文档</a>。</p><p>以我的 ThinkBook 为例，属于联想的非 ThinkPad 系列，使用的是 <code>ideapad_laptop</code> 驱动。可以通过 <code>lsmod | grep ideapad_laptop</code> 命令来确认，如果看到该模块已加载，就可以进行对应的电池阈值配置：</p><pre class="language-txt"><code>START_CHARGE_THRESH_BAT0=0  # dummy value
STOP_CHARGE_THRESH_BAT0=1</code></pre><p>这样电池的最大充电量就会被限制在 80%，减少高电量长期保持带来的电池老化。</p><p>但是，如果让电脑始终保持在 80% 的电量，难道不就是平白无故地损失了 20% 的容量吗？这里其实可以区分不同的使用场景：</p><ul><li>日常插电为主时：保持 80% 的上限，延长电池寿命。</li><li>临时需要外出时：可以通过命令 <code>tlp fullcharge</code> 临时将电源充满，达到最长的续航效果。</li></ul><p>另一个配置项，RESTORE_THRESHOLDS_ON_BAT 就是结合这种情况使用的。当使用 <code>tlp fullcharge</code> 将电池充满后，TLP 的阈值限制会在下一次开机后才恢复。启用这个配置项，可以在电脑切换回插电状态后，自动恢复用来的充电阈值。这样就能兼顾长期的电池寿命和临时的续航需求。</p><h2>最终结果</h2><p>完成以上的配置后，我再次在离电状况下启动了 PowerTOP 观察自己笔记本的功耗表现，发现设备的整体功耗已经被限制在了 8~10 w 左右（网页浏览和笔记记录等轻度工作）。这个功耗结合 85 Wh 的电池，已经足够给我带来 8 小时左右的续航了。</p><p style="margin-left: 0px;">&gt; 关注&nbsp;<a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank">少数派小红书</a>，感受精彩数字生活 🍃</p><p style="margin-left: 0px;">&gt; 实用、好用的 <a href="https://sspai.com/mall">正版软件</a>，少数派为你呈现 🚀</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101706</id>
            <title>五月份开始我成胶佬了</title>
            <link>https://sspai.com/post/101706</link>
            <guid isPermaLink="false">https://sspai.com/post/101706</guid>
            <pubDate></pubDate>
            <updated>Fri, 08 Aug 2025 07:24:29 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 拼装模型,童年回忆,国产模型,爱好发展  

总结:  
1. 作者回忆童年时购买低价拼装玩具的经历，尤其喜爱变形金刚和猛兽侠系列。  
2. 长大后因国产拼装模型塔斯提尔和孤影的高质量重新燃起对拼装模型的兴趣。  
3. 描述了从简单素组到学习渗线、刻线等进阶技巧的过程。  
4. 提到拼装模型填补了生活中缺乏创造性爱好的空缺。  
5. 通过模型制作获得个人印记和成就感。  
6. 认为新手阶段的学习过程充满乐趣。  
7. 表达了对这个爱好持续发展的期待。  
8. 希望读者也能找到属于自己的乐趣。 </div>
                        <hr>
                    
                    <p>今年五月份我买的两个胶-- 国产拼装模型 塔斯提尔 和 孤影 到货了，那时候我还没有想过我会真的把这个偶尔想起来的 爱好 逐渐拾起来。</p><p>在这以前，关于摸型都是有一搭没一搭的，偶尔想起来，就买一个看看。好几次老婆说要不给你买一个高达，都被我以家里没地方放为由拒绝了。<br /><br />但是从五月份开始我好像找到了拼装上的快乐。</p><p>&nbsp;</p><p>对于拼装模型，我算是很有渊源了。</p><p>小时候，学校门口的小摊上，花个五毛一块就能有一个玩具版件，那会孩子们的零花钱也不超过一两块，刚好这个价位就可以买到一两个。 那些玩具也以变形金刚，猛兽侠为主。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/109e95fde67a4d6bba92381e7fe19ac0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/ad8fbac744d60a7d378d999ae4ae19e9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>如图，时间过去很久，我也记得不怎么真切了</figcaption></figure><p>我还记得曾经斥巨资- 2.5 元， 买了一个纯蓝的带点透明的 擎天柱（也算是远古彩透了），还是可以变形的款式，和哥哥两人玩了很久，很可惜，岁月变迁，得那时候的人和事一样都没留住，随风而去。</p><p>&nbsp;</p><p>那会小摊上还会有其他的成品玩具，摆在最后面，又大色彩又鲜艳，最是吸引孩子们的眼光。我印象最深的是有三变的霸王龙，金属的，分色利落，和我们常买的款式一个天上一个地上，相当的酷，左手是龙头， 右手是尾巴。</p><p>&nbsp;</p><p>好在小伙伴中好像有一人家里还算殷实，各种变形金刚，六神合体等，也有这款霸王龙，我们其他人也可以去他家过过瘾。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/4e4f5bb1e0158493af3341ad14a998f9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>尽管摊位上有不少的玩具，但是受限于动画片的播放限制（ 那个时候几乎都是点映，电视台上放什么才能看什么，像变形金刚这类的动画看不到，也只能是看到玩具问多了才认识，像一些不在电视上播放的的动画片则需要碟片，如果要去影碟城买的话，价格应该在100 200元以上，这种不菲的价格和娱乐，几乎是不可能被普通小孩子得到），只认识猛兽侠。</p><p>&nbsp;</p><p>当时猛兽侠每天放学后会在电视上播放，只记得片头一连串炫技和一声声 Beast war。现在眼光来看，那个画面相当粗糙，但却是3d建模，不同于其他主流的2d作画，当时把 动物，机器人，争斗这些小男生们喜欢的元素揉在一起，自然是很受孩子们喜欢的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/b9df7bca3b54b0ea2798d50dfe9dbb62.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>猛兽侠的小玩具</figcaption></figure><p>我买的最多的也是五毛钱的猛兽侠系列的拼装摸型。&nbsp;</p><p>&nbsp;</p><p>一盒打开，小小的几版，每个零件都可以按压下来。 我那时年纪小，且这些玩具是盗版，用料粗糙不讲究，不能和原版比（我也是长大才知道有原版，也是长大才知道原来那个材质叫做毒塑料），每次都得用大劲才能拧下来去拼装。</p><p>小时候的我对黄豹勇士和老鼠勇士爱不释手，可是后来两个玩具一个不知道丢到哪里去了，一个在有一次去澡堂洗澡时，我拿着玩，不小时掉了两条腿到下水口被冲走了，很可惜。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/b310c02cd147e9019558ab2b5d9dba44.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>远没有这么精致，但在我心目中应该就是如此</figcaption></figure><p>再后来大了一些，电视上开始放神龙斗士了 （其实应该还有其他的机甲作品，但是我已经不太记得清了，印象中应该还有六芒星），我妈妈每天都说我又要去看 小杜了。隔壁小笼包店的阿姨姓杜，妈妈现在都记得我喜欢看“小救星小杜”，小摊上又开始卖各种各式的龙神号了，这也是我最早认识万代这个牌子。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/be2bbe5220bac79715fc4b25fe0da41e.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>现在也很爱听主题曲 一つのハートで</figcaption></figure><p>后来搬来搬去，上了初中高中大学，工作，这么长的时间也忙于学业和成长的其他的事情，也没有再接触过这些了。</p><p>19年，那时工作还没几年，女朋友（现在已经是老婆了）送了我一个RG强袭自由，从那个时候我算是正经开始接触成熟的拼装模型。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/3cdd8746c7702c03cdd84eccb47e4dda.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>现在眼光来看，早期的rg一体式骨架很有问题，容易软，这个能站起来还得靠支架+蓝丁胶才行</figcaption></figure><p>后来又买了mg力天使，依然是一种 对作品一点不了解，只凭着外观入手，统一叫高达，对于素组，改造没概念 的一个状态，应当是21年入手，也是没能继续下去这个爱好。 后面几年间陆陆续续又买了一两款其他类型的拼装</p><p>&nbsp;</p><p>契机在今年五月份，国模拼装 孤影和塔斯提尔让我彻底入坑了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/7046057263e322173505464b21d33a94.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>就是这两位，右起第一位是塔斯提尔</figcaption></figure><p>我在关注粘土人的时候关注到了NGA的 toy版块，那段时间论坛里总是在讨论这两款，公论认为提到年度最佳国产拼装可以给到塔斯提尔，这就勾起了我的好奇心，让我想入手看看具体如何。</p><p>&nbsp;</p><p>这两款的质量我不用多说，网上有太多的测评。拼装时流畅的体验让我感觉国产的拼装已经到了这样的程度，不尤得提起了很大的兴趣，趁着这个劲又入了 将魂姬的 舞狮 和摩动核炒的很热的 赵云。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/936b304b8f62d29c247aee76e8433508.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>赵云，很大一只，我个人感觉没有哪吒让我感觉惊艳</figcaption></figure><p>优秀的作品需要沉淀，也不一定真的是每一个热度高的就是最好的。</p><p>之后我又跟风入了5501, 不流畅的拼装体验让我还是打算入正，看看代哥这些年的功力。</p><p>&nbsp;</p><p>趁618我一口气买了三款mgsd，目前做了自由和巴巴托斯，又开始学习渗线，刻线加深，贴水贴，消光，马克笔补色，也入手了RG 四天王，目前在练习补色，或许之后会入喷涂坑。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/42fcf4cf400f7d6712e0849de822d755.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>RG牛，第一次尝试消光，没有喷好，远看没事近有橘皮</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/6465b50bbe6dca0ac858e8b797402a8f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>RG沙扎比，没有消光，仅水贴，渗线</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/2d64fdb96a009e729417acf775326ded.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>之前献祭过血的哪吒，是真的扎手，哪怕拼好了摆也是很扎手</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/a83400125be42165acdf5d1c4604de92.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>加油，布鲁托，你可以的</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/ce0a2344fe3cfcb8fee9d5c2af565a33.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>福冈lala port 仰拍</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/d03b5f37d7688822806b6de506f7f5b1.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>中古店碰到了，莫名的好笑，想起了那个表情包</figcaption></figure><p>每一个新爱好的开始阶段总是有很多可以做的，可以学习的地方，就像是每一个手游的新手阶段还没有到堆数值的地方，层出不穷的新机制会让人忍不住继续玩下去。</p><p>&nbsp;</p><p>我想，之所以我这次能入坑恐怕是因为我已经很久没得有一个有创造性的爱好了。</p><p>我可以看书，看小说，看电影，听音乐，刷视频，来获得更多信息；我可以去打羽毛球，打篮球，游泳，跑步，撸铁，骑自行车，来强健我体魄；但是我却缺失一个可以留下我个人印记的爱好，希望撸胶能弥补我这一点缺失。</p><p>希望看到这里的朋友和我都可以找到更多的乐趣。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101633</id>
            <title>从期待到现实：领克07 CarPlay 车载初体验</title>
            <link>https://sspai.com/post/101633</link>
            <guid isPermaLink="false">https://sspai.com/post/101633</guid>
            <pubDate></pubDate>
            <updated>Wed, 06 Aug 2025 09:21:31 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 领克07, CarPlay, 车载体验, Carlink  
<br>  
<br>  
总结: 领克07通过1.9.0 OTA更新支持CarPlay，连接过程简单，界面简洁。高德地图在CarPlay上精简设计，注重驾驶安全和操作简便。音乐应用Spotify不支持歌词显示，但可通过快捷指令实现自动播放。与本土方案Carlink相比，CarPlay在流畅度和老设备兼容性上表现更好，但Carlink在大屏适配和应用丰富度上更具优势。CarPlay满足核心需求，但界面留白和交互效率不及Carlink。未来的CarPlay 26可能在体验上进一步提升。 </div>
                        <hr>
                    
                    <h2>🎬 观看体验视频</h2><p><a href="https://www.bilibili.com/video/av114966023638046" target="_blank">lBilibili - 你更新了 1.9.0 吗？来看下领克 07 CarPlay 车载的初体验</a></p> <p>&nbsp;</p><hr /><p>从去年提车到今年 8 月，过去一年有多，领克发布会上宣传的 CarPlay 终于随着 1.9.0 的 OTA 更新到来了。领克07 上的 CarPlay 表现如何？是否值得这份期待？</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/1d12bc7be8dbafbfec4a9ec135d0c4a7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>​连接 CarPlay</h2><p>第一步是连接。我使用的是搭载 iOS 16 的 iPhone 8，配对过程比较简单。连接成功后，熟悉的界面出现在中控屏上。向右滑动进入主界面，整体观感简洁明了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/4bd13ce423ccf856a38a3dbbb1db6a07.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 应用界面</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/97546578507a43eceb083ae7e808102e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 主界面</figcaption></figure><h2><strong>地图导航：精简设计，操作简便</strong></h2><p>最先体验的是高频使用的应用——高德地图。相较于手机端的丰富功能，CarPlay 端的界面进行了精简，除了地图与上方的工具栏，没有过多的元素出现在画面中。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/c306313a3301aa1a5fa8b1637d10514d.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 上的高德地图</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/f99ecc47ec1bc03089414e1da626c9fd.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 上的地图导航界面</figcaption></figure><p>CarPlay 的设计考量​聚焦驾驶安全与操作简便。大部分 CarPlay 应用都遵循设计模板，避免司机在行驶中的分心和复杂操作。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/1e1ffc129d417042e7ff92f1c065b47e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay Develop Guide</figcaption></figure><h2>音乐体验：专注聆听，歌词缺席​</h2><p>接着测试音乐应用 Spotify。在主界面，推荐歌单以列表形式呈现。点击播放歌曲后，出于安全考虑，CarPlay ​不支持在播放界面展示歌词，对习惯看歌词与哼歌的我来说，多少有些不便。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/19e3d4f5ce0043fd24d625350e2ac928.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 上的 Spotify</figcaption></figure><p>但 CarPlay 也弥补了 Flyme Auto 的一个缺点，车机自带的场景助手仅支持 QQ 音乐自启，而 CarPlay 能够通过 iPhone 上的快捷指令实现上车自动播放 Apple Music 的音乐。</p><h2>对比“选手”：Carlink的本土优势​</h2><p>和国内主流方案 Carlink 相比比较，后者在本土化和大屏适配上的优势十分明显。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/bee7aee9b1037ac1cc953da58ae7c7ab.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Carlink 首页</figcaption></figure><p>​​</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/8eb7517dcadaae18f9af4670dd7f6043.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Carlink 上的地图导航界面</figcaption></figure><p>Carlink 针对国内车辆的大屏做了更好的原生适配，尤其在屏幕利用率上，并且应用商店里提供更丰富的应用选择（当然还是会存在白名单的情况）。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/7774e83991a0b90fa575bb858eef5b2a.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Carlink 支持应用</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/2b036a67047bae8f677719db6f7ba724.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Carlink 上的 Apple Music</figcaption></figure><p>但不清楚是什么原因，Carlink 的操作经常会出现掉帧、反应缓慢的问题，流畅度存在明显短板。</p><p>&nbsp;</p><h2>结论：满足核心需求，但并非换机动力​</h2><p>经过初步的体验，领克07 上 CarPlay 的表现符合我对它的核心预期：​简洁、流畅，满足我的基本需求 —— Apple Music 与车道级导航。并且对老设备依旧友好，数年前的 iPhone 8 依然能稳定运行，这值得称赞。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/76b069508857975265364c71d678af45.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>但它的“简洁”，在某种程度上也是“限制”。国产的 Carlink 在界面适配、应用丰富度和设置灵活性方面展现出强大竞争力。同时，早前的 CarPlay 并未适配车里的“大号平板”，界面会出现大面积的留白，观感上不够协调，列表式的信息展示与触控交互，在效率上不及网格布局。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/19c11396842b3287ad6e6b9462edd2c8.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 上的地图导航界面</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/61a4341ee4fd23b219def9ec0111b326.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 上的 Apple Music</figcaption></figure><p>这套体验目前而言，​还不足以吸引我升级到新款 iPhone。它提供了足够好的“车机投屏”基础体验。但今年的 CarPlay 26，引入了 Liquid Glass 设计风格与应用模板，让界面更通透，带来了明显的质感提升，这些改进已显露出苹果对车载生态的持续打磨，或许在未来，CarPlay 的使用体验能追上或媲美 Flyme Auto。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101622</id>
            <title>树莓派家庭服务器，上篇：系统的安装与配置</title>
            <link>https://sspai.com/post/101622</link>
            <guid isPermaLink="false">https://sspai.com/post/101622</guid>
            <pubDate></pubDate>
            <updated>Tue, 05 Aug 2025 14:57:28 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 树莓派, Rocky Linux, NAS, Cockpit

总结: 作者分享在树莓派4B上安装Rocky Linux系统并将其配置为小型NAS服务器的经验。文章详细介绍了系统选择、安装流程、初始化配置（包括存储扩展、软件源设置、CPU频率问题修复、用户管理）、系统精简等步骤。重点讲解了通过Cockpit管理面板实现文件共享和系统管理，以及使用Docker容器部署服务的方法。作者最终在Rocky Linux上实现了图形化系统管理和容器管理，虽然相比专业NAS系统稍显复杂，但提供了更高的自由度。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;"><strong>Matrix 首页推荐</strong>&nbsp;</p><p style="margin-left: 0px;"><a href="https://sspai.com/matrix">Matrix</a>&nbsp;是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&nbsp;<br />文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><hr /><h2>前言</h2><p>我有两个树莓派 4B，其中一个我当作了一个电视盒子，具体可以看我之前的<a href="https://sspai.com/post/96764">文章</a>。不过我买树莓派最初的目的，是想将它作为一个小型服务器，在挂载硬盘后进行文件共享，并在后台运行下载器进行 BT 下载，所以另外一个树莓派就被委以了这项重任。</p><p>对于如何将树莓派作为一个小型服务器，我尝试过很多方案。关于系统选择与配置，容器的使用，以及软件的选择，我想我最近终于找到了一个比较满意的答案。虽然不敢说这是个正经的 NAS，但却多少算是手搓了个 NAS 系统吧。</p><h2>系统的选择</h2><p>在树莓派上可用的 NAS 系统不多，我知道的只有 <a href="https://www.openmediavault.org/">openmediavault</a>，我在很久之前安装过一次，感觉不太好用。因为我还是有一点 Linux 的使用经验的，所以在很多时候，成品 NAS 系统的图形化界面对我来说反而是累赘，很多时候进行一些高级配置还是没有直接用终端方便，而且还占用了很多资源。因此我一直以来都是直接用普通的 Linux 发行版，在上面手动配置 smb 文件共享与其他服务。我一直以来都比较习惯在服务器上用 Debian 系的发行版，而且树莓派官方的 Raspberry Pi OS 就是基于 Debian 的，自然 Raspberry Pi OS 就是我最常用的系统，虽然期间我也尝试其他的系统，比如 Ubuntu，甚至是 Manjaro，但是最终都又回到了 Raspberry Pi OS。</p><p>不过一直以来 Raspberry Pi OS 都有一个问题困扰我，就是这个系统偏向于教学用途和作为玩具折腾，对于服务器用途，稳定性和软件维护还是有点欠佳，我有点馋红帽系发行版每个大版本五年的软件更新和十年的安全更新，所以就在最近，我尝试着把我正在运行的云服务器，以及树莓派，都换成红帽系的发行版。</p><p>目前比较推荐使用的红帽系的发行版有 <a href="https://almalinux.org/">AlmaLinux</a> 和 <a href="https://rockylinux.org/">Rocky Linux</a>。在红帽改变 CentOS 的定位让其「名存实亡」以及决定不公开 RHEL 源码后，红帽下游的发行版进入过短暂的六神无主的状态，因为这些发行版最初的目的是要达到与 RHEL 百分百兼容，AlmaLinux 和 Rocky Linux 对此的解决方案不完全相同：AlmaLinux 项目不再追求与 RHEL 百分百兼容，而只是做到二进制兼容，也就是说任意为 RHEL 开发的软件都可以在 AlmaLinux 上运行，但不一定会产生相同的 bug；而 Rocky Linux 则是设法绕过了红帽的限制，从其他渠道获取到了 RHEL 的源码，尽量做到与 RHEL 百分百兼容。对于普通的用户，两个发行版用起来大概率几乎没有区别，不过 AlmaLinux 能更快跟进上游的更新，Rocky Linux 则会迟一些。另外 AlmaLinux 还提供了一个<a href="https://wiki.almalinux.org/migration/">迁移工具</a>，可以从旧的 AlmaLinux 升级到新版本，也可以从其他的红帽系发行版迁移到 AlmaLinux，而 Rocky Linux 目前<a href="https://docs.rockylinux.org/release_notes/10_0/#upgrading-to-rocky-linux-10">不支持版本迁移</a>。我个人比较倾向选择 Alma Linux，我的其他云服务器目前也都迁移到了 Alma Linux。</p><p>不过我在树莓派上最终还是安装了 Rocky Linux，在我最初安装时，虽然 AlmaLinux 和 Rocky Linux 都已经跟进上游推出了 V10 大版本，但 AlmaLinux 在官网上依然没有适用于树莓派的 V10 版本安装镜像可供下载，而 Rocy Linux 10 已经有了树莓派安装镜像。不过在我写这篇文章时，我发现 Rocky Linux 官网的树莓派安装镜像下载选项也消失了，不知道什么原因😂。</p><p>（后来我又在 Rocky Linux 的官方论坛里发帖询问了这件事，社区管理员说会「修复」这个问题，现在在官网应该可以直接下载树莓派的镜像了）</p><h2>系统的下载与安装</h2><p>如果想要更快的下载速度，可以去国内镜像站下载系统镜像，比如从中国科学技术大学开源软件镜像站<a href="https://mirrors.ustc.edu.cn/rocky/10/images/aarch64/Rocky-10-SBC-RaspberryPi.latest.aarch64.raw.xz">下载</a>，我对比过校验值，和我之前在 Rocky Linux 官网下载到的镜像是完全一样的。</p><p>系统的安装就很简单了，使用刷写工具，比如 <a href="https://etcher.balena.io/">balenaEtcher</a> 或是树莓派官方的 <a href="https://github.com/raspberrypi/rpi-imager">Raspberry Pi Imager</a>，将镜像刷写入 SD 卡中，然后将其插入树莓派中，插电启动即可。</p><p>这个系统镜像默认会启用 ssh 服务，插上网线就可以直接用 ssh 远程登入了，默认的用户名和密码分别是 rocky/rockylinux，登入以后，就可以对系统做一系列配置了。</p><h2>一些初始化配置</h2><h3>扩展存储空间</h3><p>这个系统镜像默认没有使用全部的 SD 卡空间，想要使系统使用全部的存储空间，只需运行 <code>sudo rootfs-expand</code> 就可以自动扩展空间了。</p><h3>配置软件源</h3><p>Rocky Linux 默认的软件源会根据当前的网络位置自动选择最近的镜像站，所以一般情况下无需换源也能有比较快的软件下载速度，而且红帽系的软件源配置文件改起来比较麻烦，所以我就没有换源。</p><p>首先进行系统更新：</p><pre class="language-shell"><code>sudo dnf update
# 或
sudo dnf upgrade</code></pre><p>其实现在红帽系的 dnf 包管理器已经把 <code>dnf update</code> alias 到了 <code>dnf upgrade</code>，所以上面两个命令其实是一样的，都是更新软件源并更新系统，随便选一个就行。更新完最好重启一下。</p><p>之后添加 EPEL 软件源，这是一个适用于红帽系发行版的第三方软件源，包含了很多常用但官方软件源没有的软件包：</p><pre class="language-shell"><code># 添加软件源
sudo dnf install epel-release
# EPEL 的很多软件依赖官方的 crb 软件源，所以需要启用这个软件源
sudo /usr/bin/crb enable</code></pre><p>EPEL 默认的软件源在国内是挺慢的，所以这次需要换源了，以北京外国语大学开源软件镜像站<a href="https://mirrors.bfsu.edu.cn/help/epel/">为例</a>：</p><pre class="language-shell"><code>sudo sed -e 's!^metalink=!#metalink=!g' \
    -e 's!^#baseurl=!baseurl=!g' \
    -e 's!https\?://download\.fedoraproject\.org/pub/epel!https://mirrors.bfsu.edu.cn/epel!g' \
    -e 's!https\?://download\.example/pub/epel!https://mirrors.bfsu.edu.cn/epel!g' \
    -i /etc/yum.repos.d/epel{,-testing}.repo</code></pre><p>之后再次运行 <code>sudo dnf update</code> 更新一次即可。</p><h3>问题修复</h3><p>这个 Rocky Linux 镜像目前存在一个问题，就是会让树莓派的 CPU 默认运行在省电模式，这个模式下 CPU 的频率会一直处在 600MHz，无法上升到更高的频率。要验证这个问题是否存在，可以安装 <code>stress</code> 和 <code>btop</code> 两个软件包，stress 用来给 CPU 进行压力测试，而 btop 可以用来实时监控 CPU 频率。打开两个 ssh 窗口连接到树莓派，一个窗口运行 btop，默认布局下会在右上角显示目前的 CPU 频率，另一个窗口运行 <code>stress -c 4 -t 60</code>，表示运行一个持续时间 60 秒、4 个线程的 CPU 压力测试，如果 CPU 的频率一直是 600MHz，就说明树莓派是运行在省电模式下的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/f138a04ed8c6b06743f2ac3447b4ead4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>参考官方论坛中的这个<a href="https://forums.rockylinux.org/t/powersave-mode-is-still-default-in-rl10-for-raspberry-pi/18858">帖子</a>，解决方法也比较简单，首先安装 <code>kernel-tools</code> 软件包，之后创建一个新的 systemd 服务文件 <code>/etc/systemd/system/cpupower.service</code>：</p><pre class="language-ini"><code>[Unit]
Description=Configure CPU power related settings
After=syslog.target

[Service]
Type=oneshot
RemainAfterExit=yes
EnvironmentFile=/etc/sysconfig/cpupower
ExecStart=/usr/bin/cpupower $CPUPOWER_START_OPTS
ExecStop=/usr/bin/cpupower $CPUPOWER_STOP_OPTS

[Install]
WantedBy=multi-user.target</code></pre><p>之后启用服务：</p><pre class="language-shell"><code>sudo systemctl daemon-reload
sudo systemctl enable --now cpupower.service</code></pre><p>然后再次运行一次压力测试，正常没有超过频的树莓派 4B CPU 频率是可以达到 1.5GHz 的，如果在压力测试时频率上升到 1.5GHz，压力测试停止后又回落到 600MHz，就说明问题已经解决了。</p><h3>用户配置</h3><p>首先要修改默认密码，这个很简单，运行 <code>passwd</code>，按提示输入旧密码然后输入两次新密码即可，输密码的时候不会显示，这些都是 Linux 用户习以为常的了，不必多说。</p><p>不过这个系统默认的用户名是 rocky，我有点不太习惯，用久了 Raspberry Pi OS 后，我还是习惯用户名是 pi，其实我大可以新添加一个名为 pi 的用户，但是这样的话，新的用户和用户组的 id 就不是最常用的 1000 了，这让强迫症有些难受。</p><p>其实也是有办法把现有的用户改名的，不过 Linux 系统不允许修改目前正在使用的用户，所以在改名之前，需要以 root 用户登陆，修改 <code>/etc/ssh/sshd_config</code>，在最后添加一行 <code>PermitRootLogin yes</code> 以允许 root 用户登陆 ssh，之后运行 <code>sudo systemctl restart sshd</code> 重启 ssh 服务，然后运行 <code>sudo passwd root</code> 为 root 用户设置一个密码，之后便可以退出当前账户的登陆，然后重新以 root 用户登陆，在以 root 用户登陆的情况下，运行：</p><pre class="language-shell"><code># 把用户名 rocky 改为 pi
usermod -l pi rocky
# 把用户组也改名成 pi
groupmod -n pi rocky
# 把用户 pi 的家目录改为 /home/pi
usermod -d /home/pi -m pi</code></pre><p>之后便可以重新以用户 pi 登陆到树莓派的系统了。为了安全起见，最好把之前在 <code>/etc/ssh/sshd_config</code> 所做的修改复原并重启 ssh 服务以禁止 root 登陆，然后运行 <code>sudo passwd -l root</code> 锁定 root 用户。</p><h3>语言、时区与时间同步</h3><p>这个系统镜像默认语言是英语，可以根据自己的需要修改为中文，运行 <code>localectl</code> 可以查看当前使用的语言，运行 <code>locale -a</code> 可以列出当前可用的所有语言，运行 <code>sudo localectl set-locale LANG=zh_CN.UTF-8</code> 可以把语言设置成中文。</p><p>运行 <code>timedatectl</code> 可以查看当前使用的时区，系统默认使用的是 UTC 时区，要想修改时区，运行 <code>timedatectl list-timezones</code> 可以查看当前所有可用的时区，然后运行 <code>sudo timedatectl set-timezone Asia/Shanghai</code> 可以将时区修改为上海，其实就是中国的时区，因为绝大多数 Linux 发行版都以上海作为中国的时区。</p><p>Rocky Linux 默认使用 chrony 作为时间同步服务，并且默认使用的 ntp 服务器位于国外，可能导致时间同步失败，因为树莓派 4B 没有硬件时钟，所以时间同步失败就会很麻烦。我们可以将默认 ntp 服务器修改为国内可用的 ntp 服务器，编辑 <code>/etc/chrony.conf</code>，在文件开头找到这样一行：</p><pre class="language-"><code>pool 2.rocky.pool.ntp.org iburst</code></pre><p>修改为：</p><pre class="language-"><code>pool ntp.aliyun.com iburst</code></pre><p>其实就是把 ntp 服务器修改为了阿里云的公共 ntp 服务器，为了万无一失，还可以把服务器的 ip 填入 hosts 文件里，防止 DNS 解析出错，编辑 <code>/etc/hosts</code>，添加一行：</p><pre class="language-"><code>203.107.6.88 ntp.aliyun.com</code></pre><h3>系统精简</h3><p>这个系统镜像其实默认就已经很精简了，但还是有一些我用不到且占用资源的组件。首先我卸载了防火墙软件 firewalld 和 wifi 管理软件 wpa_supplicant。因为这个树莓派只运行在内网，我不打算将其开放到公网，所以防火墙可有可无，而且 firewalld 还挺占资源的；另外我是只打算用网线连接路由器，用不到无线网络，所以 wpa_supplicant 也不需要。</p><pre class="language-shell"><code>sudo dnf remove firewalld wpa_supplicant</code></pre><p>接着是 SELinux，这是一个由红帽开发的 Linux 安全组件，可以阻止一些高危操作。Rocky Linux 自带了 SELinux 而且默认运行在严格模式，这个模式下很多操作都会被拒绝，比如开放非常规端口什么的，并且 SELinux 在后台运行也会消耗一定资源。因为我明确知道我在做什么，所以我打算禁用 SELinux，SELinux 牵扯到很多系统组件，没法直接卸载，但可以通过配置文件禁用它，编辑 <code>/etc/selinux/config</code>，找到 <code>SELINUX=enforcing</code> 改成 <code>SELINUX=disabled</code>，重启系统之后，运行 <code>sestatus</code>，就可以看到 SELinux 已经被禁用了。</p><p>如果不想禁用 SELinux，可以在配置文件里把 SELinux 的模式改成 permissive 宽容模式，或是手动添加允许规则，至于如何添加规则，这就不是本文探讨的内容了，而且我也不懂🤣，具体可以看 SELinux 的<a href="https://github.com/SELinuxProject/selinux-notebook">官方文档</a>。</p><h2>安装并配置管理面板</h2><p>对于如何配置 smb 文件共享以及后续的系统维护，其实我可以直接从终端配置，但太麻烦了，为了一劳永逸，我打算安装 <a href="https://cockpit-project.org/">Cockpit</a>，这是一个可以用来管理 Linux 系统的网页面板，并且能通过安装插件来扩展功能，十分好用。实际上，国外知名的企业级 NAS 定制厂商 <a href="https://www.45drives.com/">45Drives</a> 所使用的 NAS 系统就是 Rocky Linux 8 加上一个定制的 Cockpit 网页面板，并且 45Drives 把相关的项目都在 github 上<a href="https://github.com/45Drives/">开源</a>了出来，我这次就用到了一些 45Drives 开发的 Cockpit 插件。</p><h3>安装并配置 Cockpit 本体：</h3><p>运行：</p><pre class="language-shell"><code># 安装 Cockpit 软件包
sudo dnf install cockpit
# 启用 Cockpit
sudo systemctl enable cockpit.socket --now</code></pre><p>要注意启用的是套接字 socket 而不是服务 service，因为 Cockpit 自带的 systemd 服务文件无法直接启用，而且启用套接字有一点好处，就是他不会在开机时就开始运行，而是只在需要的时候才会开始运行，这会提升一点开机速度，并且节省一点资源。</p><p>然后在同一局域网下的另一台电脑浏览器中输入树莓派的 ip 加上端口 9090，就可以打开 Cockpit 后台了，因为使用了自签证书，浏览器会提示不安全，不用管选择继续访问就行，登陆的用户名和密码就是系统的用户名和密码。登入后会默认处于限制访问模式，无法进行一些高级操作，需要点击主页的「Turn on administrative access」，再输入一次密码后，才能打开管理员模式。这时就可以进行一些基本的系统管理了，比如软件更新和修改网络，还可以在浏览器中打开终端。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/1dbd0e5229580ba6d28609fce5756557.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>挂载并管理外接硬盘</h3><p>要想在 Cockpit 中挂载外置硬盘，可以安装 cockpit-storaged 插件：</p><pre class="language-shell"><code>sudo dnf install cockpit-storaged</code></pre><p>安装完成后刷新 Cockpit 网页，就可以在左边的侧栏上看到有个「存储」选项了，在这里可以看到连接的外置硬盘，可以对其格式化和挂载。可以看到我的硬盘识别为了 sda，并且挂载到了 <code>/mnt/share</code>，只需手动挂载一次，之后每次系统启动都会自动挂载了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/38061741b7eda19182aa108044c3bd8b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>要想修改挂载目录的访问权限，可以安装 cockpit-files 插件：</p><pre class="language-shell"><code>sudo dnf install cockpit-files</code></pre><p>刷新之后就可以在看到「文件浏览器」选项了，浏览到 <code>/mnt</code> 目录，单击选择挂载到的 <code>share</code> 目录，点击右上角三个点，选择编辑权限，把所有者和所有组都改成 pi，点击下方的「Change permissions for enclosed files」修改所有子目录的权限。之后这个目录就可以用普通用户访问并编辑了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/757e289c72e407e233189b47df2816c3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>文件共享</h3><p>要想在 Cockpit 中配置文件共享，可以用 45Drives 的 <a href="https://github.com/45Drives/cockpit-file-sharing">cockpit-file-sharing</a> 插件，另外还推荐安装 <a href="https://github.com/45drives/cockpit-identities">cockpit-identities</a> 来管理 smb 的密码。因为 45Drives 的插件是针对 Rocky Linux 8 版本开发的，README 里面的自动安装方式也只适用于 Rocky Linux 8，对于更新的 Rocky Linux 版本，只能手动安装了，需要从 Releases 下载最新版本的 rpm 文件，然后手动安装。</p><p>可能因为版本问题 cockpit-file-sharing 在安装时依赖没有装全，少了 samba 软件包，所以还要手动装一下 samba：</p><pre class="language-shell"><code>sudo dnf install samba</code></pre><p>刷新后就可以在 Cockpit 里看见「File Sharing」和「Identities」两个选项了。第一次打开 File Sharing 可能会提示「Samba is Misconfigured」，点下方的「Fix now」让它自动修复即可。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/dc9a4549cec5cacf889944bce6b8594c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这个插件可以配置 Samba 和 NFS 共享。Samba 共享这里，在下面的「Share Configuration」这里添加新的共享，填上共享的名字、共享的目录，下面的选项基本保持默认就好，点击「Apply」就算是配置好了。NFS 共享就更简单了，添加共享，填上共享的目录和需要的 ip 就可以了，我这里只给我的笔记本电脑（设置了静态 ip 192.168.0.106）开放了 NFS 共享，局域网内其他设备是无法访问的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/9d1c316432638cebf3e1ce52b52e73be.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>在 Linux 下 Samba 的密码和用户密码是分开存储的，需要单独设置，点击「Identities」选项，选择「Users」，选择自己当前的用户，翻到下面，点击「Change Samba Password」，在这里输入密码即可。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/dda107b7a546e1a1843e7dd23ef9eeb3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这时其实还无法访问共享的文件，因为 Samba 和 NFS 服务还没有启用，在 Cockpit 的「服务」选项卡里，搜索并找到 smb 服务，将其启用，同样的方法，搜索并找到 nfs-server 将其启用，如果想要局域网内的其他电脑自动发现 smb 共享，也可以选择启用 avahi-daemon 服务。这时文件共享就算是配置好了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/0c696ba8341424bee0aaff2c48b3a605.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>其他 Cockpit 插件</h3><p>Cockpit 还有很多有用的插件，比如 <a href="https://github.com/45Drives/cockpit-zfs-manager">cockpit-zfs-manager</a> 用来创建并管理 ZFS 阵列，和 <a href="https://github.com/cockpit-project/cockpit-machines">cockpit-machines</a> 可以用来创建并管理虚拟机。可以在<a href="https://cockpit-project.org/applications.html">这里</a>查看 Cockpit 所有可用的插件。</p><p>另外 45Drives 目前正在开发新的 <a href="https://github.com/45Drives/cockpit-zfs">cockpit-zfs</a> 插件，用来代替旧的 zfs manager 插件，不过目前还在早期开发阶段，感兴趣的可以关注下。</p><h2>容器管理</h2><p>除了文件共享，我常用的大部分服务都是用容器部署的，在 Docker 之外还有很多容器化解决方案，比较值得一提的就是 Podman，而且 Podman 也是红帽主导开发的，号称完全兼容 Docker，并且有很多 Docker 没有的特色功能，比如以普通用户权限运行容器、Quadlet 可以用 systemd 管理容器服务等等，并且 Cockpit 也有一个 Podman 插件，可以将容器管理一同集成到 Cockpit 面板里面。</p><p>不过我实际用下来觉得 Podman 还是没有 Docker 好用，Quadlet 配置文件写起来实在没有 compose 配置文件简单易上手，想要让多个容器互联也非常麻烦。虽然可以通过安装 podman-compose 来兼容 compose 文件，但仍然存在很多奇奇怪怪的兼容性问题。所以最终我还是决定用 Docker。</p><h3>安装 Docker</h3><p>我最初是参照着 Docker 官方的 <a href="https://docs.docker.com/engine/install/rhel/">RHEL</a> 安装文档，但是发现 Docker 的软件源目前似乎还没有 RHEL 10 的版本，所以会安装失败。需要参照 <a href="https://docs.docker.com/engine/install/centos/">CentOS</a> 的文档：</p><pre class="language-shell"><code># 安装 dnf-plugins-core 用来管理软件源
sudo dnf -y install dnf-plugins-core
# 添加 Docker 软件源
sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
# 换源
sudo sed -i 's+https://download.docker.com+https://mirrors.bfsu.edu.cn/docker-ce+' /etc/yum.repos.d/docker-ce.repo

# Docker 依赖 iptables，可以首先安装 nftables 提供的 iptables 实现，以防止安装到旧的 iptables
sudo dnf install nftables iptables-nft

# 安装 Docker
sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# 启用 Docker 服务
sudo systemctl enable docker.service --now

# 将当前用户加入 docker 用户组，后续运行 docker 命令无需使用 sudo
sudo groupadd docker
sudo usermod -aG docker $USER</code></pre><h3>容器管理</h3><p>Cockpit 有一个 <a href="https://github.com/Xantios/cockpit-docker">Docker 插件</a>，但已经很久没有更新了，不过好在 Docker 的生态很丰富，有很多适用于 Docker 的网页管理面板，最知名的当属 <a href="https://www.portainer.io/">Portainer</a> 了，不过 Portainer 的用法对我来说太复杂了，而且我也用不到它的很多高级功能。就在最近我发现了一个比较新的项目：<a href="https://dockge.kuma.pet/">Dockge</a>，这是一个十分简单但好用的 Docker compose 管理工具，因为我所有的容器服务都是通过 Docker compose 部署的，所以它完美地解决了我的痛点。Dockge 的作者另一个更加知名的项目是 <a href="https://uptime.kuma.pet/">Uptime Kuma</a>，所以不用担心它的开发质量，另外它的界面也会和 Uptime Kuma 有点像。</p><p>Dockge 是需要通过 Docker compose 的方式安装的，去到 Dockge 的官网，可以自动生成所需的 compose 文件，只需要填上自己打算存放 compose 文件的目录以及想要开放的端口，就能自动生成可用的 compose 文件内容了。这里我打算将 compose 文件存放在家目录的 containers 文件夹里，也就是 <code>/home/pi/containers</code>，端口保持默认 5001。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/6bed6698f1e3b5e96108080ec2e94ec8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>然后回到终端：</p><pre class="language-shell"><code># 创建并进入必要文件夹
mkdir -p /home/pi/containers/dockge
cd /home/pi/containers/dockge

# 下载 compose 文件
curl "https://dockge.kuma.pet/compose.yaml?port=5001&amp;stacksPath=%2Fhome%2Fpi%2Fcontainer" --output compose.yaml

# 启动
docker compose up -d</code></pre><p>如果想要在 Dockge 网页面板里运行终端命令，还需要在 compose 文件里添加一个环境变量 <code>DOCKGE_ENABLE_CONSOLE=true</code>，我的 compose 文件是这样的：</p><pre class="language-yaml"><code>services:
  dockge:
    image: louislam/dockge:1
    container_name: dockge
    mem_limit: 256mb
    restart: unless-stopped
    ports:
      - 5001:5001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data:/app/data
      - /home/pi/containers:/home/pi/containers
    environment:
      # Tell Dockge where to find the stacks
      - DOCKGE_STACKS_DIR=/home/pi/containers
      - DOCKGE_ENABLE_CONSOLE=true</code></pre><p>其中我还添加了 <code>mem_limit: 256mb</code> 来限制容器可用的内存大小，因为我的树莓派只有 2G 内存，后期运行的服务多了内存可能会不够用，所以需要限制一下，256mb 也完全够 Dockge 运行了。</p><p>不过树莓派上的 Rocky Linux 默认是不支持为容器添加内存限制的，所以上面的选项默认会被忽略，要想使内存限制生效，需要添加一个内核参数，编辑 <code>/boot/efi/cmdline.txt</code>，应该只有一行内容，在行末添加一个 <code>cgroup_enable=memory</code>，不要另起一行，还要和前面的内容间隔一个空格。修改完后重启，容器的内存限制应该就能生效了。</p><p>Dockge 部署完成后，在同一局域网下的另一台电脑浏览器中输入树莓派的 ip 加端口 5001，就可以打开 Dockge 的管理面板了，第一次打开需要设置用户名和密码。</p><p>使用 Dockge 可以非常直观地编辑容器常用的的运行选项，开放端口、文件系统映射以及环境变量等都可以在这里编辑，对于不支持的运行选项，也可以直接编辑右侧的 compose 文件。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/7a4b9ec6c855a151e3feb3c734d016c6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>如果实在不知道如何编辑 compose 文件，Dockge 甚至还支持将 docker cli 命令直接转换成 compose 文件。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/d079bb52c824f0411baf1a218beca513.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>另外，Dockge 会把已经添加的 compose 文件整齐地放在各自的文件夹里原样保存，这意味着我们仍然可以用其他编辑器编辑 compose 文件，也可以很容易地将之前的的 docker-compose 项目导入 Dockge，只需按照每个 compose 文件都放在单独的文件夹的规则，将已有的 compose 文件放到 Dockge 保存文件的目录（在我这里就是 <code>/home/pi/containers</code>），Dockge 就能够自动识别并导入。</p><h2>总结</h2><p>因为篇幅原因，本篇只介绍了我在树莓派 4B 上安装并配置系统的过程，在 Rocky Linux 上，通过安装 Cockpit 和 Dockge 可以实现比较方便的图形化系统管理的容器管理，虽然相比正经的 NAS 系统易用性还是差一些，但对于有一定 Linux 运维知识的人来说有更高的自由度。</p><p>我之后可能会再写一篇文章，介绍一下我当前部署的容器服务，以及具体的配置方法。</p><p style="margin-left: 0px;">&gt; 关注&nbsp;<a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank">少数派小红书</a>，感受精彩数字生活 🍃</p><p style="margin-left: 0px;">&gt; 实用、好用的 <a href="https://sspai.com/mall">正版软件</a>，少数派为你呈现 🚀</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101618</id>
            <title>《シューターズ レディ！》最初印象</title>
            <link>https://sspai.com/post/101618</link>
            <guid isPermaLink="false">https://sspai.com/post/101618</guid>
            <pubDate></pubDate>
            <updated>Tue, 05 Aug 2025 12:43:21 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 同人游戏,射击游戏,游戏机制,日本独立开发  
<br>  
<br>  
总结: 作者通过个人经历介绍了日本同人游戏的发展，从《魔法少女小圆》衍生作品到现代独立开发的《シューターズ レディ！》。文章重点评价了《シューターズ レディ！》的游戏设计，包括其精致的UI、音乐和创新的数值系统，特别是角色属性和枪械特性的平衡。游戏结合了CQB射击训练和策略决策，提供了高完成度的体验。作者对日本同人游戏开发者的专业性和创意表示赞赏，认为这类游戏以低廉价格提供了超值的品质。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;">笔者第一次接触到“同人游戏”（同人ゲーム）这个概念的时候，是在《魔法少女小圆》首播爆火的那段日子。每一年Comike场贩的数字内容，都会有好事者以免费形式发布在盗版站点，这其中就包括大名鼎鼎的黄昏フロンティ（黄昏边境）开发的《GRIEFSYNDROME》，以及在中文宅圈子里不那么出名的OHBA堂开发的《Homura Combat》。</p><p style="margin-left: 0px;">可能是由于FC世代的《超级马里奥兄弟》和《绿色兵团》这类游戏带给我的童年创伤，我对《GRIEFSYNDROME》并不是特别感冒。这款游戏在2D战斗方面做出了不少优化以提升整体的爽快感，但陡增的中后期难度和有限的补给还是让我无法快乐地体验它。</p><p style="margin-left: 0px;">而从机制到战斗规模都朝着《地球防卫军》（Earth Defence Force）系列看齐的TPS《Homura Combat》，至今是我的心头好。个人感觉，有戏的玩法设计非常成熟，射击手感中规中矩，且不论是UI、界面还是音乐都不是简单糊弄一下，而是有着一定的质感。它的各方面都让我惊叹，一款所谓的“同人游戏”能让我感受到和当年的中大规模游戏，如《子弹风暴》（Bulletstrom）和《黑暗2》（The Darkness 2）同样的快乐。</p><p style="margin-left: 0px;">自此之后，笔者就对日本的“同人游戏”开发群体抱有着相当的敬意和好感。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/89b721441a02c528141fdf8a4ff64003.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>游戏的UI设计和游戏画面浑然一体。</figcaption></figure><p style="margin-left: 0px;">时间很快来到2025年，“同人游戏”这一概念似乎也在不断地发生着演进。许多和动漫影视作品无关，但是以个人或微型独立团队开发的微型规模或小规模游戏，一些团队或个人会将自己的作品称为“同人游戏”。在日语游戏网站和数字版产品贩售网站上，经常会看到和IP无关，手价从几百日元到数千日元不等的游戏，其中规模很小的游戏，也会被分类为“同人游戏”。</p><p style="margin-left: 0px;">我在逛Steam的时候被推送了一款名为《シューターズ レディ！》（Shooters, Ready!）的游戏阅览图所吸引。“武装CQB少女”是御宅族们不可能绕开的话题，出现关注这一分类的“同人游戏”可以说是迟早的事情。游戏的MSRP非常“同人”，国区为22元，打折的时候18块钱就能拿下；近440篇评测中100%的好评率，还说明这款游戏及其精准地击中了该门类下的用户需求；游戏的配置要求极端友好，自带显卡的AMD Ryzen 5 3400G就能满足它的最低要求，推荐显卡配置也不过是8年前的GTX 1050 Ti。</p><p style="margin-left: 0px;">游戏的开发和发行团队名为おこめたべたべず（米饭没吃完）我以前完全没有听说过，但仅从Steam页面上给出的这些信息，笔者几乎可以确定，这是一款不同寻常的“同人游戏”。</p><p style="margin-left: 0px;">打开游戏的第一感受，就和我印象里日本同人游戏团体对质感的追求完全吻合。不论是游戏标题的设计、UI设计，还是背景音乐，都有着不符合该游戏售价的高品质。</p><p style="margin-left: 0px;">我没有直接开始游戏的故事模式，而是进入了街机模式进行挑战。游戏玩法很简单，操作三位有着不同初始数值的女高中生，选择四把性格各异的手枪，进行10轮室内CQB训练：在极为有限的时间内，突破各种布局的房间，打倒各类标靶，并尽量打出高分。挑战高难度房间、连续击倒和爆头是获取分数倍率加成的关键。</p><p style="margin-left: 0px;">游戏的挑战性在于高中生们的数值和枪械的性能限制。游戏为高中生设计了四个性能维度：步法（FWK）、速度（SPD）、控枪（HDL）和晃动（SHK），脚步代表了各个方向移动时的脚步速度，速度代表前进时的速度，持枪表示对枪械的操控能力，晃动则是代表举枪瞄准之后的晃动。而不同枪械的威力，后坐力和弹匣容量也有着不同的特性。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/7ce5162ba824b501b105207f9b5b1b12.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>三位女高中生有着不同的初始数值，显示在左下角。</figcaption></figure><p style="margin-left: 0px;">这种数值设计的有趣之处在于，如果玩家朋友平时尝试过Wargame以及发射器练习的话，这四项设定和练习时所需要克服的问题有着极强的关联。由于发射器本身的重量千差万别，真实枪械的子弹口径和装药也有很大不同，因此在训练时，我们就是要克服举枪瞄准时的晃动，对后坐力的控制，持枪时朝着各向移动时的脚步能力，以及行进时的速度。</p><p style="margin-left: 0px;">游戏中最大的挑战就是控制开火的时机。玩家在不瞄准时，角色采用了经典的“上持枪”待机动作，因此想要击中中远距离的目标几乎必须要瞄准。右键瞄准之后角色的手就和《生化危机》或《恶灵附身》里面的那些主角一样摇晃地非常厉害，而在瞄准时，角色的移动速度也会异常缓慢。在瞄准开火之后，由于枪械威力不同，导致了后坐力的不尽相同。而后坐力会导致枪口上抬和角色视角的上抬，使得下一次射击充满了变数。</p><p style="margin-left: 0px;">而室内CQB练习除了可以对射手的上述能力进行综合考量之外，其实还检验了另一个维度的能力：即时策略。由于无法提前知晓门后的布局，和目标数量，因此射手需要在破门之后立即对现场情况做出判断。先击倒左边还是右边的目标，先击倒高韧性还是低韧性目标，打头还是打身子，都需要射手在短时间内做出决策。决策速度越快，就越能获得更多时间上的优势。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/9c34460ea7f859b066577601f0494343.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>后期目标非常多的房间中，这种决策的难度也会上升。</figcaption></figure><p style="margin-left: 0px;">在《シューターズ レディ！》的街机模式下，每一间房间清理完成之后，都会获得10秒的奖励；每一轮房间清理完成之后，都能够利用剩下来的时间购买各种人物或枪械的性能加成道具。扣除购买道具所用的时间之后，玩家会带着剩下的时间开始下一轮挑战。如果在清理房间时耗尽所有时间，那么游戏就会直接结束。</p><p style="margin-left: 0px;">游戏的优点是，这些性能加成出现的时机会根据玩家进行一轮清理之后所剩的时间进行调整。如果玩家剩余的时间足够多，就有可能看到需要消耗大量时间，同时性能提升也很强大的道具，如果玩家的时间所剩无几，就只能随机到性能提升有限但也很便宜的道具。游戏的另一个优秀之处在于，在第一轮房间清理完成之后，玩家可以在第二轮之后自主选择难度。玩家可以选择高难度房间冲击高分，也可以选择低难度房间缓解一下时间压力。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/1d509c6ef0c4a143fea5dc6cc3483f38.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>每一轮CQB结束之后都能够花费时间购买一项加成能力。当然也可以不买。</figcaption></figure><p style="margin-left: 0px;">上文也提到了故事模式。在笔者通过街机模式熟悉了游戏玩法之后，也试了试故事模式。和我印象中动画片里刻画女高中生日常的故事一模一样，《シューターズ レディ！》讲述了三位女高中生参加全国室内射击比赛的过程，以及中间发生的故事。并且，在短短两集动画片的剧情中间，也包含了强烈的情绪起伏——这几乎是任何女高中生日常类动画片的标配了。</p><p style="margin-left: 0px;">上手两个小时之后，我就能够完全了解游戏方方面面的机制和内容了。游戏的体量虽然很小，但机制不仅完整而且有新意，同时我也没有发现任何bug。因此游戏的整体完成和质量度之高，依旧让笔者感觉不像是22块钱就能买到的。</p><p style="margin-left: 0px;">这让我对日本的“同人游戏”开发群体的好感又增加了不少。这样一款有新意，好玩不贵，同时又能展现开发者对Wargame和FPS深度认知的游戏可能确实不多。如果你对室内CQB射击训练感兴趣，并且认为自己是个键鼠FPS高手的话，不妨试一试这款《シューターズ レディ！》。</p><p style="margin-left: 0px;"><i>（图片来源：作者截图）</i></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101614</id>
            <title>Subtitle Edit：开源字幕处理神器</title>
            <link>https://sspai.com/post/101614</link>
            <guid isPermaLink="false">https://sspai.com/post/101614</guid>
            <pubDate></pubDate>
            <updated>Tue, 05 Aug 2025 10:55:00 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 字幕提取, Subtitle Edit, OCR识别, 字幕翻译  
<br>  
<br>  
总结: 本文介绍了使用Subtitle Edit工具提取视频内嵌字幕的步骤，包括打开视频文件、选择字幕轨道、OCR识别（适用于图像字幕）以及保存为所需格式。Subtitle Edit是一款功能强大的开源字幕编辑器，支持多种视频与字幕格式，并提供OCR字符识别、语音转写、时间轴同步等功能。此外，它还具备字幕翻译、同步修正、格式批处理等扩展能力。文章还澄清了常见误区，如MKVToolNix和HandBrake无法直接导出文本字幕。 </div>
                        <hr>
                    
                    <blockquote><p>今天在听中岛美雪的演唱会时，发现视频里内置了字幕。相比我之前用 Whisper 转写出来的版本，原生字幕肯定要准确得多。于是我开始找工具，希望能把这些内嵌字幕提取出来。试了好几款之后，最终脱颖而出的是 —— Subtitle Edit。</p></blockquote><p><a href="https://www.nikse.dk/">Subtitle Edit</a> 是一款功能强大的开源字幕编辑器，适用于字幕的提取、编辑、格式转换与翻译等多种场景。它支持多种视频与字幕格式，并内置 OCR 字符识别、语音转写、时间轴同步等实用功能。</p><p>最新版可在 <a href="https://github.com/SubtitleEdit/subtitleedit/releases">GitHub 发布页</a> 获取，或通过 <a href="https://wwva.lanzouq.com/i1mrz32pycbi">国内镜像</a> 下载。支持 Windows，部分 Linux 系统可通过 Mono 兼容运行。</p><h2>字幕提取</h2><h3>1. 打开视频文件</h3><p>启动软件后，点击菜单栏的“文件”（File） -&gt; “打开”（Open），选择你想提取字幕的视频文件。</p><h3>2. 选择字幕轨道</h3><p>如果视频中包含多个字幕轨道，Subtitle Edit 会弹出窗口供你选择需要提取的那一条。</p><h3>3. （可选）进行 OCR 识别（适用于图像字幕）</h3><p>若视频字幕为图像格式（如 DVD 的 VobSub 或蓝光的 PGS 字幕），软件会提示你进行“光学字符识别”（OCR）。此时建议选择 Paddle OCR 引擎，并根据字幕语言进行设置。点击「开始 OCR」后进行识别，完成后点击右侧的「确定」按钮。</p><blockquote><p>🚀 <strong>小提示</strong>：对于中文、日文等非拉丁字符，Paddle OCR 的识别效果明显优于 Tesseract 等传统引擎；后者更适用于英文字幕。</p></blockquote><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/article/9a6bd91dd2525900bb972aba0506beb1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>4. 保存为所需格式</h3><p>字幕提取后，你可以在主界面中查看字幕文本与对应的时间轴。点击“文件”（File） -&gt; “另存为”（Save as），在保存类型中选择所需格式。</p><h2>其他功能</h2><p>除了基础的字幕提取功能，Subtitle Edit 还提供了丰富的扩展能力，适用于更复杂的字幕编辑与翻译需求。</p><h3>语音转写</h3><p>当视频中没有字幕轨道时，可以通过“工具”（Tools） -&gt; “语音识别”（Audio to text）自动生成字幕。Subtitle Edit 支持多种识别引擎：</p><ul><li><strong>Whisper</strong>（推荐，效果最优，支持多语言识别）</li><li><strong>Vosk</strong>（轻量级本地模型，适合资源受限环境）</li></ul><p>用户可选择语言或启用自动识别，支持断点恢复、每句字幕自动分段等配置。</p><h3>字幕翻译功能</h3><p>在已有字幕的基础上，Subtitle Edit 支持一键翻译所有字幕内容，可通过“翻译”菜单调用主流翻译引擎，如：Google Translate、DeepL、Yandex 等。你还可以选择手动逐句翻译，适合需要逐句优化语序的场景。</p><blockquote><p>如果你需要批量的字幕翻译体验或使用ai翻译字幕，可以使用我开源的 <a href="https://tools.newzone.top/zh/subtitle-translator">Subtitle Translator 工具</a>。<br />该工具支持批量上传字幕，调用多个翻译 API，并可选择中英对照、断句模式、自定义输出格式等，适合字幕组、译者和内容创作者使用。</p></blockquote><h3>字幕同步与修正</h3><p>Subtitle Edit 提供多种对齐和修正工具，帮助字幕更精确地贴合音视频内容：</p><ul><li>自动根据音频波形对齐字幕时间</li><li>快速统一字幕偏移（正向或负向延迟）</li><li>修改帧率（用于从不同源转换视频）</li><li>检测并修复字幕重叠、间隔过短、过长等问题</li></ul><h3>字幕格式批处理</h3><ul><li>支持常见字幕格式互转：如 <code>.srt</code>、<code>.ass</code>、<code>.sub</code>、<code>.vtt</code> 等</li><li>支持 UTF-8、ANSI、Unicode 等多种编码转换</li><li>提供批量文本替换、去空字幕行、规范化字幕格式等自动化操作</li></ul><h3>精修同步字幕</h3><p>可切换为“波形图”或“频谱图”视图，辅助进行精确的起止时间调整。非常适合精修口型同步字幕或歌词字幕。</p><h2>常见误区说明</h2><ul><li><strong>MKVToolNix 并不能直接导出文本字幕</strong>：尽管有些 AI 推荐该工具提取 MKV 字幕，但实际上它输出的是 <code>.mks</code> 格式（容器文件），而非可读的字幕文本。</li><li><strong>HandBrake 不支持字幕提取</strong>：该工具适用于视频转码与压制，但无法直接提取字幕。</li></ul>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101599</id>
            <title>做了近视手术1年后，想和你分享的事</title>
            <link>https://sspai.com/post/101599</link>
            <guid isPermaLink="false">https://sspai.com/post/101599</guid>
            <pubDate></pubDate>
            <updated>Tue, 05 Aug 2025 08:48:09 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 近视, 眼镜, 屈光手术, 术后康复

<br>
<br>
总结: 1. 近视在古代已有记载，眼镜在元明时期传入中国，曾是奢侈品。2. 现代中国青少年近视率极高，眼镜可能成为全民必需品。3. 屈光手术通过改变角膜曲率矫正视力，与眼镜原理相同。4. 主流手术方式包括全激光、半飞秒和飞秒，需根据个人情况选择。5. 术前检查至关重要，确保手术安全性和个性化设计。6. 手术过程快速安全，但术后需注意康复和可能的并发症。7. 并发症如干眼症和眩光风险较低，但需遵医嘱护理。8. 手术需谨慎选择，非必要不做，保护眼睛健康最重要。 </div>
                        <hr>
                    
                    <p>近视自古就有。<br />像欧阳修在《归田录》自述「读书甚艰，惟使人读而听之」。晚年需侍从诵读文书，疑似高度近视+老花。而同时代的司马光编修《资治通鉴》时需贴纸辨字。<br />而改善视力的眼镜在13~14世纪左右在欧洲出现，元明时期传入中国。<br />作为高度近视患者，雍正更是眼镜的大收藏家。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/5483b2dadeb932f286525498e8b8a0e5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>雍正戴眼镜照（合成）</figcaption></figure><p><br />造办处专门为雍正制作各式眼镜，任性的雍正皇帝还动不动就赏赐有功之臣眼镜一副！可见当时眼镜属于「奢侈品」。</p><figure class="image ss-img-wrapper image_resized" style="width: 502px;"><img src="https://cdnfile.sspai.com/2025/08/05/1640e70ca15d3e7416ee2385d25193d8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>白铜玳瑁眼镜「清」</figcaption></figure><figure class="image ss-img-wrapper image_resized" style="width: 508px;"><img src="https://cdnfile.sspai.com/2025/08/05/ea6ffa8db4b819541fcb434151ef8cfc.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>茶色水晶眼镜「清代」</figcaption></figure><p>近视在古代属于「富贵病」，而如今中国儿童青少年总体近视率高达52.7%（2020年），高中生近视率达到了恐怖的80.5%。</p><p>照这个趋势发展，以后眼镜要「全民佩戴」了。</p><p>除了戴眼镜，解决近视的另外一种途径就是做<strong>屈光手术</strong>。</p><p>去年狠心跺脚决定做了人生第一台手术：全激光近视手术。 &nbsp;</p><p>对近视手术听的比较多应该是飞秒激光手术。</p><p><strong>奉劝大家一句，如果你的眼睛条件符合，能做飞秒就不要选择全激光，因为它太疼了！</strong></p><p>前3天基本上都要带着眼罩，3个小时滴一次眼药水，太疼就吃止疼片，角膜3天就差不多自动愈合了，眼睛就逐渐清楚了，再带半年墨镜…… &nbsp; &nbsp;</p><h2>屈光手术的目的是改变角膜曲率 &nbsp;</h2><p>屈光手术和戴眼镜的原理一样。</p><p>都是通过直接或间接改变角膜的曲率，让眼睛达到正常视力，戴眼镜是从外部改变，而手术是直接在眼睛内做功。 &nbsp;&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 566px;"><img src="https://cdnfile.sspai.com/2025/08/05/450ce45d9b2b225778f352679e5cc0a1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>屈光不正在眼球中的成像原理</figcaption></figure><p>角膜和晶状体是影响屈光能力的，角膜是眼球前部的透明、弧形组织，是光线进入眼内的第一道介质。它承担了眼睛大部分的屈光力（约占70%），其曲率直接影响光线的折射程度。<strong>屈光手术的原理就是通过改变角膜的形状，改变角膜曲率。</strong> &nbsp;&nbsp;</p><p>正常视力下， 光线经过角膜和晶状体的折射后，准确聚焦在视网膜上，形成清晰的图像。而屈光不正则是，如果角膜的曲率过陡或过平，光线不能准确聚焦在视网膜上，导致近视、远视或散光。</p><figure class="image ss-img-wrapper image_resized" style="width: 600px;"><img src="https://cdnfile.sspai.com/2025/08/05/56d827cb3ff6cb5e92b011f6e7c0ed2a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>角膜形状改变的原理</figcaption></figure><p>目前，主流的都是用激光方法，应用的有两种激光：准分子激光手术和飞秒激光手术。手术方式主要介绍三种：全激光、半飞秒、飞秒 。 &nbsp;&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 602px;"><img src="https://cdnfile.sspai.com/2025/08/05/ae54249c8131b75d2cc5eb32c9bdf814.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>手术激光的类型</figcaption></figure><figure class="image ss-img-wrapper image_resized" style="width: 600px;"><img src="https://cdnfile.sspai.com/2025/08/05/ae95ed78d51a7d97f1c370b12fb36e10.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>激光手术术式选择</figcaption></figure><p>手术选择的时候，一定要根据自己的情况来进行选择，千万别跟风网上说哪种好就做哪种，适合自己的就是最好的！毕竟眼睛的术后康复情况适合自己的手术选择直接挂钩的，眼睛是自己的，一定要慎重选择！</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/d39ef54902ff49dc226b61ed7e9a26f4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>手术选择考虑因素</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/09260053c49d9787e51c194274b44390.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>术式对比</figcaption></figure><h2>手术过程没有想象的那么可怕&nbsp;</h2><p>如果你要决定做屈光矫正手术的话，那么最重要的一步就是要做全面的术前检查。</p><p>术前检查的目的是全面了解你眼睛目前的状况，匹配适合的手术类型。 &nbsp;</p><p>术前检查主要目的是确保手术的安全性和个性户手术设计。</p><p>通过了解眼睛和角膜的状态，根据眼睛的度数（超过600度可能要做晶体植入）、裂纹灯下检查是否有伤口等，角膜地形图等重要的检查项目来全面对眼睛做一次「体检」。书签检查项目大约在500元左右，有些私立医院可能免费或者象征性收费或免费，不管选择什么医院，一定要选择正规的就没错了。</p><p>术前检查的项目大致如下： &nbsp;&nbsp;</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/0f7299bcdddd332e0a0b3269783ca070.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>手术前检查项目</figcaption></figure><p><strong>需要注意的是</strong></p><ol><li>检查前停止佩戴隐形眼镜（软镜1周，硬镜3周以上），避免化妆。</li><li>检查耗时：1.5-2个小时（如果排队的话时间更久）。散瞳后会出现短暂视物模糊，不耽误坐地铁，害怕的话可以找个人陪着一起去。</li><li>检查有效期3个月，所以检查完药在3个月内做手术，超期要重新检查。</li></ol><p>屈光手术的手术过程感觉会劝退很多人，怕手术过程中发生意外导致眼瞎。大家不要担心，存在一定概率的手术失败的风险，但是目前手术已经非常成熟了，而且大部分手术都是靠设备来完成，正常情况下还是比较安全准确的。<br />选择什么手术类型都是因人而异，<strong>没有最好的手术，只有最适合的手术</strong>。</p><figure class="image ss-img-wrapper image_resized" style="width: 616px;"><img src="https://cdnfile.sspai.com/2025/08/05/5b5e6a3d15a1d2ed78178004bf5f79bb.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>江苏省中医院价目表（无利益相关供参考）</figcaption></figure><p>因为我的角膜比较薄，没法做飞秒手术，我选择的是全激光手术（准分子激光切削术）。</p><p>说下我做手术的过程。 &nbsp;</p><p>手术前要提前3天滴医院给的眼药水（约手术前医生会开给你），因为我约手术的时间是一个月后，时间长忘记提前滴眼药水了……&nbsp;</p><p>大家引以为戒，千万别忘了。</p><figure class="image ss-img-wrapper image_resized" style="width: 636px;"><img src="https://cdnfile.sspai.com/2025/08/05/27dc678465686100e28e5c1f7edca2e6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>近视激光手术须知（江苏省中医院版）</figcaption></figure><p>因为已经请好假了，下次手术要约到两周后（手术医生要到外地开会），所以跟预约的医生沟通，让我在医院现场滴，帮我约了最后一台手术。 &nbsp;</p><p>接下来就是要开始手术了！进入手术室前，医生会帮忙先帮忙清洗眼睛，穿好手术服，医生会告诉你手术的主意事项，排队等手术。</p><figure class="image ss-img-wrapper image_resized" style="width: 627px;"><img src="https://cdnfile.sspai.com/2025/08/05/a133fba2d4e63c6e5e6b6a77d46ba357.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>手术室外</figcaption></figure><p>手术开始前，先在手术台上躺好，医生会确认你的姓名，然后和旁边的助理医生确定我的数据和矫正度数（我眼睛条件只能矫正到1.0），医生耐心的说，很快，5分钟只能搞定，不要紧张。 &nbsp;</p><p>手术开始，眼睛会被一个固定器规定住，眼皮撑开，然后滴入麻药（类似眼药水，没感觉）。</p><p>手术过程中，保持眼球不动，坚持10-15秒，不要眨眼睛，盯住上方的绿色指示灯，设备会追踪眼球，偏移1mm内可以自动校准。因为我中途紧张，频繁眨眼睛，医生说「你幸亏选择了全激光，做飞秒的话，这台手术就失败了」。</p><p>我害怕影响手术效果，结束问医生会不互影响手术质量，他们说没关系，设备都是3D定位的，没有影响。 &nbsp;</p><p>手术过程中会听到轻微的“兹兹”声，眼睛会微微有点胀，不会感觉疼，闻到毛发烧糊的味道。2个眼睛做完用了三四分钟就完成了。 &nbsp;</p><p>结束后，医生给带上绷带镜（医院里提前买好，也可以在网上买），三天内不能取下，眼睛不能进水，医生开的眼药水2个小时第一次，第二天再来复查。然后静坐30分钟，没有异常就可以回家啦。&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 610px;"><img src="https://cdnfile.sspai.com/2025/08/05/76cf7695faef7b24b3290f27eac4db3a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>术手注意事项</figcaption></figure><h2>最重要的事术后康复和并发症</h2><p>屈光不正手术其实不算可怕，飞秒手术第二天就可以正常上班了。可怕的是术后的恢复期以及可能伴随的并发症风险。<br />也别害怕，手术完之后几乎不会瞎。<br />严重并发症的风险很低（估计每4000例手术中就有一例）<br />作为对比<br />每2000名隐形眼镜佩戴者中就有1人因经常使用隐形眼镜而出现严重并发症。<br />其中最常见的并发症为干眼症和眩光。</p><ol><li>干眼症（全飞秒最不易发，切口最小）：眼干、异物感、视疲劳。需要长期滴人工泪腺预防。</li><li>眩光原因</li></ol><ul><li>手术欠矫或是过矫</li><li>角膜磨平区域和没磨平区域过度不平滑</li><li>角膜上皮愈合不良</li><li>角膜上皮下混浊（HAZE）</li><li>晶体植入手术的中央孔需要适应</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/feb0d8dfdd5b94d40ceaca1cf21f604f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>不同术式康复差异&nbsp;</figcaption></figure><p>一般来说，手术过程中设备越好，切口越精细，恢复的越好，医生的水平也对术后的恢复情况有一定影响。</p><p>在康复期间，切记不能揉眼、游泳、停止用药或者乱用药，通过科学的护理和干预，3个月内基本都可以获得稳定的视力。不用过于担心，严重的并发症比较罕见，如果在康复过程红出现异常疼痛或者势力骤降，一定要立即就医，不要拖延。&nbsp;</p><h2>写在最后：手术需要知道的几件事&nbsp;</h2><ol><li>近视手术是按需手术，如果你需要就做，如果不需要不要赶潮流。手术有利有弊，谨慎选择。</li><li>医院选择：选正规的、大型的或者连锁的专业医院，不要因为费用就选择「小作坊」。如果费用充足就选择大型连锁私立医院，公立医院一定选择临床经验丰富的来做。</li><li>选择有最先进设备的医院，目前市面上比较先进的设备是：阿玛仕1050、蔡司VisuMax3.0等。手术设备是手术成功率的基础，更好的设备带来的是更好的手术体验和更好的术后康复效果。</li><li>手术康复期间不要焦虑，不要害怕，有问题可以找医生问问缓解自己的焦虑，短期视力不稳定是正常现象，不用过度关注。</li><li>一定要遵守医嘱，按时滴眼药水，合理用眼，不要抱有侥幸心理，在康复期间一定要注意用眼安全。</li></ol><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/f059ebb88c1f605df1b8885d1138a7bf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>不适合做近视激光手术的情况</figcaption></figure><p>如果你想好要做近视手术的话，希望这篇文章能给带来帮助。</p><p>再次提醒，如果没有需求，不要强行做，毕竟手术有风险。</p><p>当然，最好是永远不要有近视的困扰，保护眼睛从生活中的用眼健康开始。</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101430</id>
            <title>我做了一款PS？轻量级网页贴图工具JustWhiteboard</title>
            <link>https://sspai.com/post/101430</link>
            <guid isPermaLink="false">https://sspai.com/post/101430</guid>
            <pubDate></pubDate>
            <updated>Tue, 05 Aug 2025 08:33:40 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 贴图工具,轻量级应用,图片排版,本地处理  
<br>  
<br>  
总结: 作者从日常贴图需求出发，指出传统图片处理软件存在体积大、成本高、操作繁琐等问题，提出开发轻量级网页应用JustWhiteboard的理念。该工具具备开箱即用、无云端存储、无线画布等特点，专注于基础图片排版功能，支持本地处理和一键导出。文章展示了该工具在快速拼贴图片、结合AI出图等场景的实际应用，并提供了试用链接。 </div>
                        <hr>
                    
                    <h2>从日常贴图中说起</h2><p>我上大学的时候，读的是城乡规划专业，在那个时候就经常会做接触到photoshop工具，用作平时作业的排版和修图工具，但随着毕业后的转行，PS工具已经慢慢淡出了我的生活。</p><p>然而在平时的工作生活中，无论是写方案还是其他的一些场景，有时候都需要把一些图片贴到一起，就拿最近接触到的一个场景来说，在少数派中写文章贴图，由于文章编辑器的限制，每行就只只能贴一张图，如下文章中的贴图：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/29/005cb423bba81f545b7e7541f3ae07ee.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>文章中的单行单张贴图</figcaption></figure><p>但很多情况，需要介绍到一些日常使用的APP或者是小程序，单行单图的排列方式，会过于占用文章的空间，多数的人都会采取把多张图贴在一起，再放入文章中，如下文章中的贴图：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/29/9ed77f8e2e41db49160fc83860e486cb.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>除了少数派的写作，在word的场景中贴图，也会发生类似的情况，当需要将两张或者多张图进行排列的时候，要么在文档中单张放置，但是需要逐张调整长宽，三张及以上调整会更加繁琐；要么就先拼贴再一起，再把图片放到文章中。</p><p>如果要完成这种贴图，一般会根据情况使用不同的图片处理软件，如Photoshop、美图秀秀、甚至是ppt等，无论是使用在线的或者本地的都会遇上以下一种或者多种情况：</p><ol><li>需要下载体量不小的软件，运行软件时，系统占用率高，导致配置低或者使用年限较高的电脑卡顿；</li><li>正版软件成本昂贵，盗版软件注册需要学习成本；</li><li>受限于画布的大小，如果画布不够大，还需要扩大画布进行操作；</li><li>需要会员或者是增值服务，才能使用一些指定的功能，如导出高清图、导出透明背景的图；</li><li>在线的工具多数需要进行注册，而且会自动上传文件到云端进行备份。</li></ol><h2>JustWhiteboard的设计理念</h2><p>目前的软件都有一个趋势，越来越复杂，功能越来越臃肿，我想能不能用最简单的的方式，做一个网页应用，可以解决我最常见的贴图功能需求，它不是要取代Photoshop这样的专业工具，而是要为那些只需要基础图片处理功能的用户提供一个更好的选择。就像不是每个人都需要跑车，但是有个代步工具更好的。</p><p>从这个想法出发，我开始着手进行工具的设计，在开始项目之前，我有了关于这个项目的一些初始理念：</p><ul><li>开箱即用：主要内容就是画布，需要打开工具就是画布，可以直接在画布进行贴图排版，实现最直接有效的使用；</li><li>轻量级、无云端、用完即弃：无需下载，适用于轻使用，用于不需要多次回顾修改的贴图场景；</li><li>无线画布：不约束画布大小，可以自由排图。</li><li>核心功能：具备图片排版的一些核心功能，摒弃其他无关功能。</li></ul><p>在AI编程工具的帮助下，我完成了这个产品的「JustWhiteboard」，一张白板而已。</p><h2>产品特点</h2><ul><li>基于浏览器运行，无需安装，输入网址即可使用，操作方便、快速；</li><li>核心功能前置，常用的功能都在页面上一览展示，包括</li><li>隐私保护，本地处理，所有图片完全在浏览器本地存储，不上传数据到服务器；</li><li>图片拼贴，在画布中可以随意进行图片自由布局，支持图层的管理，拖拽排序；</li><li>可以一键导出jpg和png格式图片。</li></ul><h2>目前使用的实践</h2><ul><li>实现最初的贴图需求，复制图片和截屏图片后，直接粘贴排图，导出使用（多数情况下，我的使用习惯是通过复制微信传输文件，或者结合截图功能，直接截图功能，复制后直接粘贴使用）；</li></ul><figure class="image ss-img-wrapper"><img alt="20250730_064229.mp4 [video-to-gif output image]" src="https://cdnfile.sspai.com/2025/07/30/article/bb2bbbf0498c0f98470e064066030dca.gif" /><figcaption>快速贴图-排版-导出</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/30/c33d51922f92fe70f4a2e38f4cfb0045.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>以网易云音乐为例</figcaption></figure><ul><li>结合AI出图工具，给与指定的的提示词，可快速输出可一些透明背景的图；例如「“图片描述”+仅主体着色、背景为单一“主体的反差色”。”」</li></ul><figure class="image ss-img-wrapper image_resized" style="width: 664px;"><img src="https://cdnfile.sspai.com/2025/07/30/3b7c6fa2f7fa14dc07e80fe134e3ec41.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>豆包出图</figcaption></figure><figure class="image ss-img-wrapper"><img alt="云朵.mp4 [video-to-gif output image]" src="https://cdnfile.sspai.com/2025/07/30/article/aab8d03a95bbb325445d7bb92ced0e77.gif" /><figcaption>使用工具快速贴图-去除相似元素-导出PNG透明背景图</figcaption></figure><h2>如何试用</h2><p>当前的版本仅为MVP的使用版本，主要目的是基于一些自己的日常使用需求实现的，如果大家有兴趣，可以直接访问：<a href="https://sikasnbzskaz.sealoshzh.site/">Just Whiteboard</a> &nbsp;进行尝试。（PS：如果无法打开了，就是服务器没钱了）<br />期待大家讨论日常的一些“轻需求”，我也希望从别人的视角看到更多不一样的东西。</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101521</id>
            <title>一张图片显示两种内容</title>
            <link>https://sspai.com/post/101521</link>
            <guid isPermaLink="false">https://sspai.com/post/101521</guid>
            <pubDate></pubDate>
            <updated>Tue, 05 Aug 2025 02:44:16 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 图片显示原理,PNG格式,主题切换,网页工具  
<br>  
<br>  
总结: 本文介绍了一种在单张PNG图片中显示两种内容的原理，利用PNG的透明特性，通过交替抠取两张图片的像素并叠加，实现在纯白或纯黑背景下显示不同图像的效果。视觉上，由于像素点均匀分布，观感仍保持清晰。文章还推荐了一款网页工具，帮助用户快速制作此类图片，适用于支持主题切换的平台（如少数派），实现主题变化时图片内容随之切换的效果。 </div>
                        <hr>
                    
                    <p>本文将介绍在一张图片中显示两种内容的原理，以及推荐一款我写的网页小工具，让你快速制作一张类似的图片。</p> <p>在看文章的你，不妨试着修改下少数派的主题色，切换一下明暗主题，即可看到下面的图片内容发生变化。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/0aab03203a452fa16cb104c6ffe1fc36.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>如果你使用网页版，点击这张图就会看到图片内容变化</figcaption></figure><p>这种图片内容切换生效的前提条件是：&nbsp;</p><ul><li>图片存储格式为 PNG</li><li>查看图片的背景是纯白或纯黑</li></ul><h2>「均匀地」抠图</h2><p>我们都知道图片格式有 PNG、JPEG、webP 等，但 PNG 可以保存图片的透明部分，我们也是利用它可以保留透明部分的特性，来实现一张图片塞下两张图片的内容。另外这里也利用了人类视觉天生具有弥补和联想能力的特性，在一张几千甚至上万个像素点的图片中，我们把它的像素点「均匀地」抠掉一半，基本不会影响整体观感。</p><p>这就类似小时候特别流行的小瓷砖拼接马赛克图案，如果瓷砖足够小、墙壁足够大，远看过去图片还是很「清晰的」。</p><p>所以我们可以选择两张图片：</p><ul><li>对于图片一，抠掉奇数行的偶数列，和偶数行的奇数列像素；</li><li>对于图片二，抠掉奇数行的奇数列，和偶数行的偶数列像素；</li></ul><p>然后将两张图片重叠成一张图片。这个过程用表格大概模拟一下就是（下图 1 表示显示图片 1 的像素、2 表示显示图片 2 的像素）：</p><figure class="table"><table><tbody><tr><td>1</td><td>2</td><td>1</td><td>2</td><td>1</td><td>2</td><td>1</td></tr><tr><td>2</td><td>1</td><td>2</td><td>1</td><td>2</td><td>1</td><td>2</td></tr><tr><td>1</td><td>2</td><td>1</td><td>2</td><td>1</td><td>2</td><td>1</td></tr></tbody></table></figure><p>这样我们就得到了一张混合了两张图片像素的图片，虽然没有那么精细——毕竟每张图片我们只取了一半的像素过来，但不影响最终视觉观感。接下来要做的就是如何：</p><ul><li>在白色背景下只显示图片 1</li><li>在黑色背景下只显示图片 2</li></ul><p>这样才能达到我们切换黑白背景时，同一张图片显示不同内容的目的。</p><h2>调整 PNG 参数</h2><p>PNG 的像素数据一般由「红 R、绿 G、蓝 B、透明 A」 组成，接下来我们只要把 RGB 改成全部 255 或者 0，就能显示全白或者全黑的图片。在这个基础上通过设置透明度 A，让该像素具备不同的明暗度，就能显示图片的黑白效果。</p><p>换句话说，假设背景是白色的时候，有一张<strong>黑白偏白</strong>的图片是看不见的；而当背景是黑色的时候，<strong>黑白偏黑</strong>的那张图片则是看不见的。</p><p>现在很多平台比如少数派都有主题切换的功能，刚好具备在白色和黑色之间做切换的能力。所以我们就可以做一张融合了两张黑白图片的图片，来达到主题变化带动图片变化的效果。</p><figure class="image ss-img-wrapper image_resized" style="width: 449px;"><img src="https://cdnfile.sspai.com/2025/08/05/65702c2822acd1a6f98161894ea978c2.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>暗色主题看到的是这张图</figcaption></figure><figure class="image ss-img-wrapper image_resized" style="width: 449px;"><img src="https://cdnfile.sspai.com/2025/08/05/0d869fcb2813412fb54aeb5727c3a6c2.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>亮色主题看到的是这张图</figcaption></figure><h2>快速制作</h2><p>如果你觉得这样的小巧思比较有意思，也想做一张这样的图，那么我也写了一个<a href="https://dogodo-cc.github.io/black-white-image/" target="_blank">小工具</a>供你使用。</p><figure class="image ss-img-wrapper image_resized" style="width: 489px;"><img src="https://cdnfile.sspai.com/2025/08/01/262a74f88b61b2712ac2152ed214351d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>工具截图</figcaption></figure><p style="margin-left: 0px;">&gt; 下载 <a href="https://sspai.com/page/client" target="_blank">少数派 2.0 客户端</a>、关注 <a href="https://sspai.com/s/J71e" target="_blank">少数派公众号</a>，了解更妙的数字生活 🍃</p><p style="margin-left: 0px;">&gt; 实用、好用的 <a href="https://sspai.com/mall" target="_blank">正版软件</a>，少数派为你呈现 🚀</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101559</id>
            <title>KeyboardHolder：让输入法真正“理解”你的使用习惯</title>
            <link>https://sspai.com/post/101559</link>
            <guid isPermaLink="false">https://sspai.com/post/101559</guid>
            <pubDate></pubDate>
            <updated>Mon, 04 Aug 2025 02:05:09 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: KeyboardHolder, macOS, 输入法切换, 自动切换  
<br>  
<br>  
总结: KeyboardHolder 是一款 macOS 输入法管理工具，旨在解决多语言用户频繁手动切换输入法的问题。它支持为不同应用设置自动切换输入法，包括浏览器地址栏的独立识别和域名策略。工具提供细致的提示机制配置，支持全局和自定义快捷键，并具备应用排除、开机自启等功能。KeyboardHolder 以智能、灵活的方式提升输入效率，适用于开发者、写作者等多语言用户。 </div>
                        <hr>
                    
                    <p>KeyboardHolder：让 macOS 输入法自动切换更智能、更安静</p><blockquote><p>从此告别手动切换输入法的烦恼，专注你的每一次输入。</p></blockquote><p>在 macOS 上使用多语言工作的用户，对「输入法切换」这一操作再熟悉不过。但当我们在中英文应用间频繁切换时，系统原生的输入法管理显得力不从心：</p><ul><li>打开 Xcode 却还停留在中文输入；</li><li>写完一段代码切换到微信，又得手动切回中文；</li><li>浏览器中地址栏和页面输入框还得用不同输入法……</li></ul><p>有没有一种方式，<strong>让输入法根据应用自动切换</strong>，像切换工作区一样顺滑自然？</p><p>今天推荐的这款工具 <strong>KeyboardHolder</strong>，或许正是你一直在找的 macOS 输入法管理神器。</p><hr /><h2>🎯 核心功能一览</h2><h3>🚀 启动 / 激活自动输入法切换</h3><p>你可以为每一个 App 设置「启动输入法」和「激活输入法」，例如：</p><ul><li>打开 Safari 默认切换到英文；</li><li>切回微信时自动切换回中文；</li><li>Markdown 编辑器 Typora 永远保持中文。</li></ul><p>再也不用频繁按下 <code>Ctrl + Space</code> 或 <code>⌘ + Space</code>，你的输入节奏从未如此流畅。</p><hr /><h3>🌐 浏览器地址栏识别</h3><p>浏览器的地址栏和网页正文输入有明显区别。KeyboardHolder 支持「地址栏输入法独立切换」功能：</p><ul><li>自动识别焦点是否位于地址栏；</li><li>可根据域名设置输入法策略（如访问 <code>*.github.com</code> 自动切换英文）。</li></ul><p>轻松解决在浏览器中频繁切换语言的痛点。</p><hr /><h3>🔕 安静的提示机制</h3><p>每次输入法切换时，系统的提示总显得多余？</p><p>KeyboardHolder 提供极为细致的提示机制配置：</p><ul><li>仅在输入法实际变化时提示；</li><li>支持提示浮窗显示在光标附近；</li><li>自定义提示窗口位置、显示时长；</li><li>支持关闭提示，保持界面极简。</li></ul><hr /><h3>🛠️ 全局与自定义快捷键配置</h3><p>支持为常用输入法设置 <strong>全局快捷键</strong>，或限定某些应用中使用自定义快捷方式，适配不同输入法框架（如 Rime、QQ拼音、Squirrel 等）。</p><hr /><h3>📦 其他强大功能</h3><ul><li><strong>应用排除列表</strong>：避免输入法干扰游戏、远程桌面等。</li><li><strong>开机自启、隐藏 Dock / 菜单栏图标</strong>：专为极简用户设计。</li><li><strong>自动更新功能</strong>：保持最新功能和兼容性。</li><li><strong>开发者支持页面</strong>：随时查看版本更新与反馈信息。</li></ul><hr /><h2>🌱 安装与获取</h2><p>目前 KeyboardHolder 已支持 macOS 12 及以上系统，支持 Apple Silicon 和 Intel 架构。你可以通过以下方式安装使用：</p><ul><li>主页：<a href="https://keyboardholder.leavesc.com/">https://keyboardholder.leavesc.com</a></li></ul><hr /><h2>💡 写在最后：输入法切换的最终解决方案？</h2><p>macOS 的输入法切换问题一直是多语言用户心中的痛点，虽然系统已经做了一些努力，但仍显笨拙和被动。而 KeyboardHolder 的出现，不是为了取代系统，而是以更加 <strong>灵活、智能、优雅</strong> 的方式接管这一任务。</p><p>对于开发者、写作者、设计师、程序员来说，<strong>它将成为你的输入效率增强器</strong>。</p><hr /><blockquote><p><i>如果你也曾因输入法频繁出错而烦躁，不妨试试 KeyboardHolder，也许你会惊喜地发现：原来输入也可以如此顺滑。</i></p></blockquote><p>📣 <strong>欢迎转发分享，也欢迎在评论区留言交流你的使用体验与建议！</strong></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101558</id>
            <title>记录 Jellyfin 实现公网访问的配置流程</title>
            <link>https://sspai.com/post/101558</link>
            <guid isPermaLink="false">https://sspai.com/post/101558</guid>
            <pubDate></pubDate>
            <updated>Sun, 03 Aug 2025 23:33:16 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Jellyfin服务器,远程访问,公网IP,SSL证书  

总结:  
1. 文章是一篇个人服务器配置教程，指导如何实现Jellyfin服务器的远程访问功能。  
2. 强调公网暴露私人设备存在安全风险，建议提前了解相关网络安全知识。  
3. 详细介绍了申请公网IP、修改光猫为桥接模式、注册域名并绑定IP、申请SSL证书等步骤。  
4. 提供了两种启用Jellyfin HTTPS访问的方案：直接配置Jellyfin或通过Nginx反向代理。  
5. 说明了设置路由器端口转发的方法，以实现公网访问内网设备。  
6. 介绍了配置DDNS（动态域名解析）以应对动态公网IP的变化。  
7. 提醒不要公开自己的IP/域名和端口，确保安全性。  
8. 教程适用于个人/家庭使用，硬件基于树莓派4B，软件使用Docker部署的Jellyfin。 </div>
                        <hr>
                    
                    <blockquote><p>前排提醒：</p><p>本文是个人的服务器配置记录兼小白教程，仅实践于个人/家庭 Jellyfin 服务器实现远程访问功能。</p><p>所记录的过程同样适用于大多数的私人网络服务搭建，但公网暴露私人设备存在<strong>安全风险</strong>，可提前了解服务器部署及网络安全相关知识后斟酌采用；</p><p><i><strong>切记不要公开自己的 IP/域名和端口！！！</strong></i></p><p>先确定一下个人动机：</p><ul><li><strong>为什么搞</strong>：老妈有需求</li><li><strong>为什么不用视频app</strong>：因为不想给某腾某艺爆米</li><li><strong>为什么不用内网穿透</strong>：速度感人</li><li><strong>为什么不用云服务器</strong>：贵，而且有闲置树莓派</li><li><strong>为什么用阿里</strong>：碰巧撞见，碰巧有号，全流程免费，无利益相关</li></ul><p>硬件：树莓派4B: Ubuntu Server（无桌面）系统</p><p>软件：Jellyfin（docker 部署）</p></blockquote><hr /><h2>1. 向运营商申请公网IP</h2><p>直接使用运营商app客服，人工服务申请公网IP（免费），一般 3~5 天左右完成，申请难度因地区而异</p><blockquote><p><strong>注意：</strong><br />申请完公网IP之后客服可能会告知也可能不会告知，可以打电话或客服问一下；</p><p>这时自己的路由IP和光猫IP也不会发生变化，且与公网IP不一致，因为光猫没有重新拨号，还是使用路由模式 DHCP 分配你的路由器IP，需要改桥接。</p></blockquote><p>申请完成后网页搜索“我的ip”，随便进一个网站查看自己的公网IP与路由器IP地址是否一致，若一致则说明成功拥有公网IP，不一致则说明仍然处于大内网下（注：不要使用代理，否则看到的是代理服务器的IP）。</p><h2>2. 修改光猫为桥接模式</h2><p>提前记下自己的宽带账号与密码，不知道的问运营商客服</p><p>直接打电话给维修小哥，说光猫改桥接拨号，几分钟搞定（免费），路由器的 WAN 设置会变成 PPPoE 拨号模式：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/03/5e8dc4e69c69c39b7ddeed228294a956.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><blockquote><p>虽然网上有很多破解光猫的方法，但是不建议小白操作，很容易光猫变砖，且大多数方法早已失效；</p><p>可以使用超级管理员操作，不过较新的光猫的超级管理员账户密码每次重启光猫都会变化，需要安装小哥现场查询，破解成本极高也不一定有效，因此建议一个电话解决。</p><p><i><strong>搞机佬可忽略</strong></i></p></blockquote><h2>3. 注册域名并绑定IP</h2><p>在域名提供商处购买域名，网上也有很多免费版域名获取途径，我使用的是阿里云免费版域名，因此后续步骤都以阿里云为例子，其他平台也都大同小异（如 Clouldflare），购买后可以进入<a href="https://dnsnext.console.aliyun.com/authoritative">云解析DNS控制台</a>进行后续配置</p><p>页面上可以看到自己已有的域名，点击后面的解析：</p><figure class="image ss-img-wrapper image_resized" style="width: 664px;"><img src="https://cdnfile.sspai.com/2025/08/03/5f607b5f5dedeea1bc52e5cc981b29c3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>添加记录，<strong>主机记录</strong>中输入二级域名（自定义，如 media ，如果服务器只用于单一服务可以直接用 <code>www</code> 或 <code>@</code> 指向主站），<strong>记录值</strong>中输入公网IP（ipv4地址选择记录类型 A，ipv6选择记录类型 AAAA）：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/03/15145b8146cd06b00674ac3cd091caff.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>其他选项不变，保存即可，可以使用平台检测 DNS 解析是否正确。</p><h2>4. 申请SSL证书</h2><p>网上有很多SSL证书的申请办法，因为个人是从阿里云买的域名，因此证书也顺便在阿里云搞定了，<strong>其他平台申请的证书同样适用于后续流程</strong>，可以考虑 Let's Encrypt 或者 Clouldflare<strong>。</strong></p><p>在阿里云申请<a href="https://yundun.console.aliyun.com/" target="_blank">个人免费ssl证书</a>，阿里云的个人测试证书（免费证书）每个账号一年可以领20个，但是每个证书有效期只有3个月（<i><s><strong>🐶ali</strong></s></i>）<strong>失效后需要手动更新</strong>，领取后在SSL证书管理页面创建证书：</p><figure class="image ss-img-wrapper image_resized" style="width: 576px;"><img src="https://cdnfile.sspai.com/2025/08/03/f836e615fb065f620a3862c4d62e6c96.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>填写刚添加的域名：</p><figure class="image ss-img-wrapper image_resized" style="width: 359px;"><img src="https://cdnfile.sspai.com/2025/08/03/bbb81b4f6ce06a89823badb96a107669.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>后面需要填写一些实名信息之类的，不做展示，几分钟后邮箱或短信会收到证书签发成功的通知</p><p>申请完证书可以在控制台看到证书，选中后点击下载，需要的证书格式是 pem 和 pfx/key 两种：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/03/e1bc6a7e5dba311fd671c5a57909953f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>下载后备用。</p><h2>5. 启用 jellyfin https 访问</h2><p>为了安全考虑，公网访问 jellyfin <strong>一定要使用 https 访问</strong>，推荐的实现 https 方案有两种：</p><ol><li>直接在 jellyfin 中启用 https 访问，并配置证书</li><li>通过 Ngnix 反向代理并配置 ssl 证书</li></ol><blockquote><p>建议两种方法中<strong>仅使用其中一种</strong>即可</p><p>如果服务器仅用于 jellyfin 服务且没有额外的开放端口，则推荐方法1</p><p>如果服务器上运行多个服务，或以后有开放其他端口的打算，希望通过 Nginx 统一管理，则推荐方法2。</p></blockquote><p>浏览器https默认请求443端口，因此在有些浏览器中需要添加<code>https://</code>前缀才能访问 jellyfin https</p><h3>5.1 jellyfin启用https</h3><p>解压 pfx 格式证书压缩包，解压后可以获得一个 pfx 格式的<strong>证书文件</strong>和一个 txt 格式<strong>密码文件</strong>，将 pfx 文件放到 jellyfin 可访问的某个路径下（建议放在<code>.../config/ssl</code>，我是使用 docker 部署的，所以放在了挂载路径下；</p><p>进入 jellyfin 控制台，选择网络，启用https，端口号改不改都可以，但自己一定要记住</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/03/8edb4cfd85461370d868b1abdd4c35a0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>在下面的HTTPS设置中填写证书路径与证书密码（密码在密码文件中）：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/03/86c892acb330adb2f0f4f0b11a8869e5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><blockquote><p>ps: 不建议开启强制 https，否则所有的 http 访问都会重定向到 https，当 ssl 证书过期或发生其他访问问题时就无法通过浏览器访问 jellyfin （<strong>把钥匙锁屋里了</strong>）；发生这种情况时需要手动修改 jellyfin 的 config 文件或重新部署</p></blockquote><p>上述配置完成后点击保持，重启 jellyfin，在浏览器输入<code>https://&lt;your_jellyfin_host&gt;:8920</code> 检查是否可以正常通过 https 访问。</p><h3>5.2 Nginx反向代理（可选）</h3><p>使用 Nginx 反向代理可以将所监听的端口请求转发到本地的其他服务端口，如果已经开启了 jellyfin 的 https 访问则<strong>不需要再通过 Nginx 配置 ssl</strong>。</p><p>安装Nginx的方法可以在<a href="https://nginx.org/en/docs/install.html" target="_blank">Installing nginx</a>中找到，在添加了软件源且满足依赖条件的 Ubuntu/Debian 系统中可以直接用 apt 安装：</p><pre class="language-shell"><code>sudo apt update
sudo apt install nginx</code></pre><p>Linux系统中，Nginx 的配置文件位于<code>/etc/nginx/conf.d</code>文件夹下，在Nginx的默认配置文件中，已设置自动加载<code>conf.d</code>文件夹下所有的<code>.conf</code>文件，因此新配置文件可以在<code>conf.d</code>下创建，如<code>default.conf</code>；</p><p>将之前下载的 pem/key 格式的证书解压缩到<code>/etc/nginx/ssl/</code>，可以获得 pem 和 key 两个文件；</p><p>在配置文件中添加配置项：</p><pre class="language-null"><code>server {
    listen &lt;要监听的端口号&gt; ssl;
    server_name &lt;你的域名&gt;;

    ssl_certificate &lt;pem 证书路径&gt;;
    ssl_certificate_key &lt;对应的 key 文件路径&gt;;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://127.0.0.1:8096/;  # 后端服务端口
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}</code></pre><p>&nbsp;</p><blockquote><p>端口号理论上可以随便设置，但实际上尽量不要在公网暴露敏感端口（如80、8080，443等）以及系统与其他程序占用的端口和低位端口，也不要暴露 jellyfin 的原始端口（8096、8920），选择不常用的高位端口进行监听不容易被他人扫描</p><p>后端的转发端口设置为8096是因为 ssl 已经由 Ngnix 处理，不需要再走一遍 jellyfin 的 https，jellyfin 中也无需开启 https；</p></blockquote><p>将所有端口、域名和路径补完，保存配置文件，检查配置文件是否可用：</p><pre class="language-shell"><code>sudo nginx -t</code></pre><p>加载新配置：</p><pre class="language-shell"><code>sudo nginx -s reload</code></pre><p>配置完成后，在浏览器输入<code>https://&lt;your_jellyfin_host&gt;:&lt;port&gt;</code> 检查是否可以正常 https 访问</p><h2>6. 设置路由器端口转发</h2><p>获得公网IP后，实际上公网IP指向的是路由器地址，内网设备并不直接暴露于公网；<br />通过设置<strong>端口转发</strong>可以将路由器收到的对应端口请求转发到内外设备，不同路由器端口转发设置方法大同小异，</p><p>以 H3C NX54 为例，在<code>专业版 &gt; 高级设置 &gt; 地址转换 &gt; 虚拟服务器列表</code>中添加条目：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/03/16c0d4971caaec99e3229cb01f17bf50.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>外部端口填写要在公网暴露的端口（不要暴露敏感端口），要暴露<strong>单一端口</strong>则起始端口和结束端口相同，内部端口填写 jellyfin 的 https 服务端口 或 Nginx 监听的 https 端口，内部服务器IP填写 jellyfin 部署设备的内网IP（可通过<code>ifconfig</code>查看）</p><p>设置完成后即可通过域名+端口号远程访问 jellyfin 服务器：</p><pre class="language-null"><code>https://&lt;your_domain_name&gt;:&lt;port&gt;

# &lt;your_domain_name&gt;：IP绑定的域名
# &lt;port&gt;: 路由器外部端口</code></pre><blockquote><p>默认情况下路由器收到未定义的端口请求时会直接将数据包抛弃，不要开启重定向 DMZ 主机选项（相当于服务器直接暴露公网）；如果是刷过机的路由器建议开启防火墙或者添加IP白名单，可以将Ngnix配置放到路由器上完成。</p></blockquote><h2>7. 配置DDNS</h2><p>非专线公网IP每次拨号都可能会动态改变，需要配置 DDNS 解析来动态更新域名指向；</p><p>通常来说更新域名绑定IP的原理是：通过路由器或服务器软件每隔一段时间检查服务器公网IP与域名绑定IP是否一致，当IP发生改变时，通过使用域名提供商的 API 向域名管理平台提交IP变更，从而实现动态IP绑定。</p><p>现在大部分路由器支持 DDNS 解析，但很不巧我的路由器（H3C NX54）不支持，<i><s>新华三可以从我的下一个路由器备选中滚蛋了</s></i>，因此 DDNS 软件选择 <a href="https://github.com/jeessy2/ddns-go">DDNS-GO</a>，支持了很多常见的域名管理平台。</p><p>通过 Docker 部署 DDNS-GO：</p><p>拉取镜像：</p><pre class="language-shell"><code>sudo docker pull jeessy/ddns-go</code></pre><p>docker-compose 文件：</p><pre class="language-null"><code>services:
  ddns-go:
    image: jeessy/ddns-go:latest
    container_name: ddns-go
    restart: always
    network_mode: host
    volumes:
      - ~/ddns-go/opt:/root</code></pre><p>启动 docker 容器：</p><pre class="language-shell"><code>sudo docker compose up -d</code></pre><p>浏览器访问 DDNS-GO 页面，默认端口号 9876。</p><p>以阿里云为例，通过 AccessKey 授权 DDNS-GO 修改域名绑定IP，在网页右上角的个人权限与安全中可以创建 AccessKey 与密码，</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/03/665a4283b10c6da75612bccfaef668ca.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><blockquote><p>建议使用 RAM 角色创建 AccessKey ，只授权有限的管理权限避免风险，若拥有主用户的 AccessKey 则可以控制此账号下的绝大多数配置，这是一件<strong>很危险的事情</strong></p></blockquote><p>进入 AccessKey 页面，创建用于程序访问的超级用户：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/03/d520d3935c325ff4563a3de119f5c014.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>登录名称可根据应用程序自定义设置（如 ddns-go-user），创建后会生成此用户的 AccessKey ID 和 AccessKey Secret（<strong>只显示一次</strong>，之后无法再次获取，所以需要立刻保存），将它们复制到 DDNS-GO 配置栏中</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/03/cf9ff7054a48abf4bc462b322367f1ae.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>保存设置，DDNS-GO 可自动检查IP并更新域名绑定。</p><hr /><p>到此公网访问的设置已经全部完成，可以通过 <code>https://&lt;your_domain_name&gt;:&lt;port&gt;</code> 远程访问家里的 jellyfin 服务器，可以将网址与端口分享给家人或朋友，组建家用的远程媒体服务器。</p><p><i><strong>切记不要公开自己的域名与端口！！！</strong></i></p><p><strong>本人小白，还在慢慢学习，搭建过程如有缺漏或更优方案也欢迎评论区大佬指点。</strong></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101250</id>
            <title>「宿舍改造札记」 繁而不杂，生活一隅</title>
            <link>https://sspai.com/post/101250</link>
            <guid isPermaLink="false">https://sspai.com/post/101250</guid>
            <pubDate></pubDate>
            <updated>Sun, 03 Aug 2025 07:00:00 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 桌搭,智能家居,收纳,校园生活  

总结:  
1. 作者分享了自己从初中到大学的桌搭经历，展示了不同时期的桌面布置。  
2. 大学宿舍空间有限，作者通过优化布局和收纳解决空间不足问题。  
3. 介绍了在校园网环境下使用备用手机共享热点连接智能家居的解决方案。  
4. 详细列举了桌面常用物品，包括智能音箱、键盘鼠标、咖啡机等，并评价其优缺点。  
5. 重点讲解了空间规划思路，包括垂直空间利用、分类收纳和隐藏式存储等方法。  
6. 使用挂钩、洞洞板、磁吸环等工具提高空间利用率。  
7. 通过合理收纳保持桌面整洁美观，同时保留部分空白区域用于装饰。  
8. 最终打造出一个既实用又个性化的学习生活空间。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;"><strong>Matrix 首页推荐&nbsp;</strong>&nbsp;</p><p style="margin-left: 0px;"><a href="https://sspai.com/matrix">Matrix</a>&nbsp; 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&nbsp;</p><p style="margin-left: 0px;">文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><hr /><h2>前言</h2><p>笔者从初中开始便对桌搭充满着浓厚的兴趣，在空余时间里总是有意无意地鼓捣自己的桌面，也翻阅和学习了不少桌搭的经典案例。</p><p>以下是本人曾经在书房做过的几次桌搭尝试 (远古的 1.0 版本找到的只有多次包浆的图，遂不纳入文中)：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/0116f4062bf2a40a8b05d18374e3703d.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>2.0 版本，鼠标垫还是我派水獭</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/23/c2039ddc477e644c34e60f70a6564bfd.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>3.0 版本，下图同样诞生于这个时期</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/23/84384d162d47d88548a1aee9f8769769.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>木质的家居配上暖光的氛围让人不想离开</figcaption></figure><h2>新起点：从自由舒展到有限空间</h2><h3>并不愉快的开始</h3><p>进入大学，从自己家中可以自由发挥的较大空间，到宿舍人均小得可怜的面积，桌搭的思路其实需要较大幅度地调整。如何在有限的空间内，在满足生活所需的配置中，探索出一条尽可能美观整洁的桌搭思路，是这个阶段所面临的主要问题。</p><p>很不幸，刚进入大学的我，被分配到了一片较为古早的园区。迎来的是历经数十年的狭小空间与破烂不堪的配套床板与书桌。扑面而来的末世感迅速浇灭了我的桌搭热情。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/28a982c8a7fcc11277540b64693fafbb.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>新空间的救赎</h3><p>今夏，我换了校区，搬到了新的寝室。</p><p>原来的「老破小」上下床寝室配上拥挤的并排桌以及陈旧的环境，让我只做了最基础的桌搭而后便不管不顾。也没有心思再进行优化，就这么在杂乱与整洁的动态平衡中度过了我的第一年。</p><p>在踏入新寝室门的第一刻，发现是梦寐以求的上床下桌，并且空间相比之前大了将近一倍，于是掩埋一年的桌搭热情又被重燃。</p><h2>校园网环境下，如何解决智能家居连接问题？</h2><p>从家里带的许多智能家居在大一一年全部停摆，期间也想过通过购买宽带等方式解决，但终究没什么热情，于是便不了了之，只能手动地一遍遍开关。</p><p>校园网一般都需要账号登录，因此智能家居无法直接接入校园网。在网线直插路由器无果后，最初我的想法是买一台随身 Wi-Fi，但最后留意到了桌上的备用机——Google Pixel 4，试着连上校园网，打开共享热点，惊喜地发现我们学校的校园网并没有设置设备数量限制，于是所有智能家居都成功地联网。虽然实测下载速率只有 5MB/s 左右，但对于智能家居来说绰绰有余，米家设备几乎都能无延迟响应。当然，无论在什么网络环境下都可能无网络连接的 HomePod 除外。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/c42f0b74897eb51d4bf14f73f62ba36f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>承担着全寝室的希望</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/28/b2f299e226432ddd713b7ef17d1fc4d4.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>智能家居仍在搭建中</figcaption></figure><h2>桌面常驻好物分享</h2><h4>小米：小爱智能音箱触屏版</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/a434f16161b1aed6bfda8cf0e663f12d.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>五年后仍是 99 新</figcaption></figure><p>你应该不难发现，这个音箱从一开始便陪伴在我的桌旁，算起来五年有余，但使用上仍未出现任何问题。因此，这是它排在第一位的原因。</p><p>它面前的显示屏是相对其它小爱音箱最大的优势，带蓝牙 Mesh、以及合理的价格更是让它成为一代经典。尽管米家后面又多次推出各种智能屏以及此产品的升级版，我仍认为这是设计上最耐看的版本，无论放在桌上的哪个角落都能很好地承担起一个时钟兼顾装饰品的功能。</p><h4>反方向 ANTICATER：自定义音量旋钮</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/5eb0bbb1a5f4cadfb429caf552f29428.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>精致的小玩具</figcaption></figure><p>在各种好物推荐的视频中数次能看到它，本着对精致小玩意的热爱，我还是忍不住剁手了。这个旋钮有三种操作，分别是旋转、按压和按压旋转，配套 App 的自定义操作让它能完成丰富的快捷指令。我买的是青色版本，颜色调得很高级，CNC 工艺的细节和手感都很不错。</p><h4>Keychron：少数派联名款 K3 &amp; <strong>Apple</strong> Magic Mouse</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/3a8cabdd010ea028584d6e1af29a969f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>非常干净的一套</figcaption></figure><p>这套键盘与鼠标也陪伴了我好写年头，记得我还是这个联名款键盘的首发用户，对白色的东西毫无抵抗力。由于是矮轴键盘，声音比较适中，手感对于我这个非机械键盘玩家来说还不错。</p><p>尽管有各种四面八方的吐槽，Magic Mouse 仍然是我觉得最适配 macOS 的鼠标，无论是设计的美观程度亦或是全面板滚轮的丝滑程度。虽然它倒立充电的样子真的很抽象……（PS：贴一层水凝膜可以极大提升触摸手感）</p><h4>米家 ：胶囊咖啡机 S1</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/129c9ad52efc69afc95828dfe535f0b5.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>好看的杯子会让我忍不住多喝几杯…</figcaption></figure><p>买这台机器完全是一个晚上失眠时的冲动决定，辗转反侧时总觉得宿舍少了点什么。搬校区之后，校内的咖啡店就成为历史，最近的一家也在一公里开外，对于争分夺秒的早八战士来说，早八的咖啡几乎就成了一种奢望，于是在一遍遍的自我 PUA 中还是按下了付款键。</p><p>我也不是没想过买一台全自动咖啡机，但高昂的售价以及较大的占地面积劝退了我，胶囊咖啡机对充满早八下学期来说或许是最省事的选择，这台机器萃取的风味也还算过得去。</p><h4>米家：智能电热水瓶 5L</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/27/3a0c5fb39bd9d6057ee01c887adefa4c.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>体形还是比较大的，和 27 寸显示器同高</figcaption></figure><p>这台机器同样也是那个夜晚冲动下单的产物，大一一年经常接不到热水的经历，以及新寝室没有公用饮水机的状况让我决定自己买一台饮水机。</p><p>在经典烧水壶、即热饮水机等种类中，最终我选择了这一台，容量较大，不用频繁注水；烧水速度较快，半分钟内基本能加热到自己想要的温度，同时有精确的保温功能；可以接入米家，用小爱同学控制；并且设计异于传统热水壶，比较符合我的审美。最重要的是刚好适配我桌面的尺寸。</p><p>购买后，我喝水的频率确实变高了，而且大多是热水，也算是一笔有效消费。</p><h4>米家 ：台灯 1S</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/27/77508fa90fb4c07dd978ec8d9073a5c7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这也算是数码博主的标配了，没啥特别好说的，在台灯类产品中确实是可以无脑冲的存在。</p><h4>米家：屏幕挂灯</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/28/2ff8d4c0ea232dc77a03acb51f250dbc.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>同上，也是屏幕挂灯品类下的性价比之选，无线控制器也是十分优雅。不过初代的米家屏幕挂灯不支持接入米家，因此我接了一个智能插座控制。当然新版已经支持接入米家了，可冲。</p><h4>西昊：B100Lite 人体工学椅</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/27/45cc38a230916c19d77eeb8bc4ebd09e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>相信凹凸不平的凳角、硌人的椅背以及金属划过地面的声音也时常让你感到崩溃。在我终于对宿舍的椅子忍无可忍之时，新椅子的选购便提上日程，但毕竟是放在宿舍的椅子，预算自然不能太高。</p><p>在去宜家逛了一圈后，发现只有人体工学椅坐着比较舒适。因此最后还是咬了咬牙买了丐版的西昊 B100Lite。在坐上去的一瞬，我便觉得当初的选择是没错的，与宿舍板凳有着天壤之别，并且自带的扶手也很好地解决了大部分宿舍桌板短而导致打字时手臂悬空的疲劳，免去了扩展桌板的必要。</p><p>但说到底是低配版，调整椅背角度时不时会卡顿、异响，头枕的支撑也不如高配版，同时扶手也只能简单旋转而无法调节高度，这都是在价格与功能方面做出的取舍。</p><h4>ZMI：桌面充电器</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/bb190821db03c03f32aed2f0b3fd5195.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这个桌面充电器是从我家的某个角落薅来的，两个 Type-C 接口以及一个 USB-A 接口对我来说偶尔会出现不够用的情况，但勉强也能覆盖日常充电需求。它的尺寸正好可以放在显示器下面，也算比较无感的存在了。</p><h4>少数派 ：水獭屏幕挂件</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/6a37a8ca8e421af67076a325989c9f17.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>我派的吉祥物，不多说了，萌就是了，偶尔看到会让人心情大好。</p><h4>DIY 四边等宽 27 英寸 2K 显示器 &amp; 倒挂显示器支架</h4><p>购买这块显示器完全是因为我对四边等宽的强迫症，京东方的 2K 面板素质并不算很高，在较长时间的使用下可以明显感到这是一块瞎眼屏。色彩方面还算不错，与 MacBook Pro 的色差不算太大，不过仍然不推荐购买，再给我一次机会我可能会选一块不那么瞎眼的屏幕（当然现在应该也买不到了）。</p><p>虽然新宿舍的整体空间扩展了，但新桌子的设计存在着问题，放置显示器的空间被上方占据一半以上的储物柜隔板压缩，导致无法容纳旧的显示器支架。迫不得已，我选择购入了倒挂的悬浮显示器支架，最终非常恰好地将我的27寸显示器塞入下部的空间。但太过偏下的空间让游戏与视频的观看太费颈椎，而气动支架的可调节性又恰好弥补了这一点。</p><h4>Apple：HomePod mini</h4><p>说实话，要不是放假舍友回家了，我可能都没有机会使用它。它可以吐槽的点是在太多了，断联可以说是家常便饭，通过 Wi-Fi 串流播放音乐的它放一首歌所需的反应时间经常比歌曲本身还要长（我至今不理解 Apple 为什么要选择 Wi-Fi 而不是蓝牙），Siri 也经常答非所问。我选它的最大原因可能是它将有力的音量与较为宽阔的声场塞在如此小的体积里，平时连接 MacBook，放在显示器后看电影确实是不二之选。</p><h4>电冰箱</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/a91adf23fdf0af15986a45bcb6e9e521.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>一个小的电冰箱有时候可以应急，也可以在夏天带来一丝冰凉的救赎。这是我以半价向前舍友收的小冰箱，大家可以自行挑选。</p><h4>水杯（们）</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/27/e037810700e0ed32602471795cb1e9f7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>漂亮的杯子会让人更有喝水的欲望。水月雨的陶瓷咖啡杯以及牧高笛与摇曳露营联动的钛杯，一个用来喝咖啡，一个用来喝水，可以说是分工明确。</p><h2>持续的有序：透视空间规划思路</h2><p>不知不觉已置身新寝室一个月有余，在经过每天较高强度的使用下仍能保持原样的整洁，着主要归功于我对各类物品的分类以及动线的规划。</p><h3>储物：动态的整洁</h3><p>收纳无非是开源与节流，节流这一方面，我确实难以做到「断舍离」，因此我将重心放在开源上。我的操作主要分为垂直空间利用和分类收纳上。一种是扩展空间，一种是做到空间利用最大化。</p><h4>各类挂钩</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/28/b66e46db9b418b135e77bb2f70b347a5.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>一家人就要整整齐齐</figcaption></figure><p>我也不知道该如何称呼这些贴在墙上的各类挂钩，但它们的功能都是类似的，让小物件上墙，利用垂直空间。</p><p>我将 DualSense 手柄、耳机以及电动牙刷等生活物品挂在墙上，既方便随时取用，也不占桌面面积。</p><h4>洞洞板</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/28/1d631614c5749e472406d0d32612f807.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>相信不必多说，你可以在几乎所有的收纳或桌搭视频中看到它的身影，不过我更多把洞洞板作为衣柜上的一个装饰以及轻储物的地方，比如临时存放的校园卡以及钥匙。</p><h4>磁吸环</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/e622a07a8cd05739b352055b139ebf39.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/27/3c0011716a41ecbbb0349f61ead334f2.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>MagSafe 磁吸环的利用是我觉得非常有趣的一点，不仅手机与磁吸充电宝，贴上引磁贴的一切物件都可以上墙，比如我将引磁贴贴到屏幕挂灯旋钮上，可以说上墙没有任何违和感。</p><h4>分类收纳小抽屉</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/86df446c285b5e2f19e28eac670b6340.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>放在置物柜上的小抽屉，便于分类一些日常常用物件，在易取的基础上也较为美观。</p><h4>桌下抽屉</h4><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/d745a13fcddc9e6fe88cbc21d2dafd4e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>一个完美贴合桌下空间的小抽屉，主要用来收纳一些周边、资料以及相机。宽度不是很大，因此不会影响双脚在桌下的放置。</p><h4>抽屉内分类小盒子</h4><p>一个大抽屉如果没有分类的隔板将会丧失不少有用的边角空间，在宜家打折购买的一打只需两三元的小盒子正好适配桌下大抽屉，有效利用并分类了抽屉的每一寸空间。</p><h4>小推车</h4><p>小推车是桌面以外灵活的拓展，非常适合存放各种瓶瓶罐罐、零食饮料以及一些临时不知该放哪的物件，实用性很高。我购买的是宜家的白色小推车，可参考购入。</p><h3>藏物：静态的美观</h3><p>有些物品可能不需要频繁移动，因此隐藏他们可能是让桌面保持整洁的最好方法。这里以我的电源线以及 HomePod 音箱们为例。</p><p>显示器刚好可以遮盖背后凌乱的插线板以及 HomePod，节省了不少理线的功夫。</p><p>桌下的理线主要靠的是理线魔术贴，不过桌下本身就不是一个容易察觉的地方 因此只要让电源线不阻碍各类物品的动线就可以。</p><h2>收纳之外</h2><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/9fe0f9597ff919cecd3a8dcbd19a7a2b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>收纳后，发现仍留有不少的空闲空间可以自由发挥，于是我摆上了手办与宝丽来，仍留下几处空白，等待新朋友的加入。</p><h2>结语</h2><p>这是一篇想写了好久终于诞生的文章。</p><p>历经了一个月的增删修补，从空空如也到繁而不杂，在这个城市的角落终于有了一块暂时属于「我」的空间，它足够温暖、也足够牢靠，每一处都刻印着我的掌纹。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/24/92269f048386bb32c2dd607676a2581c.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">&gt; 下载 <a href="https://sspai.com/page/client">少数派 2.0 客户端</a>、关注 <a href="https://sspai.com/s/J71e">少数派公众号</a>，解锁全新阅读体验 📰</p><p style="margin-left: 0px;">&gt; 实用、好用的 <a href="https://sspai.com/mall">正版软件</a>，少数派为你呈现 🚀</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101519</id>
            <title>客制化键盘简评丨 PAPER 65% 再折即裂，却也透光</title>
            <link>https://sspai.com/post/101519</link>
            <guid isPermaLink="false">https://sspai.com/post/101519</guid>
            <pubDate></pubDate>
            <updated>Fri, 01 Aug 2025 07:34:44 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 纸飞机, 悬浮感, 键盘设计, 灯光设计  

总结:  
1. PAPER 65键盘通过重新设计机身线条和灯光效果，延续了PAPER系列的“纸飞机”视觉语言。  
2. 舍弃了前作的悬浮背板和曲折腰线，转而利用嵌套式灯组、材质对比和光影交错营造轻盈感。  
3. 底部V形灯带设计模拟纸飞机滑翔轨迹，强化动态悬浮意象。  
4. 提供硅胶豆Gasket mount和Bottom mount两种结构，搭配不同定位板材料以调节手感和声音反馈。  
5. 碳纤维定位板带来脆响音色和硬朗敲击感，但开槽设计可能影响实用性。  
6. 设计上避免堆砌流行元素，以克制的光影节点重构“折痕”概念。  
7. 面临65%键盘设计同质化困境，选择突破家族式语言进行创新。  
8. 最终通过简约结构与光影层次，实现纸飞机从“折痕”到“借风飞行”的意象转化。 </div>
                        <hr>
                    
                    <p>&nbsp;</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/11e54d3318df23b5162bc471fb097925.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>前言</h2><blockquote><p>想把一张纸，折成心里的远方</p></blockquote><p>这是童年时，对于纸飞机最初的念想——很轻，很小，却能将一张平凡的纸，折出属于自己的轮廓。后来我们长大了，开始把这份念想投射进一个个具体的物件里，例如，一把键盘。</p><p>七月末，我收到了来自WhatEver.studio的新作品——PAPER 65。PAPER系列我早有耳闻，印象里最深刻的便是 不好喝的粥 拍摄的组装视频，PAPER 75曲折的腰线、背板所营造的视觉悬浮、底部藏匿得恰到好处的氛围灯，放在当时的75市场里，显得格外出挑。</p><p>而在PAPER系列的第三年，如何在舍弃了悬浮背板与曲折腰线的前提下，把纸飞机的轮廓，折进一个更小的机身？PAPER65以一种几乎完全不同的方式，重新阐释了纸飞机的视觉语言。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/a9dd80c3977d5b811ab7cdee36be840c.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>关于悬浮感的再思考</h2><p>初见PAPER65，不免有些疑惑，系列标志性的“折痕”语言仿似乎没于机身。因碰珠快拆，上下边框保留了较宽厚度；虽然通过细倒角与小圆角弱化棱角，却难以在第一眼带来“悬浮”之感。主键区上方，自左及右依次排列着长椭圆内凹框包裹的条形灯组、斜角阳极铝合金饰条、镜面不锈钢灯块与三枚小灯，以及一枚 1 U OLED 屏幕；下侧边框右侧更点缀了一块梯形透光灯块。乍看之下，它既不像繁复堆砌，也非极简留白。</p><p>灯条的设计让我想到LUMINKEY 65 那种极简而精致的灯条布局，小屏幕倒是有些意料之中，毕竟这也算是65%的一种流行趋势，略显无趣。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/bf5c727c8d8929406b7a9a473d91ba98.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>前几作侧面 “三明治” 式的折痕腰线在更窄的 65% 机身上无从发挥，WhatEver.Studio 反倒将折线挪至上盖下沿，并微微抬升整体坡度——这一抬升，让我想起 Zephyr 1 那般星际飞船的轻盈姿态，也为本作奠定了“悬浮”基调。</p><p>若说 PAPER 75、80 的底部犹如“停机场”，光线从底壳缝隙倾泻，制造起飞前的仪式感，那么 PAPER 65 的底部更似一架滑翔机：底壳两侧承接上盖上挑轮廓，前后斜切折线汇聚成锐利三角切面，其顶点向两侧延伸的极窄 V 形灯带宛若掠过天际时划出的痕，细而不弱。家族式的纸飞机铭牌依旧位于背板中心，嵌套在不锈钢配重之中。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/281b479d2a4f6625533b51287ef4d920.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>每每谈起优秀的65%套件，往往会想到的都是那些优雅的机身线条，精致的背板。却鲜少有人在正面“动刀”：大多数依旧选择在某处刻上铭牌或阴刻签名，将正面视为“理所当然的画布”。所以相比之下，我更青睐60%，比起多一个铭牌元素，我更愿意获得一个干净的正面，让结构与线条自己发声。</p><p>而 PAPER 65 则在这块留白上做出了更内敛的尝试，IC 帖中虽宣称“正面布置了 7 个部件”，真正上手才知，这些灯组、饰条、屏幕与透光件并非一字排开，而是借助嵌套式设计、材质对比与高低错落，被有序地融入机身，既丰富了视觉层次，又保留了整体的简洁与秩序。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/c52852d886402257c52d9ceb97ea53b1.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>在PAPER75和80上，WhatEver.Studio 借由抬高底壳坡度、弱化其与背板的连接，再配以隐藏式氛围灯，让整把键盘壳体仿佛漂浮在桌面之上。但若把前作那套“大背板＋腰线＋缝隙光”方案，放到更迷你的 65% 机身上，就像把一幅 4:3 的画，强行压缩到 1:1，比例失衡后，会丧失背板设计本该带来的轻盈感。那么重塑纸飞机概念的重任，便移交到了机身线条和灯光设计上。但在组装完成后，我还是没得到我所期盼的悬浮感。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/53e981396496a95ce490f4ee1c431ff2.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>初装配时，我并未马上感受到预期的悬浮感：碰珠快拆结构让上下边框无法纤细，曲折腰线也随之消失，只剩下窄小的机身。可当点亮那一刻，光影交错中，悬浮感便悄然归来，如果“悬浮”是 PAPER 系列的内核，那么“灯光”便是它的无形机翼。</p><p>边框上的七个组件在亮起后承担起塑造轻盈感的使命：高亮条形灯组、深色阳极铝饰条、镜面不锈钢反光，以及透光梯形灯块共同分散了视觉重心，让目光不再停留在厚重的金属边缘；它们在材质、明暗与高低错落中形成鲜明对比，让实色边框退居背景。铝合金饰条让我想起 LX60 那条跨越全长的装饰带——同样以单一线条，将边框视觉上拉窄、别具一格。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/d46754f01784df92f8afe7bfc06f4a3f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>至于底灯，在 PAPER 75/80 上它们只需环绕底部，便能在桌面上投出一圈光晕，将键盘“托至云端”。而在 PAPER 65 上，左右两侧极窄的 V 形灯带顺着斜切的三角切面疾驰而出，如同喷射尾焰一般，为机身注入一股蓄势待发的动感。</p><p>坦率来说，初见PAPER65，在通电之前，我很难从这块窄小的铝合金机身上，一眼读出“纸飞机”的再设计，那些嵌套的灯组、饰条与折线，在没有光状态下很是平庸，而1U的屏幕更是让人觉得这是一把随大流的键盘。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/ed57914c67b26ce59f62f3c20dfa8872.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>直到按下开关，清冷的光芒才将它们一一点亮，勾勒出机身的悬浮设计和视觉节奏。</p><p>聊完了我对PAPER65对于悬浮感设计的再思考，我们再来聊聊它的内胆与手感。</p><h2>内胆与手感</h2><p>结构方面，PAPER65提供常规的硅胶豆Gasket mount和搭配亚克力衬套的Bottom mount，上四下四的非对称点位，定位板标配FR4，选配PC和开槽铝，同时我还收到了一张碳纤维的定位板</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/77035d36916e5ac2452c74feb7b2bef1.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>硅胶豆带来相对柔和的手感回馈，而Bottom Mount则是更为直接，更硬的回馈。</p><p>尽管有做一些腔体阶梯的设计，但碍于机身的设计，无法预留出足够大空间的完整而封闭的腔体。而在定位板的选择上，令我有些费解的是，铝定位板被做成了极限开槽的样式，PC和FR4倒是常规不开槽的做法，看得出WhatEver是懂得软定位板开槽是一件“灾难”，但铝定位板开槽却让我觉得有些南辕北辙，开槽确实会减弱金属板所带来的沉闷的反馈，使得声音变得让音色更亮、更短促，但定位板作为一种风味的添加，保持本身的材料特色，才是最重要的。若是追求新的声音取向，选用其他定位板材料会更适合。同时铝板极限开槽，带来的插拔困难也是存在的，只是相较更软材料来说，要好一些。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/58875b10d3fcca4f3d27fda1b87f8b7c.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>最终，我选择了无棉，碳纤维定位板搭配亚克力衬套的Bottom mount的方案。可能对于大部分玩家来说，这是个不太具有参考性的搭配选择，碳纤维定位板目前还不太流行，而Bottom mount也比较少见，像是老式键盘会选择的结构。但玩客制化键盘，有时就是需要一些规格外的选择，才能带来惊喜。</p><p>碳纤维定位板相较其他定位板，最大的特征便是声音上的脆响，理论上，碳纤维的刚度是比铝要更高的<s>（前提是真碳纤维，而不是碳纤维纹路）</s>，相应它的振动传播是更快的，反馈在声音上的表现，便是轴体声音更脆。此前BF80我也选择了碳纤维的定位板，不过还是要提一嘴，千万不要给这些板子开槽，否则插拔轴体会极为折磨。不过若是追求手感上相对柔和一些，那碳纤维定位板还是不要考虑为好，本身PAPER65的两种连接方式都是点连接，硅胶豆的硬度也比较高，而碳纤维在敲击上的回馈是极硬的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/fcdbe4b99fedae96ed1ad5628e3a7c9e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>但如果你既想获得类似金属板那样坚实的敲击手感，同时想获得一个相对不那么沉闷的声音反馈，碳纤维定位板是个不错的可选项。</p><p>以上便是我对PAPER65的简单点评，如果你对键盘之外的事情感兴趣，不妨再听我絮叨会。</p><h2>在成为纸飞机之前</h2><p>一个饶有趣味的事实是，早在莱特兄弟试飞之前的几十年，“纸飞机”就已诞生，彼时它们被称作 <strong>paper darts</strong>（纸镖）。那时的孩子用“一张硬挺的纸”折出锋利机头，俯冲、回旋、滑翔，就像在廉价纸片上实现了小型飞行器的最初梦想。直到二十世纪中叶，真正的飞机设计愈加贴合这类“镖式”折纸，才有了“纸飞机”这一通用名。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/d86daffb2287ae8b70b5c79b85ed039b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>而到了客制化键盘的层面，许多产品的设计，诸如板簧、隐藏光源、腰线，甚至是底壳里阶梯的腔体设计，在早期并没有一个统一的称谓，往往只是被玩家们当作“新奇”的卖点。</p><p>直到几年后，这些零散的设计才被人们归纳为一些流行语，成为衡量一款键盘是否“会玩设计”的风向标，直到它们从黑话变成评测模板，再变成淘宝详情页的默认配置。</p><p>我想，对于任何一个设计者而言，如何取舍，如何保持作品的自洽，是值得深思的命题，对于PAPER65来说，也是如此。过往65的模板越是优秀、PAPER系列的设计语言越是深刻，PAPER65就越像是一张被折了无数次的纸。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/e4b2d47db6502a28fa813fe876d7120a.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>每个人都清楚，纸飞机该怎么折，但若是要在原有折痕的基础上，再造新的可能，便会面对断裂。PAPER 65 所在的困境正是如此——太多的范例容易让设计陷入“复刻”与“拼凑”的死循环，一旦添加不当，就会撕裂那份原本悬浮的意象。</p><p>而PAPER65所做的，便是摒弃过往熟悉的、安全的家族式语言，选择以更克制的折线与光影节点重构“悬浮”与“折痕”，就像PAPER系列一开始做的那样——75用夸张的悬浮背板定义了“纸飞机”， 65 则以简约的结构与光影，重新诠释悬浮的轻盈与张力。</p><p>坦率来说，PAPER65于我而言，并不是一把所谓的endgame，它仍旧有许多不够退烧的点，也很难说是一款入门级作品，它缺乏那些对于新手足够有吸引力的标签，尽管它整体的结构足够简单，装配上也没有太多弯弯绕绕的设置。</p><p>但你若是被它那克制而深邃的光影所吸引，偏爱那些层次丰富、却不喧哗的饰面，读得出它身上那种纸张般的轻盈，以及一点点固执的、不合时宜——我想，PAPER65 是值得被看见的。</p><p>再折就会裂，却也正好透出一道光，像童年最后一架纸飞机，不再靠折痕，而是靠风。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/01/aaa0dadfe29343d41b9ef52a06c4ff91.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101364</id>
            <title>Intel Arc B570 10GB显卡全解析</title>
            <link>https://sspai.com/post/101364</link>
            <guid isPermaLink="false">https://sspai.com/post/101364</guid>
            <pubDate></pubDate>
            <updated>Mon, 28 Jul 2025 04:38:30 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Intel锐炫B570,显卡性能,4K游戏,性价比  
<br>  
<br>  
总结: 本文评测了Intel锐炫B570显卡的性能表现和性价比。B570相比B580规格有所缩减，性能平均落后15%，但价格更低，适合预算有限的用户。测试显示B570在4K分辨率下能流畅运行多数3A游戏，尤其在3A游戏中表现较好，但在FPS和国产网游中稍弱。显卡功耗控制良好，超频潜力有限但能提升约8%性能。文章认为B570是一款性价比突出的中端显卡，适合追求4K游戏体验但预算有限的玩家。 </div>
                        <hr>
                    
                    <p>当初入坑王者荣耀那会儿，只会玩辅助抱大腿，尤为喜欢新英雄“庄周”</p><p>不知哪位大神研究出了“杀神鱼”配装，又肉又粘还不吃控，一时间成为脆皮DPS的噩梦；能击杀拿人头，还能团战一挑三。</p><p>我这种只会单英雄的手残弱鸡，居然因此混上了三星王者。</p><p>Intel锐炫B570，显卡新赛季的“庄周”本周</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/e09f42e845117a93ab843f4203734745.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>规格</h2><p>自Radeon 9600/9550开始，中端甜品卡双型号竞争，已成业界惯例</p><p>恰如战斗机巡防，总是双机编队伴飞；遇敌时，长机居中守土，僚机贴身狗斗</p><p>作为僚机，Arc B570相较B580：</p><ul><li>原20组核心砍了2组，光栅、光追、AI单元打<strong>九折</strong>，流处理器由2560sp降至2304sp</li><li>显存位宽由<strong>192bit</strong>降至<strong>160bit</strong>，显存<strong>12GB</strong>对应降至<strong>10GB</strong></li><li>主频略降，显存频率不变，GPU睿频低了0.1Ghz</li><li>整卡功耗TBP，由<strong>190W</strong>降至<strong>150W</strong></li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/4edd0577548f4eb8b3701c161eb94772.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>版型、做工、用料，各品牌完全延续B580设计，散热模组不变，供电少一相、显存少一颗，详尽规格可见：</p><span class="ss-linkCard">&nbsp;</span><span class="ss-linkCard">&nbsp;</span><p>&nbsp;</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/8a2e81ab082b7bf0df5d442cff0b7a7b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>具体到性能，B570平均落后B580 <strong>15%</strong>；3DMark理论跑不过A770 16GB，实机游戏基本一致，与RTX5050、RTX4060、RX7600、RX7650GRE同档，各有所长：</p><ul><li><strong>A770</strong>视频编解码性能拔群，16GB版本跑AI优势明显</li><li><strong>B570</strong>强在3A、弱在FPS，个别国产二次元网游不兼容</li><li><strong>RTX4060</strong>统治网游端，尤其是优化渣的国产网游</li><li><strong>RTX5060</strong>，支持DLSS4拼好帧的4060，1080p无敌</li><li><strong>RX7600</strong>/<strong>7650GRE</strong>上古套娃，AI、光追性能不值一提</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/5507201b0fedb187c3308cbe9a993be3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>当B580羞羞答答，费老鼻子劲才能买到低于1700元的大促价</p><p>当RTX5050霸气侧漏，喊出2099元的上市价，当月即破发</p><p>没什么存在感的B570，低于1500元的入门款随处可见，618大促时凑单满减，京东自营已经低于1400元。</p><p>“性价比”三个字，都有点屈才了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/6fc6751c83527f89d58a6e81bd011551.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>测试</h2><p>看了这么多的媒体测试，玩了这么久的B580，Intel这代显卡什么性能、适合什么游戏，算是知根知底</p><p>我好奇的是：B570这张最便宜的新世代显卡，能不能扬长避短，像B580一样，<strong>4K分辨率下高画质畅玩大多数3A</strong>？</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/bd298a0f020095ce0955bc64bac612aa.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>还是手头这套AM5平台，Win10系统，<strong>最便宜的亮机U</strong>，<strong>最差的DDR5颗粒</strong>，烧烤9800X3D的板。</p><p>理论跑分过一遍，1080p下这哥两儿都是躺平状态，没什么参考价值；2K分辨率跑分相差16%，与媒体结论相符</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/54babdde4fad9c253630b03afe091a6e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>接上家里的电视，4K分辨率下先跑一轮黑猴。</p><p>XESS 50，光影五项 低，贴图五项 高，平均帧<strong>53FPS</strong>，低于B580 <strong>15.9</strong>%</p><p>测试工具为上市前的初版，考虑到已经实装XESS2的正式版中，B580同设置可以稳上90FPS，开启自家帧生成的B570实机帧数肯定高于<strong>80FPS</strong></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/ca5a5a2d634099bb82d2313bb36f6101.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>黑猴已老？冥末够新吧。</p><p>昨天刚上线的这款魂类新游，同样基于虚幻5引擎，甚至设置选项都差不多。</p><p>TRS 50，中画质下，B570平均帧<strong>66FPS</strong>，能玩。</p><p>对于一款不支持XESS、优化稀烂的小作坊产品，别纠结画质，能玩上十分钟不报错，就阿弥陀佛了~</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/38fc6ffc870e04ac07ad440be8ef0836.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>背靠背打了两个N卡客场，回主场休息一下，不过分吧？</p><p>大表哥2内置的基准测试，将光照、全局光照、阴影调低，三档画质跑分如下：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/7b872dc27c8168ae128dd9a59018f06b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/57442fc030922b4377998bae57259030.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>老头环，游戏锁60帧，高画质无忧畅玩，显卡平均负载93%</p><p>巫师3次世代版，高画质全默认，DX11随便跑，DX12 开启XESS平衡档，平均帧<strong>57.7FPS</strong></p><p>生化危机四重制版，高画质打开隔行扫描，不影响任何画质下，平均帧<strong>66.7FPS</strong></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/2cf3308711fc956b7cbf9b8426267746.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>仙剑奇侠传7，这次测试版本不同，由V2.0.1升级到了V2.1.0，原生4K高画质平均帧很难看，其实95%帧高达141FPS。</p><p>切换到中画质，仍然不开超分，平均帧达到57.3FPS，95%帧达到184FPS</p><p>明显是软星虚幻4引擎玩不转，游戏优化烂。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/45500db6b21aa40782067a20b72d75d9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/3cc2ecd48c95dfc4deed21311c2c8831.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>上述游戏完全按照B580的设置，在<strong>画质没妥协</strong>、<strong>选项没优化</strong>的情况下，B570能不能畅玩4K，大家心里应该有数了。</p><p>加上光追又如何？</p><p>锐炫初代卡的光追性能就不弱，远强过A家；二代I卡光追与N家同档，AI性能甚至小胜</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/df0a12a2e916f9416ebdb751758cd650.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>打开地平线5，A卡传统强项，有极端、超高、高、中、低五档画质。</p><p>与4060表现类似，高光追下性能损失约<strong>15%，</strong>中、低光追帧数<strong>完全无损</strong>，数值惊人的稳定，像是随手复制粘贴的。<br />&nbsp;</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/eb9e4e0c21fbd51ef5946733d54e224d.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/81c0776983fddf3cc8d6bed89e0deb05.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>简单优化</p><ul><li>光追/粒子降为中，关闭阴影，超高画质平均帧稳定在64FPS</li><li>降至高画质，仅关闭阴影，平均帧达到83FPS，提供高刷体验</li></ul><p>中档光追开启下，关闭阴影丝毫没有影响质感，画面流光溢彩。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/21163417282ea4430f05da661b4288a7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/343e332901b6a7ccad72591a38a4de13.gif" /></figure><h2>解析</h2><p>有人说，I卡待机功耗高；也有人说，I卡省电，玩游戏功耗显示才几十瓦</p><p>有人说，I卡兼容性差，玩个星铁都进不去游戏；也有人说，I卡性价比高，4K畅玩3A</p><p>有人说，I卡驱动差，吃U游戏卡；也有人说，I卡驱动好，使用稳定更新快，行业翘楚</p><p>拾人牙慧不可取，咱们不妨深度解析一下，这张薛定谔的I卡。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/55db99ee6cb5dc703c3f1510107f2b9d.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>目前的FPS屏显软件，都是依靠<strong>Guru3D RTSS</strong>实现，这是一款免费的显卡超频软件。</p><p>微星小飞机Afrerburner同样如此，更是支撑RTSS更新的背后金主；近年微星没接I卡，也放弃了A卡，所以RTSS也拿不到数据接口，RX9000和I卡的屏显数值是错的，尤其是<strong>功耗</strong><br />（RTSS作者不得不自费购买了RX9070、9060显卡，以完成更新）</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/374b3dd3dd2313f77a2302a58cf26269.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>I卡的整卡功耗TBP，由<strong>GPU</strong>、<strong>显存</strong>、<strong>降压电路损耗</strong>三部分构成，只有I卡驱动面板、GPU-Z、HWiNFO的信息是对的，RTSS只能读取到<strong>GPU</strong>功耗</p><p>跑完全程测试，提取后台监控数据后，可以得到这样一张表</p><ul><li>默认状态下，B570整卡待机功耗<strong>31</strong>瓦</li><li>BIOS及windows简单开启PCIe省电模式后，整卡可降至<strong>9.4</strong>瓦</li><li>表现好的游戏，整卡可以跑满<strong>150</strong>瓦；表现差的游戏，4K也只能跑到<strong>119</strong>瓦</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/886abb9b39186d747c41d5250e9c4e8f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>各游戏应用，可以简单归纳：</p><ul><li>【3DMark、CS2、巫师3、大表锅2】驱动游戏相辅相成，显卡满载、CPU负载又低，表现自然就好</li><li>【黑猴】吃不满显卡、CPU负载低，但帧数测试异常稳定，问题肯定不在显卡驱动</li><li>【地平线5、明末】吃不满显卡、CPU负载高，但帧数测试稳定，CPU有一定的瓶颈</li><li>【仙剑7】显卡、CPU负载双高，95%帧三倍于平均帧、十倍于1%低帧，游戏中莫名卡顿，属于屎山代码、材质调度有问题，是这类多平台主机移植游戏的通病，譬如怪物猎人：荒野、蜘蛛侠2</li></ul><p>对应不同的解决方案：</p><ul><li>老英飞舞鞭子，严禁阿三程序员敲代码时斗舞，提高驱动编译效率</li><li>尽量避开1080p，配合2K、4K高分辨率使用，尤其适合带鱼屏</li><li>使用八核的主线处理器，缓存越大越好，如锐龙5700X、7700、9700X</li><li>这种大显存显卡，<strong>DX12</strong>尝试切换<strong>Vulkan</strong>、<strong>DX11</strong>渲染，经常有奇效</li><li>钞能力，要么老英沟通游戏方，更新XESS2；要么自己咬牙上X3D处理器，强行拉升GPU使用率</li></ul><p>不花钱的方案也有，超频。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/28/1c47d81bfea29c34d7faf92006edb6fa.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>超频</h2><p>锐炫B570的官方功耗是<strong>150W</strong> TBP，多数游戏运行功耗不到130W</p><p>我手头这张蓝戟B570光，作为全品牌旗舰，功耗上限解锁<strong>186瓦</strong>，具备8+2+2供电、8层订制PCB、镀镍五热管、环形风扇，与B580光用料一致。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/c0c0ff22332d05d18e849caabf7cbb42.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/e1fad54b91b3fd2028c8f2ea0f52ee7d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>按照B580的经验，不同品牌的驱动面板，可超频的解锁功耗相同，均为186W；对于单8pin供电的产品，设定非常谨慎。</p><p>“战斗法师”架构的这一代I卡，芯片平均体质<strong>3.1Ghz</strong>，供电给足不设限，B580主频可以摸到<strong>3.3G</strong></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/10a3fffa647bacd24d56410568bf37a8.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>奈何B570功耗上限不可调，显存软锁，只能拉到显存 <strong>20Gb</strong>，核心电压 <strong>+25</strong>%（实际效果为 <strong>+25mv</strong>），睿频 <strong>+200Mhz</strong></p><ul><li>GPU主频由<strong>2750</strong>Mhz，提升至<strong>3033</strong>Mhz；显存由<strong>2375</strong>Mhz，来到三星额定频率2500Mhz</li><li>代表DX12 2K分辨率性能的3DMark Steel Nomad，跑分提升<strong>7.9</strong>%</li><li>4K分辨率下CS2平均帧提高<strong>9.8</strong>%，1%低帧提升<strong>3.3</strong>%（低帧是我那屌丝U的锅）</li><li>GPU平均功耗提升<strong>10瓦</strong>，整卡功耗来到了<strong>170瓦</strong></li><li>31度室温下，机箱内GPU烤机温度，由27度空调时64℃，上升至66℃，显存62℃</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/a356cb7d28f57930b55c3346deb64eaf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>一分钱不花，GPU又多干了10瓦的活儿，向着138W的满载目标更近了一步。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/6a87d49e7ed70f2768eb5413ec84583c.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>总结</h2><p>生活就像王者农药，有人生而耀眼，即便DPS不足，照样吃线拿龙、稳坐C位；有人习惯打野，猥琐发育，五杀绝连、一鸣惊人；有人甘于平凡，乐于援手，是队友们习惯依靠的大山。</p><p>锐炫B570，像极了年轻的新一代，不想被定义的一代。</p><p>看似辅助，1080p基本功都颇多瑕疵；只要换一个配装，立马变身4K“惹不起”，潜力无限。</p><p>体能不足、横移慢的传统中锋？球商出众、能投三分的策应中锋！</p><p>He is handsome, R U Trail Blazers？</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/80c4062fd5ac9b16685fb1a6455cf1cd.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/07/26/291a1063ac82f8603922d0049445167c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure>
                ]]>
            </content:encoded>
        </item>
        
    </channel>
</rss>