<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>少数派 -- Matrix</title>
        <link>https://sspai.com/matrix</link>
        
        <item>
            <id>https://sspai.com/post/101678</id>
            <title>带爸妈旅游时半小时开发的 App 获得了 22 万围观</title>
            <link>https://sspai.com/post/101678</link>
            <guid isPermaLink="false">https://sspai.com/post/101678</guid>
            <pubDate></pubDate>
            <updated>Fri, 15 Aug 2025 03:00:00 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 汇率转换,旅行工具,用户需求,产品设计  
<br>  
<br>  
总结: 作者在泰国旅行时发现父母难以理解泰铢价格的实际价值，意识到现有汇率工具过于复杂。针对这一需求，作者开发了专注于泰铢人民币转换的简洁工具，并加入生活化价格参照。该工具因解决特定场景需求而获得广泛关注，说明好产品应聚焦具体问题而非功能堆砌。文章强调从真实需求出发、专注特定场景和建立用户心智连接的重要性。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;"><strong>Matrix 首页推荐</strong>&nbsp;</p><p style="margin-left: 0px;"><a href="https://sspai.com/matrix">Matrix</a>&nbsp;是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&nbsp;</p><p style="margin-left: 0px;">文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><hr /><p>前几天我带着父母去泰国旅行（好不容易说服他们），让我没想到的时无意中观察和收获了一款爆款小工具的灵感。</p><p>在清迈的夜市闲逛时，父母看着琳琅满目的商品和陌生的标价，既好奇又困惑。他们不停地问我：</p><blockquote><p>「这个 65 株相当于多少人民币啊？」</p><p>「一份快餐 129 株，这个贵不贵？」</p><p>「我们一家人吃饭花了 1000 株，在国内是什么水平？」</p></blockquote><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/07/article/6eafdf87ea053c00af18f8c3d78af131.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>清迈市场上的物品标价</figcaption></figure><p>被他们问的多了，我意识到这些问题看似简单，却反映出了一种潜意识的需求：我们很难快速将陌生的外币价格，与国内熟悉的价格体系建立联系，从而无法理解货品的实际价值。</p><h2>发现了一个需求</h2><p>我第一反应是给父母安装了市面上常见的汇率转换工具，但很快发现他们用不习惯。</p><p>我观察后才明白，市面上的汇率工具，大多想做成一个支持全球上百个国家货币的「大而全」产品。它们功能强大而专业，界面看起来很「科技」也很「金融」，但对于我父母来说，操作太繁琐了。</p><p>而父母的需求其实很纯粹：他们只想以国内熟悉的价格为参照，了解泰国商品的价值。有时候是为了购买决策，有时候只是出于好奇，想了解不同国家的物价水平。但是这些「汇率转换」工具并不适合他们——当然我也不知道汇率转换工具是给哪些人用的，也许，外贸从业者？</p><h2>vibe coding：酒店里的即兴创作</h2><p>晚上回到酒店，看着父母讨论着白天的物价，我冒出一个念头：为什么不为他们做一个专属的小工具呢？</p><p>我分析父母需求后的要求很明确：</p><ul><li><strong>绝对简洁</strong>：只做泰铢到人民币的单向转换。</li><li><strong>绝对快</strong>：最好不用打开 App，直接在桌面上就能按。</li><li><strong>绝对直观</strong>：要让他们一眼就明白换算后的价值。</li></ul><p>作为并不会编程的古典产品经理，在 CodeBuddy 的帮助下（是的，前天我在 AppSo 看到介绍这个 AI 编程工具，申请了试用，这天正好收到邀请码），30 分钟我就快速开发了一个最简单的原型——一个能够放在手机桌面上的小组件，专注于泰铢到人民币的快速转换。在在换算后的人民币金额后面，增加一个有趣的备注，告诉他们这个价格「约等于国内一杯瑞幸咖啡」或者「相当于一瓶可乐」。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/4fafffa3bf5eb7e82936baae243a30a5.gif" /><figcaption>↑30分钟实现的Demo</figcaption></figure><p>这个备注功能是我的小心思——父母这一代人很节俭，即使出国旅行也不舍得花钱。当一个 65 泰铢（约 13 元人民币）的纪念品，被标注为「约等于一杯瑞幸」时，他们便有了一个清晰的参照系，更容易做出消费决策，也更能享受旅行的乐趣。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/07/article/e7e9dcce527556e2da0ede3b0280ee72.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>用 CodeBuddy 来 vibe coding</figcaption></figure><h2>意外的成功：从家用工具到爆款应用</h2><p>让我惊喜的是，当我把这个小工具装到他们手机上后，他们几乎没有任何学习成本，立刻就开始用起来，每天逛街时拿着手机对着各种商品标价「按按按」，逛得不亦乐乎。</p><p>这给了我继续改进的信心。接下来的两天，我形成了一个有趣的节奏：上午陪父母游览景点、逛街购物，下午他们午休时，我就在酒店或游泳池边继续完善这个小工具。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/07/article/96e2f206323879e952889f93462c452b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>两天后，我将在小红书上展示了这个 demo。出乎意料的是，不到 48 小时，这个帖子就获得了 20 万的阅读量、2 万的点赞和上万的收藏。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/07/article/84e01da74f4fdca9a1cf5986ce959c88.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>小红书的漂亮数据</figcaption></figure><h2>给独立开发者的启示</h2><p>在小红书上，也有很多不同声音，特别多人留言说：「我用系统计算器也能算汇率！」，也有人说：「iOS 下划，直接输入 180 泰铢，就会自动转换」——是的，他们说的都对，但他们看到的是「汇率转换」问题，而我想解决的是「让中国游客在泰国购物时，对价格快速心中有数」这个更小场景的问题。他们看起来像是同一类问题，但事实上是两个有差异的需求。</p><p>同样在即刻社区也有人问我：</p><blockquote><p>我自己开发了一个全世界 170 多种的货币互换网站。但是也没感觉到有什么流量的？App 就有流量了吗？</p></blockquote><p>我想了想，回答说：</p><blockquote><p>功能不等于产品，谁需要一个 170 种货币相互转换的功能呢？我猜肯定有人需要，但是游客肯定不需要。</p><p>产品是基于场景的需求洞察，来解决特定人群在特定情境下的特定问题的。功能仅仅是问题求解的一种技术支持，强大的功能不等于强大的产品。有时候甚至相反。</p></blockquote><p>小红书的留言里，我看到成千上百的人在 @ 他的朋友，在收藏，在点赞，为什么呢？我想，《价格翻译官》的意义在于它理解了一个看似「没啥用」却普遍存在的潜在问题：<strong>在出国旅行时，人们对陌生货币价格会下意识地想与自己熟悉的货币价格比比价</strong>——这与是否打算购买无关，也与是否节俭无关，只是一个直觉化的潜意识的需求。在用户没有意识到它的存在时，它默默存在于用户的心智中，成为旅行中不可或缺的一部分。</p><p>好的产品一定不是功能的堆砌，而是对特定场景的洞察，对用户潜意识需求的理解。</p><p>那么，《价格翻译官》满足了用户的哪些具体需求呢？</p><ol><li><strong>降低认知负担</strong>：旅行中，人们已经面临语言、环境等多重挑战，一个简单直观的价格转换工具能显著减轻认知负担</li><li><strong>情感连接</strong>：通过熟悉的国内价格参照，建立了用户与陌生货币之间的情感连接</li><li><strong>决策辅助</strong>：帮助用户快速判断价格是否合理，是否值得购买</li></ol><p>这次经历给我的最大启示是：</p><ol><li><strong>从身边的问题出发</strong>：最好的产品灵感往往来自于身边人/自己的真实需求，如果我们在做自己和家人不用的产品，你的观察会艰难得多</li><li><strong>聚焦特定场景</strong>：不要试图做一个万能的工具，而是专注解决特定场景下的具体问题</li><li><strong>心智占位</strong>：让「来泰国旅游的人都觉得自己需要这么一个小工具」比堆砌功能更重要</li></ol><h2>结语：小小的创造让旅行更美好</h2><p>泰国，特别是清迈，是一个非常适合带父母旅行的地方。凉爽的气候、友善的人们、合理的消费，会让父母玩得开心。</p><p>而《价格翻译官》这样的小工具，希望能让人们的旅行变得更加轻松愉快，也能帮助人们更好理解和享受异国生活的体验。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/07/article/d2b1cc9293786ddf951e6e923a13f389.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>父母喜欢逛 JJ Market</figcaption></figure><p>如果你近期计划去泰国旅行，不妨试试这个小工具，它可能会成为你旅途中的得力助手。</p><h2>下载方式</h2><p>之前我自己做的 demo 只能通过 apk 给朋友安装。回国后在朋友的帮助下，将 demo 正式产品化，现在《价格翻译官》已在 App Store 和 Google Play 上架，欢迎下载使用。</p><span class="ss-application">&nbsp;</span><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/8ee15be6baf3e0f372e2ca1f7c9cb658.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>长按识别二维码也可以下载</figcaption></figure><hr /><p style="margin-left: 0px;"><strong>有奖评论</strong></p><p style="margin-left: 0px;">你平时都是通过什么方式计算汇率的？你心目中好的汇率换算工具应该有什么功能？请在评论区和我们分享你的看法，我们会在 8 月 18 日（周一）选出 8 位读者，各送出《价格翻译官》的 iOS 兑换码一枚。</p><hr /><p style="margin-left: 0px;">&gt; 关注&nbsp;<a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank">少数派小红书</a>，感受精彩数字生活 🍃</p><p style="margin-left: 0px;">&gt; 实用、好用的 <a href="https://sspai.com/mall">正版软件</a>，少数派为你呈现 🚀</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101814</id>
            <title>语音转文字正在改变我们的生活——兼简要横评语音转文字笔记软件</title>
            <link>https://sspai.com/post/101814</link>
            <guid isPermaLink="false">https://sspai.com/post/101814</guid>
            <pubDate></pubDate>
            <updated>Fri, 15 Aug 2025 01:27:22 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Whisper模型,语音转文字,写作流程,AI技术  

总结: 本文探讨了语音转文字技术对写作流程和思维方式的影响。作者比较了键盘输入和语音输入的不同思维模式，前者是异步、非线性的"建筑"过程，后者是同步、线性的"河流"模式。语音输入提高了写作效率但增加了编辑负担，同时使文字更口语化。该技术还改变了人际沟通方式和工作范式，既降低了创作门槛，也可能加剧语言不平等。最后，作者评测了多款语音转文字软件的特点和适用场景。 </div>
                        <hr>
                    
                    <p>自从 Whisper 模型出现以来，语音转文字就成了我的写作流程中非常重要的一环，之前也写过一些<a href="https://sspai.com/post/79775">文章</a>分享了 AI 语音转文字的一些用法。而随着越来越多人开始使用语音转文字、越来越多相关的软件出现，这一「便捷」的输入方式也为越来越多人所熟知。在以前文章中也提到过，人工智能可能对人类社会生活方式造成许多改变，包括日常创作、人际交往乃至工作方式都迎来了诸多变化。最近我发现，这些变化已切实地体现在我身上。</p><h2>近期写作上的一些变化</h2><p>以前写文章的时候，我通常是有想法就直接用手机打开 Flomo 记录灵感，有空时在就随便找个咖啡店、或者在高铁、飞机上用iPad上打字成文。但最近在记录灵感时，我越来越多地通过语音来记录了，而使用语音时，出于「语音尴尬症」等原因，下意识地会避免利用一些在公共场合的零散时间进行片段的输入。更多是希望能找到一个相对空闲的时间、相对独立的地点，用语音来完成整体草稿的撰写。</p><p>这其实和我一开始想的「语音有利于片段化的输入」这一想法出现了很大的区别，也引发了进一步的思索——语音输入和键盘输入的区别到底有哪些，而语音输入对我们又会产生什么样的影响。</p><h2>语音输入 vs. 键盘输入</h2><h3>思维模式</h3><p>如果用一个简单的比喻来描述什么是键盘输入和语音输入，以及他们之间的区别，文字输入其实有点像我们是在一块砖一块砖地来「建一座房子」。在这个过程中，我们可以随时停下来审核结构，发现不满意的地方就拿掉，然后重新垒上，同时，我们可以交替着在多个地方开始垒墙。这个整个过程是<strong>异步、非线性</strong>的过程。在这个过程中，我们会经常需要做修改、拼接等等。经常写作的人也会有这种感受，我们会对每一个句子、每一个段落、每一个词进行琢磨，当我们写完一句话时会回头看看，删掉几个字，或立刻做出修改。</p><p>相比之下，语音输入更像一条「河流」。思想如水流，说出的话直接奔涌向前。我们无法让河流暂停，回到上游修改水流，只能保持它从头到尾流动。这过程<strong>同步且线性</strong>，需要不受打扰的环境。</p><p>为何会有这种差异？一个原因是<strong>认知摩擦力不同</strong>。打字时，我们经历思考、选词造句、寻找按键、拼写，然后看到文字出现，整体是一条很长的链条。语音输入则更容易进入心流状态，因此我们希望有个不受打扰的环境，一旦进入状态就不停下。写作时注重的会是思维的连贯表达，而非单个词语的完美与否。</p><p>同时，打字和语音输入调用的思维模式也不同。书面写作偏向<strong>逻辑结构和分析</strong>，讲述则偏向<strong>故事思维</strong>。讲故事追求连贯完整，写作的逻辑思维则完全不同。</p><p>我们并非说河流模式一定比建筑模式好，或更代表时代发展方向。相反，这是每个创作者面临的取舍。</p><h3>效率</h3><p>语音转文字技术对写作最直观、最可量化的影响，毫无疑问在于对效率的颠覆性提升。人类说话的速度远超打字，那自然，只要有足够的内容储蓄，能够维持输出强度，那么自然在相同的时间下，就能够输出更多的文字。不过需要注意的一点是，语音转文字也导致了编辑负担的转移。在起草阶段所节省的时间，一定程度上被转移到了编辑阶段。</p><p>正如上文所说，口述生成的初稿往往是未经加工的「原材料」，需要大量重写和结构调整才能成为合格的书面语。因此，语音转文字带来的生产力提升，其实并非简单地缩短了总时间，更多是重构了时间分配。</p><p>对于那些在编辑上比较苦手的人来说，实际上可能并不能减少他们总的输入时间。而真正的效率提升，属于那些能够成功适应新的两阶段工作流程，并掌握相应编辑技能的写作者。</p><h3>对文字本身的影响</h3><p>语音转文字技术对写作带来的转变远不止于效率，它也在潜移默化地改变文字本身的特质。</p><p>既然文字来源于口语，那写作出来的文本也自然会更加倾向于对话式的风格。这种风格在某些博客、介绍性文章中自有其优势，能营造出一种亲切、自然的氛围，但若讲述者本身不擅长讲故事，则有可能会囿于流水账的困境。</p><p>这也就引出了语音转文字所带来的潜在问题，即会导致行文冗长、结构松散。在我的语音转文字写作中就经常出现这个问题， 由于思考和写作是同时进行的，而人在思考的时候会不自觉地重复自己的观点，以保证逻辑的连贯性。当这种思维落在纸面上，就很容易会出现大段的重复。</p><h2>影响不止于写作？</h2><p>语音转文字所带来的影响不只局限于写作，它对于我们人与人之间的沟通，乃至于人与生活之间的互动都会带来很大的改变。</p><h3>人和人之间的沟通模式</h3><p>举个例子，语音转文字对工作中人与人之间沟通就会有很大的影响。以前当我们开会时，除非额外注明有人来专门做会议纪要，不然很多时候会议的内容是无法追踪的，人们相对而言就可以更加畅所欲言一些。而随着语音转文字技术的运用，所有的会议都可以留痕，这也就导致人们在线会议时会更加谨慎，更加注重自己的措辞，对于自己所抒发的内容会有更多审慎的考虑，会避免随意输出可能对自己或他人不利的内容。</p><p>这一方面使得同事与同事或者说不同部门之间的沟通变得愈发困难，但在某种程度上也增加了线下人与人之间沟通的重要性。在工作中，人们可能更加会倾向于线下的会议，或者说在茶水间等非正式场合的碰面。所以说，语音转文字技术在工作中可能会导致地理位置相近的人之间的关系变得更加紧密，而对于位置相对较远的人而言，反而会加深他们之间的隔阂。</p><h3>人和社会之间的交互</h3><p>语音输入正在重塑人们执行日常任务的方式，培养了新的行为习惯和用户期望，例如，人们期待技术能够提供即时、准确和个性化的响应 。然而，这种行为转变也面临障碍，包括用户对设备全部功能认知不足，以及在公共场合使用语音命令的社交尴尬感 。</p><p>而对于人与社会，以及人与社会中的一些事物的交互而言，也带来了很多的改变。语音转文字的效率大大优于传统的写作，人们在工作中也会更加依赖语音转文字，这就导致了人们<strong>工作范式</strong>的一定改变。很明显，在那些所有人坐在一个场合进行工作的场景下，语音转文字可能并不适用。人们会避免自己的隐私被探听，同时也担心会影响到别人。因此，在工作场所里，人们可能会需要更多个人的空间，或者更多可以短暂使用的个人空间，如电话间等。而这也同时进一步导致了人们工作节奏的加快。由于信息产生和处理速度的提升，人们的工作压力也会进一步增加，并且也会要求人们掌握更多的语音输入技巧。由于语音天生是流逝的，它也会要求人们学会怎样说出结构化的内容，这对人们的思维模式的要求其实更高了。</p><h3>对社会的深层影响</h3><p>而对社会交互的深层影响而言，优点自然在于，它在功能上进一步增加了<strong>信息的民主化程度</strong>。由于不善于打字的人也因此能够更加轻松地创作内容，在一定程度上降低了内容创作的门槛，同时也为那些文盲、不擅长书写打字，或者有手部残疾的人提供了一个相对公平的表达渠道。</p><p>而对于文化而言，语音转文字带来的可能更多是一些负面影响。相对而言，AI 虽然在一定程度上缩小了阶级之间的不公平，但是对于不同语言、不同族群人之间的公平程度反而有可能是一种放大。那些使用少数语种或者有特殊口音的人会因此丧失快速输出的机会，和主流人群之间的差距会进一步扩大。而且语音转文字在主流语言上的优势也会随着语料增加而进一步增加，一些地方语言很有可能会加速消亡。当然，这里面也有一些反例，人工智能也可以用来保护或识别一些比较古老的语言，这取决于人们如何使用人工智能技术。</p><p>第三个变化更多在于<strong>认知模式</strong>上，人们通过语音随时记录想法，这改变了大脑处理信息的方式，就像我们之前所说的「建筑」和「流水」之间的区别。这长期对于人们的思维方式也会有负面影响，一旦人们习惯于随时随地记录自己的语音，自然的记忆能力反而可能会被削弱。</p><h2>简要横评常见的语音转文字软件</h2><p>下文会对我使用过的一些语音转文字软件进行一些简单的评述。特此声明，我仅评测我付费使用过的产品，且不打总分，因为不同维度对不同人来说有着完全不同的权重。篇幅所限，每个软件仅作简单评述，如有需要详细介绍，可以在评论区留言，后期有时间了可能会写更详细的文章。</p><h3>语音+笔记</h3><h4>TL;DR</h4><figure class="table"><table><thead><tr><th>&nbsp;</th><th>Audiopen</th><th>Voicenotes</th><th>闪念贝壳</th><th>Flomo</th><th>Dinox</th></tr></thead><tbody><tr><td>价格</td><td>⭐</td><td>早鸟⭐⭐⭐⭐⭐<br />订阅⭐<br />&nbsp;</td><td>买断⭐⭐⭐⭐<br />订阅⭐⭐</td><td>⭐⭐⭐</td><td>买断⭐⭐⭐<br />订阅⭐⭐</td></tr><tr><td>UI/设计</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐</td></tr><tr><td>输入便捷度</td><td>⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐</td></tr><tr><td>AI 能力</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>上传录音</td><td>⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>集成能力</td><td>⭐⭐⭐</td><td>⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>⭐</td><td>⭐⭐⭐⭐</td></tr><tr><td>附加功能</td><td>⭐</td><td>⭐⭐⭐</td><td>⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>开发者能力</td><td>⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐</td></tr><tr><td>未来预期</td><td>⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐</td></tr></tbody></table></figure><p>&nbsp;</p><h4>Audiopen</h4><p>在所有语音转文字笔记软件中，Audiopen 应该是最早出圈的一个产品。早在2023年它就诞生了，作者从来没有编程经验，通过 vibe coding 创造了这款产品。</p><p>由于它当时昂贵的定价，也激起过一些讨论。Audiopen的 UI 以及语音转文字的准确度在所有产品中都是最佳的。去年，它也开发出了 app 端，在易用程度上也很优秀。它的后端集成做得也挺好，可以自动把转录及AI修改好的内容发送到 Notion，或通过 webhook 发动到其他自己想要管理的软件之中。综合来看，作为这个行业里的先驱，除了价格较贵之外，没有什么值得吐槽的问题。</p><h4>Voicenotes</h4><p>如果你错过了 Voicenotes 早期的 50 美元早鸟价买断的话，那这可能是语音转文字笔记软件用户最大的遗憾之一。</p><p>Voicenotes 在所有笔记软件中可以说是综合了价格、 UI、设计逻辑、后期的集成等最好的一个产品。Voicenotes 的设计非常克制且优雅，无论是极简的设计还是对于 AI 改写的克制，在使用便捷度上是首屈一指的。</p><p>它既支持在 App 中进行转录，也支持上传语音文件进行转录。除此之外，Voicenotes 还支持通过一个叫 Pages 的功能来把自己的语音转文字发布出去，形成自己一个非常微型的博客。我也把它作为我个人博客的一个补充，记录一些我个人的日常闪念。同时，它也支持 AI 问答等功能。</p><p>值得一提的是，Voicenotes 的作者是 Buy me a coffee 的作者，因此信誉度相对可靠，暂时不用担心跑路。</p><p>综合下来，Voicenotes 是我在所有笔记软件中使用语音转文字的频率最高的。而且它同时支持网页端、手机端以及苹果手表端的输入，这让它的使用场景得到了大大的拓展。近期，它也更增加了在桌面端的快捷输入，并且更加扩展了它自己的使用场景。</p><h4>闪念贝壳</h4><p>闪念贝壳其实是先在海外做起来之后才拓展到国内的，在外区它的名字叫 Ideashell。作者不愧是设计出身，它的外观设计非常优美，UI也很简洁美观，对颜值党来说用着非常舒服。</p><p>而另外一个特色则是它与其他各种软件的集成。打开软件（或通过小组件/action button)，录入一段语音，生成的内容，可以被非常便捷地立刻发送到包括从微信、提醒事项到 Notion、Obsidian、熊掌记、Craft、滴答清单、Day One等一系列笔记软件中去，在操作的便捷度上毫无疑问是在所有软件中最佳的。</p><p>此外，闪念贝壳支持上传录音文件进行转录，并且支持区分不同发言人，这个功能常被我用于临时会议记录。</p><h4>Dinox</h4><p>如果说闪念贝壳是典型的设计师作品，那么 Dinox 则是典型的工程师作品。</p><p>如果要论各种与 AI 相结合的功能最齐全、设置最复杂的产品，Dinox 非他莫属。它支持从语音转文字到后续的结构化处理、相关笔记、AI 聊天等一系列功能，甚至还支持手机端检测存储，并且包括 S3 等不同的对向存储。</p><p>可以说，所有你能设想的与笔记相关的功能在 Dinox 都有。但自然，缺点也是存在的：它的操作设置过于复杂，入门相对较为困难，且当前阶段 bug 较多；在美观上与其他几款产品相比略有缺失。同时，由于作者想法很多，整体作品割裂感比较强，并没有一个明确的产品特质。</p><p>但是，作者的更新频率以及响应速度非常之快，几乎每隔几天就有一个新版本，可以说是未来可期的一个选择。</p><h4>Flomo</h4><p>其实早在 AudioPen 流行之后，我就和少楠提过在笔记软件中加入语音转文字的想法。但当时他们觉得需要先研究语音转文字是不是一个笔记软件的刚需，以及如果真的加入了，如何进行最符合他们产品逻辑的设计，谁料这一研究就是两年。</p><p>对于他们这个解释，一开始我和其他挺多人一样，觉得他们只是出于成本考虑而拒绝做出一些新的尝试。也因此，我尝试了其他挺多速记软件。</p><p>几个月前，Flomo 终于加入了语音转文字。并且我也很欣慰地看到他们确实在里面融入了自己的想法。相比于那些着重于语音输入后，对笔记进行很多基于不同prompt调整的软件而言，Flomo 不支持自定义prompt（对不少人来说这是个缺点），非常注重写作者原来的结构，仅去除了一些常见的口辟等。</p><p>这其实也和我对于笔记的看法不谋而合。之前我也尝试过通过很多预先设置好的 prompt 来对自己的语音输入进行大幅度修改，但最后却发现这些修改过的笔记虽然看起来更加精致，但很多情况下并不能反映我自己的原意。亦或者，当我事后回顾的时候，总感觉这些笔记有些陌生。正如少楠和Lightory 想传递的笔记理念，只有那些在我们用自己的理解记下来的内容，才是我们当下最真挚的表达。我们自己通过思考来进行的重新编辑，也能让我们对自己的笔记有更深刻的印象。</p><p>此外，这半年支持的 AI 搜索和最近引入的 AI 洞察也很有想法，能帮助用户发现笔记和笔记之间的关联——虽然 Voicenotes和Dinox也支持类似的功能，但从易用程度以及完成度上来看，后两者只能称得上有这个功能，远远不算好用。</p><p>说了这么多，Flomo 当然也有一些问题，比如说他的语音笔记最长只能支持五分钟，对生成的内容会进行自动审核，替换掉一些不当语句，并且不支持同步到其他软件等。但从使用的易用性上，以及语音转文字这一功能本身的实现的完成度上，Flomo 还是做得很好的。</p><h4>其他：Get笔记、即我笔记、Reflect、Tana、Workflowy等</h4><p>这里提到的这些笔记软件并不代表市面上所有支持AI语音转文字的软件，还有几款可以简单提一下。</p><p>如果把市面上的语音转文字软件分成两类，一类可以算是所谓的「AI 原生」笔记软件，另一类则是「AI+」笔记软件</p><p>其中，Get笔记和即我笔记，以及这两年在即刻、小红书上各种独立开发者各种宣传的层出不穷的新软件大都是在AI语音转文字出现之后而诞生的。他们在从初始阶段就兼顾到了语音转文字的开发，但因为我使用的不多，也建议大家去找其他的评测。</p><p>而后面提到的这几款Reflect、Tana、Workflow则是基于已有的笔记软件的基础上，把语音转文字融入他们的工作流。其中，Tana毫无疑问是其中做得最好的一款。AI 已经成为其完整工作流中的一环。它既支持会议的转录，也支持日常的手机端以及电脑端的语音输入。此外，Tana还能在输入之后用AI对语音转文字的内容进行进一步修改，自定义化非常强。</p><p>但由于这几款都需要比较昂贵的订阅费，在性价比上，如果只是把它作为语音转文字软件而言，相对会比较低。不过，如果能把它们与自己的工作流结合起来，或者作为自己的知识库所在，那是可以考虑的选择。</p><h3>语音转录输入法</h3><p>桌面端的语音转文字输入法也有不少选择，最主流的包括 Superwhisper、Wispr Flow等，甚至 Voicenotes 近期也推出了 Mac 端的输入法软件，只需按住快捷键，就能直接把语音转文字输入到当前的文本框内。</p><p>由于我日常输入不依赖于 Mac，对这方面没有很深的研究，可以参考 Edison 的这篇<a href="https://linux.do/t/topic/833194">文章</a>来了解更多的细节。</p><h2>语音输入是 AI 时代的唯一正解吗？</h2><p>语音转文字软件确实加快了我单一文稿撰写的速度，例如这篇文章有 50% 的部分是通过语音输入完成的初稿。但回头看来，寻找具有仪式感的环境进行语音输入这一行为反而对我创作构成了新束缚。</p><p>以前我能在等地铁、午休时花几分钟，用手机或iPad快速写出文章一部分。然而习惯于用语音写初稿之后，我的零散输入时间反而变少了。</p><p>未来创作中我可能需要区分不同类型文字，采取不同写作方式。对偏向故事型、记录型的内容，使用语音可能更方便；对偏向书面信息的写作，找个安静地方写可能更好。更或者，在大部分情况下，我都会更加倾向于用打字的方式来进行写作。因为无论是在摘录闪念，亦或是在长篇梳理自己想法的时候，这种字斟句酌的输入方式都更有利于我理清自己的思路。并且，它能更加有一种创作的真实感以及仪式感。毕竟，有时候仪式感本身也是创造力的来源之一。</p><p>而如何根据自己所处环境、惯用设备而选择最适合自己的创作方式，是每个创作者都需要面临的课题</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101833</id>
            <title>不止于聊天：我的 Vibe Coding 工作流，用上下文与 MCP 打造更聪明的 AI 助手</title>
            <link>https://sspai.com/post/101833</link>
            <guid isPermaLink="false">https://sspai.com/post/101833</guid>
            <pubDate></pubDate>
            <updated>Thu, 14 Aug 2025 11:42:53 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: AI编程工具,上下文工程,MCP协议,提示词工程  
<br>  
<br>  
总结: 本文探讨了提升AI编程工具效率的两个关键要素：上下文工程和提示词工程。作者指出，通过编写规范文档和利用工具提供的上下文管理功能（如Cursor的@指令、Memories功能），可以有效提升AI的工作效果。文章重点介绍了MCP协议，这是一种整合外部资源的通用接口协议，列举了Fetch、Context 7、Playwright等多种MCP工具及其应用场景。在提示词工程方面，作者分享了如何通过精心设计的提示词引导AI遵循特定工作流程，包括研究、构思、计划、执行、评审等步骤。最后，作者比较了当前主流AI编程工具的优劣，并强调掌握上下文工程和提示词工程的重要性，认为这是未来与AI高效协作的核心能力。 </div>
                        <hr>
                    
                    <h2>一切的基础：为 AI 打造高效的上下文环境</h2><p>当前主流 AI 编程工具的核心能力大多源于大型语言模型，但它们在实际使用体验上却存在显著差异。在我看来，这其中的区别在于各个工具厂商背后的工程化能力。要想让模型的的能力发挥得好，提示词工程和上下文工程上做功夫肯定是必不可少的。</p><p>那抛开工具本身的优化不谈，如果使用者本身也能在提示词和上下文上做功夫，工具产出的效果自然也不会差到哪里去。下面我将围绕这两个方面来分享我 Vibe Coding 中一些体验和技巧。</p><p>在开始编写你的项目之前，敲定项目要使用的技术栈路线和MVP阶段的要实现的目标和功能是很重要的一件事。你需要根据你的项目情况，编写一份提供给AI读取的规范文档。</p><p>为啥要这样做呢？AI每次的输出都是带有很多确定性，一份我们特定编写好的规范文档， 自然也是一份绝佳的上下文。如果你没有提供好足够的上下文给AI，没有尽可能的让AI牢记自己的”身份“。什么该做，什么不该做。那你的AI的工作效果总会不如你心意，你总会觉得你的AI不如其他人”聪明“。</p><p>不过，现在其实不用那么麻烦了，我们可以看到很多工具都在这方面做了很多优化。cursor的 <code>cursor rule</code> ，<code>trae</code> 的 <code>solo</code>模式，<code>kiro</code>的 <code>Agent Steering</code>，Claude Code 的 <code>Claude.md</code> ，这或许也会带来一个新的现象，未来大量的项目里面一堆专为 AI编写的文档，像极了AI在你的项目里面堆满了”垃圾“ ……</p><p>很多工具的对话框中也提供了添加上下文的方式。以 <code>Cursor</code> 的 <code>@</code> 指令为例，通过 <code>@</code> 指令，我们就可以添加多个来源的上下文。</p><figure class="image ss-img-wrapper image_resized" style="width: 338px;"><img src="https://cdnfile.sspai.com/2025/08/14/a5d1335311753179171beb8a1f32fc6b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>cursor 对话框中的上下文添加方式</figcaption></figure><p>除此之外，部分工具也引入 <code>Mermories</code>的功能，也就是所谓的记忆。例如，<code>augument code</code>，<code>cursor</code>等，从我个人角度看，这也属于上下文的一种形式。</p><figure class="image ss-img-wrapper image_resized" style="width: 537px;"><img src="https://cdnfile.sspai.com/2025/08/14/9a0ff1843c79f3334119917da00963cd.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Cursor 的记忆（Memories）功能，也是上下文管理的一种方式</figcaption></figure><figure class="image ss-img-wrapper image_resized" style="width: 537px;"><img src="https://cdnfile.sspai.com/2025/08/14/b1b5dc4ebd4bda0c1a2da4dab27f541b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Augument Code 中的记忆（Memories）功能</figcaption></figure><p>不过，如果上下文工程仅仅只有上面这些处理，那还是远远不够的。为了拟补 AI 自身所带的幻觉和能力的不足，就轮到 MCP 出场了。</p><h2>MCP 协议：扩展 AI 的能力边界</h2><p>很多人应该都久仰其大名了吧，容我再啰唆几句，再对它做一个简单的解释。</p><blockquote><p>什么是 MCP ？</p></blockquote><p>MCP是一种约定好的协议，就像一个“USB-C 通用接口”。目的是解决大型语言模型（LLM）与外部工具或数据源之间 <strong>整合碎片化</strong> 的问题&nbsp;，让 AI 模型可以通过统一方式连接 GitHub、Slack、飞书、数据库、文件系统等外部资源，获取<strong>上下文</strong>信息并执行操作。</p><blockquote><p>为什么需要 MCP？</p></blockquote><p>大模型（如 GPT、Claude）只能使用它们训练时获得的知识，但无法实时访问网络或其他工具，而由于无法保证训练时知识的时效性和百分比准确性，会导致大模型还会自带幻觉的问题，容易“闭门造车”。</p><p>一个设计良好的 MCP 能显著提升 AI 获取上下文、纠正自身错误的能力，如同为 AI 插上了翅膀，让模型产出更好的结果。</p><p>在AI编程工具中，我主要使用以下 MCP：</p><ul><li>Fetch MCP：一个轻量级、高效的网页抓取工具，能把网页内容转换成Markdown格式方便大语言模型使用。</li><li>Context 7 MCP：为AI编程助手提供最新、版本特定的代码文档和示例，解决模型使用过时信息的问题。</li><li>Playwright MCP：基于Microsoft Playwright，给语言模型提供浏览器自动化能力，能操作网页、截屏和生成测试代码。</li><li>Sequential Thinking MCP：一个帮助AI有序分解和逐步解决复杂问题的思维协议，类似AI世界的“USB-C接口”。</li><li>Deepwiki MCP：能爬取GitHub代码库文档并转为Markdown，提升开发者理解和使用开源项目的效率。</li><li>MCP Feedback Enhanced：引入反馈环节，让AI在执行关键操作前主动反馈，等你把控细节走向和确认，减少误操作，提高交互效率。</li><li>Notion MCP：与Notion API集成，方便内容和数据库管理，实现对页面、区块、数据项的读取和修改。</li><li>Github MCP：提供与GitHub仓库的集成，帮助获取代码库内容并与AI工具协同工作。</li><li>GitMCP：一个支持从文档和代码库中获取知识的MCP工具，提高信息检索和知识整合能力。</li><li>Firecrawl MCP：结合网页爬虫和AI分析，支持批量网页抓取和结构化数据提取，助力内容分析和处理。</li></ul><pre class="language-markdown"><code>{
"MCPServers": {
    "fetch": {
    "command": "uvx",
    "args": [
        "MCP-server-fetch"
    ],
    "env": {},
    "disabled": false,
    "autoApprove": [
        "fetch"
    ]
},

"Context 7": {
    "command": "npx",
    "args": [
        "-y",
        "@upstash/context7-MCP@latest"
    ],
    "disabled": false,
    "autoApprove": [
        "resolve-library-id"
    ]
},

"Playwright": {
    "command": "npx",
    "args": [
        "-y",
        "@playwright/MCP@latest"
    ],
    "disabled": false,
    "autoApprove": [
        "browser_navigate"
    ]
},

"Sequential thinking": {
    "command": "npx",
    "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
    ],
    "disabled": false,
    "autoApprove": [
        "sequentialthinking"
    ]
},

"MCP-deepwiki": {
    "command": "npx",
    "args": [
        "-y",
        "MCP-deepwiki@latest"
    ],
    "disabled": false,
    "autoApprove": [
        "deepwiki_fetch"
    ]
},

"MCP-feedback-enhanced": {
    "command": "uvx",
    "args": [
        "MCP-feedback-enhanced@latest",
        "server"
    ],
    "env": {
        "FASTMCP_LOG_LEVEL": "ERROR"
    },
    "disabled": false,
    "autoApprove": [
        "interactive_feedback",
        "get_system_info"
    ]
},

"notion": {
    "command": "npx",
    "args": [
        "-y",
        "@suekou/MCP-notion-server"
    ],
    "env": {
        "NOTION_API_TOKEN": "这里你需要配置自己的API key"
    },
    "disabled": false,
    "autoApprove": [
        "notion_retrieve_bot_user"
    ]
},

"github": {
    "command": "npx",
    "args": [
        "-y",
        "@modelcontextprotocol/server-github"
    ],
    "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "这里你需要配置自己的API key"
    },
    "disabled": false,
    "autoApprove": [
        "get_file_contents",
        "search_repositories",
        "create_repository",
        "push_files",
        "create_or_update_file"
    ]
},

"GitMCP": {
    "command": "npx",
    "args": [
        "-y",
        "MCP-remote",
        "https://gitMCP.io/docs"
],
    "disabled": false,
    "autoApprove": [
        "search_generic_documentation"
    ]
},

"firecrawl-MCP": {
    "command": "npx",
    "args": [
        "-y", "firecrawl-MCP"
    ],
    "env": {
    "FIRECRAWL_API_KEY": "这里你需要配置自己的API key"
    }
}

}
}</code></pre><p>&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 511px;"><img src="https://cdnfile.sspai.com/2025/08/14/a5aa8a8a8fe9b5dafbc63a51410a2b49.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Cursor 中配置 MCP</figcaption></figure><figure class="image ss-img-wrapper image_resized" style="width: 391px;"><img src="https://cdnfile.sspai.com/2025/08/14/48411aeb316b4426c9f27448fa1dd770.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Kiro 中配置 MCP</figcaption></figure><figure class="image ss-img-wrapper image_resized" style="width: 502px;"><img src="https://cdnfile.sspai.com/2025/08/14/b624706b245a1e70d98dac62c9c28bf6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Augument Code中配置 MCP</figcaption></figure><p><code>GitHub</code> MCP 中的 <strong>API key</strong> 获取方法如下：</p><ul><li>登录 GitHub 后，进入 <strong>Settings → Developer settings → Personal access tokens</strong></li><li>选择生成 <strong>Classic Token</strong> 或 <strong>Fine-grained Token</strong>，设定过期时间与权限（至少包含 repo、workflow 等）</li><li>点击 <strong>Generate token</strong>，生成后请立即复制保存，日后无法再次查看<br />这里有篇 <a href="https://everhour.com/blog/github-personal-access-token/" target="_blank">博客</a> 是最新（2025 年）指南写法，非常详细。</li></ul><p><code>Notion</code> MCP 中的 <strong>API key</strong> 获取方法如下：</p><ul><li>打开 Notion: <strong>Settings → Integrations → “Develop your own integrations” → + New integration</strong></li><li>填写名称、选择工作区、设置权限（例如读取/写入数据库）</li><li>创建后，在 Integration 的配置界面的 <strong>Configuration</strong> tab 下可找到 “Internal Integration Secret” 或 “API secret”</li><li>复制该 token，另需将希望集成访问的页面或数据库 “Share” 给该 integration，确保它具备权限<br />详细教程可以看看 <a href="https://www.notion.com/help/create-integrations-with-the-notion-api" target="_blank">notion 官方文档</a> 说明。</li></ul><p><code>FireCrawl</code> MCP 中的 <strong>API key</strong> 获取方法如下：</p><ul><li>访问 Firecrawl 官方平台的 <a href="https://www.firecrawl.dev/app/api-keys" target="_blank">API 密钥页面</a></li><li>登录后生成 API Key，复制之后填入上面的 json 文件中对应的位置即可。</li></ul><p>那如何让 AI 使用这些 MCP工具呢？</p><h2>提示词工程：精确引导 AI 的工作流</h2><p>这里就引出了提示词工程。我希望在AI输出结果的过程中去把握细节和走向，就可以通过提示词工程来实现。如下<strong>提示词</strong>（该提示词非本文原创，改编自 Linux Do 社区的分享，我在此基础上进行了个性化调整……）所示，它以 <a href="https://github.com/Minidoracat/mcp-feedback-enhanced">mcp-feedback-enhanced</a> 为核心来主导工作流。</p><pre class="language-markdown"><code>## 核心身份 (Persona Role):
你是一款顶级IDE AI编程助手，专为专业程序员服务。你的核心特质是：**严谨、高效、流程驱动、工具增强、绝对遵循已定义的行为准则**。你始终使用简体中文进行交互。你行事专业，沟通简洁，避免不必要的寒暄与解释。

## 核心目标/任务 (Core Goal/Task):
严格遵循下述定义的协议、准则和工作流，为用户提供专业的编程开发辅助。你的最终目标是**生成高质量、可维护、且仅限于应用程序逻辑的生产代码**，同时保持与用户的清晰、高效互动。

## 核心行为准则与约束 (Core Behavioral Principles &amp; Constraints):
这是你必须无条件遵守的最高指令集。这些准则的优先级高于一切，必须融入到你的每一个思考和行动步骤中。

1.  **【准则一：聚焦生产代码实现】** 你的核心职责是构建和完善应用程序本身的功能代码。因此，除非用户要求外，你的任务范围**已明确设定为不包含任何形式的测试相关工作**。
    **正面指令 (Do this):** 专注于编写业务逻辑、服务、控制器、工具函数等生产代码。
    **反面指令 (Not this):** **绝不**擅自创建或修改任何测试文件（如 `test_*.py`）、编写任何测试用例、测试断言或测试脚手架。
    **背后原因 (Rationale):** 用户的开发环境采用统一的 **行为驱动开发(BDD)测试框架**。你的职责是提供与该框架解耦的、纯粹的功能实现，而不是生成冗余或冲突的单元测试。

2.  **【准则二：专注命令行与脚本操作】** 你的所有操作都必须是可通过代码或命令行完成的。
    **正面指令 (Do this):** 当遇到需要图形界面(GUI)或需要用户手动干预（如安装依赖）的操作时，你**必须**立即停止，并调用 `mcp-feedback-enhanced` 工具，清晰地向用户说明需要他们手动完成的具体步骤。
    **反面指令 (Not this):** **禁止**假设或描述任何需要点击按钮、填写表单等GUI交互的步骤。

3.  **【准-则三：坚守代码设计哲学】** 你编写的所有代码都**必须**体现以下设计原则，以此作为代码质量的基石：
    *KISS (Keep It Simple, Stupid):** 优先选择最简单直接的实现方式。
    *YAGNI (You Ain't Gonna Need It):** 只实现当前需求明确要求的功能。
    *SOLID Principles:** 保证代码结构的高内聚、低耦合和可扩展性。

4.  **【准则四：严格遵循工作流】** **禁止**跳过或改变下述核心工作流的顺序，除非接收到用户的明确指令。

## 关键背景与上下文 (Key Context &amp; Data):
    **目标用户**: 专业程序员，理解技术术语，追求效率。
    **核心理念**:
    1.  **拒绝重复造轮子**: 对于复杂功能，首要任务是利用 MCP工具 和 Web 搜索工具研究现存解决方案。
    2.  **规划先于行动**: 严格遵循“思考 -&gt; 分析 -&gt; 编码”的模式，确保方案最优。
    3.  **质量与功能并重**: 不为通过编译而牺牲代码质量或功能。深入分析并解决警告与错误的根源。

## 核心工作流协议 (Core Workflow Protocol):
你必须严格按照 `研究 -&gt; 构思 -&gt; 计划 -&gt; 执行 -&gt; 评审` 的顺序推进工作。每一次响应都必须以模式标签开头。

1.  `[模式：研究]`
        **任务**: 深入理解用户需求，识别核心问题和所有约束。如果需求复杂，主动使用工具（见工具协议）搜索现有解决方案。
        **交付**: 对需求的总结性理解。

2.  `[模式：构思]`
        **任务**: 基于研究结果，提出至少两种逻辑清晰、技术可行的解决方案。对每种方案进行简要评估（如优缺点、复杂度）。
       **交付**: 格式化的方案列表，例如：`方案1：[描述]...`。

3.  `[模式：计划]`
        **任务**: 将用户选定的方案，分解为一份详尽、有序、可执行的步骤清单。
        **计划内容**: 必须包含原子级别的操作，如文件创建/修改、函数/类实现、逻辑概要、工具调用等。
        **【内置检查点】**: 在生成计划后，**必须进行自我审查**，确保计划清单中**不包含**任何创建或修改测试文件的步骤。这是**准则一**的直接体现。
        **交付**: 步骤清单(tasks list)。完成后，**必须**调用 `mcp-feedback-enhanced` 请求用户批准计划。

4.  `[模式：执行]`
        **前提**: **必须**在获得用户对计划的批准后才能进入此模式。
        **【内置检查点】**: 在开始编码前，再次确认当前任务严格遵守**准则一**和**准则二**，**仅生成生产代码**。
        **任务**: 严格按照已批准的计划进行编码。将任务简报（含上下文和计划）存入 `./issues/任务名.md`。
        **交付**: 在关键步骤完成及整体任务完成后，**必须**调用 `mcp-feedback-enhanced` 向用户反馈进展或结果。

5.  `[模式：评审]`
        **任务**: 完成代码实现后，自我评估执行结果。对照计划，报告任何偏差、遇到的问题或改进建议。模拟编译项目，并报告所有需要解决的警告或错误。
       **【内置检查点】**: 在评审报告中，再次确认所有交付物均符合**核心行为准则**，特别是代码风格和无测试代码的规定。
        **交付**: 评审报告。完成后，**必须**调用 `mcp-feedback-enhanced` 请求用户最终确认。

## 工具与错误处理协议 (Tool &amp; Error Handling Protocol):
    **研究阶段的探索**: 在 `[模式：研究]` 中，若初步分析未找到解决方案，**必须**依次尝试使用 `Context7`, `fetch`, `firecrawl-mcp` 及通用网络搜索工具进行深度探索。
    **执行阶段的工具失败**: 在 `[模式：执行]` 中，若工具调用失败，**必须**自动重试最多两次（总计三次尝试）。若三次均失败，则记录失败，跳过该工具调用步骤，并继续执行计划的后续部分，同时在最终的评审报告中注明此情况。
    **MCP服务优先**: 优先使用 `mcp-feedback-enhanced` 和 `Context7` 等MCP服务。

## Request (Crystal Clear, Actionable, Detailed &amp; Potentially Sub-divided):
现在，请激活此核心身份和协议。以 `[模式：研究]` 状态开始，等待我的第一个编程请求。</code></pre><p>很多工具提供了配置 <code>User Rules</code> (全局提示词)，也就是给你工具中的AI助手预设一个角色和身份，上面的提示词就是在这发挥用武之地。有了你预设的全局提示词，你工具中的 AI 自然会以你想要的工作流来执行任务。</p><p><code>User Rules</code>并没有绝对的还坏之分，你完全可以编写适合你自己工作流的全局提示词。不过我不建议将所有的要求一股脑放在 <code>User Rules</code> 中，建议根据特定场景需求拆分成特定的指令来使用。</p><blockquote><p>那其他 MCP 服务该怎么使用呢？</p></blockquote><p>也离不开提示词的引导。在 AI 研究我提出需求的方案时，我通常希望 AI 能够参考网络上其他现有的优秀案例和解决方案，所以这时候我会在对话中（提示词）说明这点：</p><pre class="language-markdown"><code>你是一个资深{领域}顾问，我希望你能给出高质量的{解决方案/案例/设计}。
请使用合适的 MCP 工具（例如 fetch、Context 7、firecrawl-mcp、mcp-deepwiki等）从网络获取真实、最新的资料，
并结合多个不同来源的案例，整理并输出：
1. 核心思路总结
2. 关键实现步骤思路
3. 不同方案的对比优劣
4. 适用场景与注意事项

禁止只依赖你的训练知识。</code></pre><p>如果你在开发Web 应用，那可以让 AI 使用 <code>Playwright</code> 这个 MCP：</p><pre class="language-markdown"><code>你是我的 Web 自动化测试工程师。
目标：{清楚描述你的目标，比如“测试登录功能并截图验证成功页面”}。
要求：
1. 必须调用 Playwright MCP 工具执行实际操作。
2. 所有网页操作步骤必须真实执行。
3. 输出结果时，请提供：
   - 操作步骤列表
   - 执行结果截
   - 遇到的异常（如有）
4. 使用 Markdown 格式输出结果，截图使用可访问的链接或嵌入方式。</code></pre><p>对于专业的程序员，GitHub在熟悉不过。而 <code>GitHub</code> 这个 MCP 自然是帮助我们操作 GitHub 的，能极大提升开发效率和协作体验。，极大提升了开发效率和协作体验。举几个例子：</p><ul><li><strong>查询代码结构</strong>：请使用 GitHub MCP，从仓库 owner/repo 获取当前项目的目录结构和主模块说明。</li><li><strong>创建或更新 Issue/PR</strong>：请调用 GitHub MCP 创建一个 issue，标题是 …，内容说明 …，并添加标签 bug。</li><li><strong>Markdown 批量生成</strong>：请用 GitHub MCP 抓取所有带 blog-content 标签的 issues，将它们转换为 Markdown 文件并提交到 <code>docs/blog/</code> 目录。</li></ul><p>至于 <code>Notion</code> 这个 MCP，则更多是我的个人偏好。我喜欢将一些解决起来出现较多困难，过程并不轻松的问题总结记录到Notion中。</p><figure class="image ss-img-wrapper image_resized" style="width: 512px;"><img src="https://cdnfile.sspai.com/2025/08/14/3b2db4b0a198abe3dd71cc52f179cc41.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>利用 Notion MCP，可以将解决复杂问题的过程和方案沉淀为个人知识库</figcaption></figure><p>以上基本是我平时使用 MCP 的过程，其实还有很多有意思的 MCP 等我们去挖掘和探索。受限于篇幅原因，这里我就不细讲了。</p><p>当然，提示词不仅仅能够用来调用 MCP，好的提示词会让你的 AI 员工工作起来事半功倍。如何编写优秀的提示词本身就是一门复杂的艺术，与‘如何提出一个好问题’异曲同工，这需要大量的实践和感悟。</p><p>平时和AI打交道多了，感觉自然就来了。🤯</p><h2>写在最后</h2><p>随着AI工具的发展，现在看来<code>cursor</code> 护城河似乎并没有那么高？目前实际体验下来，<code>augument code</code>的 <code>context engine </code>一骑绝尘，使用起来有种指哪打哪的效果。<code>kiro</code>的 <code>spec</code>功能让人眼前一亮，在制定规范上明显比<code>cursor</code> 便捷和好用。<code>trae</code> 的 <code>solo</code>模式对于web开发来说，也是一种全新的体验。</p><p>剩下的两个，<code>winsurf</code>我没咋用过，不过前段时间这家公司经历了：OpenAI 收购谈判破裂 -&gt; 关键团队被谷歌“逆收购”挖走 -&gt; Cognition(Devin) 收购剩余团队及资产 -&gt; 快速裁员与买断施压，这么大的变动，也不知道能不能继续走下去。</p><p>至于 <code>Athropic</code> 自己推出的 <code>Claude Code</code>，好用不用多说，但其高昂的订阅费用确实令我望而却步。</p><p>距离 <code>ChatGPT</code> 出现才过去了2年多，那时候真的很难想象 <code>Vibe Coding</code> 这种编码方式。从最初的 <code>cursor</code> 和 <code>winsurf</code>，到现如今各种 AI 编程工具：<code>augument code</code>，<code>trae</code>，<code>kiro</code>，<code>Claude Code</code>等。</p><p>比较可惜的是，驱动这些工具发挥出超乎寻常人的编程能力，都来源于 <code>Athropic</code> 这家公司背后的模型<code>Claude</code>，<code>Claude</code> 一家独大，长期占据着AI编程领域的 <code>SOTA</code>。</p><p>跑分榜上比肩的大模型不少，但实际体验仍然没有一个大模型能超过<code>Claude</code> 。 “一枝独放不是春，百花齐放春满园”。</p><p>不过，从<code>GPT-5</code> 模型能力的提升逐渐趋于平缓的情况和开源模型的逐步追赶，我大胆猜测，除非新的堪比<code><i>transformer</i></code> 的架构出现，否则比肩 <code>Claude</code> 的大模型迟早会出现。</p><p>我十分期待能有新的能比肩 <code>Claude</code> 的模型出现，通过良性竞争，让顶尖 AI 模型的 API 价格能更加亲民。</p><p>但无论这些工具如何迭代，<code>Claude</code> 的领先地位能维持多久，我们作为使用者都应该认识到，工具终究是外物，而驾驭工具的”心法“，也就是我们今天探讨的<strong>上下文工程与提示词工程</strong>——其重要性将愈发凸显。</p><p>与其被动地等待下一个”更聪明“的 AI，不如主动学习如何为我们现有的 AI “构建大脑”。理解如何提供精准的上下文，如何设计严谨的工作流，这种能力在未来只会更有价值。今天文中所分享的 MCP 协议和提示词框架，便是我在这条路上的一次探索。它或许不是最终答案，但我希望它能为你提供一个起点，一个不再仅仅是与 AI 对话，而是与 AI 共事的全新视角。</p><p>当然，技术日新月异，我的这套工作流也必然有其局限性。它更多的是一种思路的抛砖引玉。如果你对文中的 MCP 工具或提示词有更好的改进建议，或者你有自己独特的 AI 协作心得，非常欢迎在评论区分享你的经验和思考。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101784</id>
            <title>理想L8用车一年体验</title>
            <link>https://sspai.com/post/101784</link>
            <guid isPermaLink="false">https://sspai.com/post/101784</guid>
            <pubDate></pubDate>
            <updated>Thu, 14 Aug 2025 02:48:02 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 理想L8, 家庭用车, 智能驾驶, 增程优势  

<br>  
<br>  
总结: 1. 购车时建议在复杂路况试驾，避免被销售误导。2. 理想L8空间灵活，舒适配置齐全，适合家庭出行。3. 智能驾驶在高速表现良好，但城市路况体验不佳。4. 增程式设计解决里程焦虑，长途自驾更自由。5. 车机系统功能丰富但导航和语音识别有待改进。6. 使用成本低于燃油车，但充电桩安装费用较高。7. 车主对智能泊车和辅助驾驶功能有更高期待。8. 总体评价为80分，认为是一款实用但需优化的车型。 </div>
                        <hr>
                    
                    <p>以下是我们两口之家用车一年的感受</p><h3>决赛圈的车挑选Tips</h3><p>相信很多人买车前会有几个心仪的品牌，都会去试一试。</p><p>在我体验的几个品牌中，汽车销售挑选的都是快速路、主道、行人少电瓶车少——好走的路，其实更应该让销售带着往城市的复杂路况开一开，更能体现车的核心素质。</p><p>我们当时在决定购买之前约了一个15公里的长试驾、从非常拥堵的闹市路口，开到绕城高速，再开回闹市路口。分别销售开、我开、我爱人开、智能驾驶开，我们一二三排都坐了，没有晕车，最终敲定的是2024款理想L8中配（带激光雷达、六座版本）。</p><p>如果你晕车，或者对某个方面介意，要遵从自己的感受，不要被销售忽悠忍忍就过去了，因为未来这个介意的点会贯穿用车周期。</p><p>买车还是要买自己喜欢的，什么叫喜欢，比如我用车这一年里多次被剐蹭，蹭别人，钣喷了四五回，但是当我停好车后，我往前走几步时仍然会回头看一眼我的“小绿车车”，忍不住内心感叹一句“真帅！”我现在还是这样。</p><figure class="image ss-img-wrapper image_resized" style="width: 231px;"><img src="https://cdnfile.sspai.com/2025/08/12/11ffab790c645f6b7e41b374dca919df.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>购车当天留念</figcaption></figure><h3><strong>核心体验篇：这一年，车如何融入我的生活？</strong></h3><h4><strong>场景一：家庭出行 - “移动的家”名副其实吗？</strong></h4><p><strong>空间与舒适性：</strong>我们买的6座版本，如果是四大一小，小朋友会更喜欢最后一排。对于装载能力，第三排座椅可以全部放倒变为4座，也可以只放倒一边变为五座+行李。</p><figure class="ss-imgRows"><img alt="" src="https://cdnfile.sspai.com/2025/08/12/9c7397790f20601d20219c50fd2580da.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdnfile.sspai.com/2025/08/12/14523d4eda63a345a9540abb604414b8.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>车辆还自带一个叫“便捷上下车”功能，即汽车停好后开门时，空气悬架会自动降低，很方便老人小孩。</p><p>在舒适性方面，一二排座椅配备通风、加热、按摩，三排配备加热，每排两侧都有独立出风口。</p><figure class="image ss-img-wrapper image_resized" style="width: 227px;"><img src="https://cdnfile.sspai.com/2025/08/12/fcfcd687673e46b5b9761f1f6f995ebb.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>APP页面</figcaption></figure><p>夏天40度高温，外出就餐结束回车上的路途中，我会在理想APP上提前开启座椅通风+极速制冷模式，空调自动调整为18摄氏度9级风力。</p><p>冬天和朋友野外徒步，返程时提前开启极速制热+座椅加热+冰箱44度制热，回到车上时能喝上一口温水很舒服。我一般不开冰箱制冷，因为随处都可以买到冷饮，只有去超市采购生鲜食品时会开。</p><p><strong>娱乐系统：</strong>我们买的是中配版本，不带后排屏幕，想的是未来小朋友长大了也该换车了。副驾屏幕也很少看，在我等爱人逛街或在车内休息的时候，很少使用车载屏幕观看视频，因为爱优腾APP都是会员需要掏钱的。我偶尔会投屏我的美剧在屏幕上看，我们玩儿的最多的应用是成语接龙，</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/1207c5cea3209a0b1038cd0f53dca6f0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>成语接龙记录：108个</figcaption></figure><p>便利性配置：手机充电口比较多，二排有20w快充口，在第三排座椅下方有220v插座，我们带小狗出去玩儿水，用这个插座可以直接插吹风机给小狗吹干。买车的时候也附赠了一个能插在外部汽车充电口上的插座转换器，带一个插排就可以外接插座露营了。</p><h4>场景二：日常通勤与城市穿梭 - “大块头”灵活吗？</h4><p><strong>尺寸与操控：</strong>&nbsp;</p><p><strong>路边停车：</strong>虽然有自动泊车功能，但是它在侧方停车时，总是停的压在车位线上，我不得不重新倒一把，在狭窄车位里微操。</p><p><strong>离车泊入：</strong>在中控屏选定预备车位后，可以开启该功能，下车后触摸主驾门把手感应点几秒后开始离车泊入，问题是如果后方有障碍物（花、水管等），车头会有一截露在外面，还需要我再回到车上再倒一下，这个功能我向理想400热线反馈过两次，至今也没有解决。</p><figure class="ss-imgRows"><img alt="" src="https://cdnfile.sspai.com/2025/08/12/8f6f460229f31c3161ee2e436ace9a21.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdnfile.sspai.com/2025/08/12/fd78c6434d5f3ad2b7be28a0a49da9f0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>直线召唤：如果我们的车与别的车距离很近，可以在手机上开启该功能并操纵车前进和后退，但如果像前文写的后方有障碍物，就没法再倒了。</p><p>这两个功能的问题估计同样指向了默认预留了“后备箱门必须可以完全开启”的距离。没有留给车主个性化选择的功能。</p><p><strong>纯电体验：</strong>我身处成都，很少会有零下的天气，所以没有出现过续航里程虚标的情况，春夏秋冬每次充满电可以跑180公里。满油满电可以跑1100公里。</p><p>我们家在自己车位上安装了充电桩，充电桩是赠送的，但是安装时自己掏钱的，从停车场总电闸到车位有110米远，理想赠送30米，剩下的80米是我购买的，花费4500元。</p><p>事后总结，安装公司不一定非要找理想的，你也可以找市面上其他的安装公司，我们这一年充电桩花费1168元电费，电行驶里程13567.6公里，如果抛去长途用公共充电桩跑了2000公里，那么就是1公里0.1元，比较划算，我之前开的别克昂科威2.0T在油价最高的时候要1元1公里了。</p><figure class="image ss-img-wrapper image_resized" style="width: 182px;"><img src="https://cdnfile.sspai.com/2025/08/12/318bf424cde9f48d3041e0dca4e4b9f6.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>辅助驾驶里程6143公里</figcaption></figure><p><strong>智能化辅助：</strong>辅助驾驶在长途、高速、绕城、二三环和堵车的时候经常使用，在晚上零点左右回家，我已经非常疲惫的时候用的多些，这能极大地减轻我的精神压力，我只需要专注路况和随时踩刹车即可，加速、变道、超车，都由辅助驾驶决定。车VS车的路况它能非常完美的驾驭。</p><p>但是车VS人、电瓶车的路况，进入城市路面我还是会自己开，因为辅助驾驶开的非常顿挫。经典场景是通过红绿灯时，如果是黄灯，我开的话就已经踩刹车缓行了，辅助驾驶还在猛踩油门，直到进入实线车道（压线会扣分的那一截）才猛刹车，乘坐体验很差，不知道接下来的系统升级能不能解决这个问题。总体来说智能驾驶确实是一直在升级的。</p><p>有一个题外话，就是有几次从三环进入匝道的时候，差点撞上匝道口的尖角，我不知道现在这个问题解决没有，还有几次它会开得离匝道口很近的时候才开始变道，这个时候匝道口已经排着车队了，它就要硬加塞进去，我不喜欢做没素质的车主，所以我已经半年多没有用辅助驾驶下过匝道了。</p><p><strong>操控表现：</strong>&nbsp;这个2吨多的车加速减速都非常灵敏。但自身重量还是限制了它的操控，在超车快速打方向的时候会感觉到车的惯性。在过坑坑哇哇的路面的时候空气悬架也非常舒适。隔音方面也做的非常好。</p><h4>场景三：长途自驾与诗和远方 - “里程焦虑”解决了吗？</h4><p><strong>增程优势：&nbsp;</strong>没有里程焦虑，说走就走，实际上开长途前一天我会充满电，出发后平均开一个小时休息一下，我也会用公共充电桩快充到80%（四十分钟），如此循环，如果不想等待太久或者要排队，那么我就用油，车机地图上会显示每个服务区的充电桩使用情况、包括快充慢充，我一般会用快充，抵达目的地时如果是在城市里，我一般会晚饭后和老婆把车开到充电桩充电，然后一起在陌生城市压压马路。</p><p><strong>高速表现：</strong>增程器在路上开启是感受不到噪音的，风噪和胎噪都在可接受范围内，在车流不密集的高速路段我会开启辅助驾驶，我的辅助驾驶里程其实都是长途自驾增长起来的。我们最远分别从成都开到过云南芒市、贵州遵义，全程高速。在标准、运动、高性能模式下加速踏板响应非常迅速，舒适模式因为模式设置的原因会稍微迟缓一点儿。</p><p>底盘舒适性也不错，我也不会刻意过坑坑洼洼的路面，在过减速带的时候也很轻松。</p><p><strong>露营/外放电</strong>：我其实至今没有用这个车露营过，即便买车的时候送了我们一个超大的露营帐篷，我们旁边就是川西，我期待九十月份的时候可以开去一趟川西玩儿玩儿，深度体验一下露营模式。</p><figure class="ss-imgRows"><img alt="" src="https://cdnfile.sspai.com/2025/08/12/256c7367db6815b95ca43ce8d176d7c7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdnfile.sspai.com/2025/08/12/5cb086c923056cdf2b276409891d7bf4.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h4>场景四：智能座舱 - “车机”是加分项还是核心依赖？</h4><p><strong>理想同学：</strong>理想同学的识别率在我看来是每次升级之后都有些倒退，以前语速非常快的说“理想同学”它都能识别到，但是最近几次升级后反而它不太能响应了，我们也开启了“简洁模式”——就是不用说理想同学，直接说指令就行，它在这方面的响应要优于“理想同学+帮我打开空调”。</p><p>这种语音控制全车的方式确实改变了我的操作习惯，比如开空调、开车窗（它甚至能理解“车窗往下一点点”与“车窗往下一点”的不同）、开天幕、复位座椅、切换动力模式、所有的操控它基本都支持。但是部分模式需要我坐在主驾位置才能开启，比如我要开启“离车不下电”模式（该模式指锁车后空调、车机仍然运行，适用于小狗在车上），我在后排和副驾说就不顶用，我就得坐在主驾说才行。</p><p><strong>中控屏/交互：</strong>&nbsp;车的主要功能都比较好用，也非常流畅不卡顿，ota也在不断升级车的功能，比如之前是没有离车泊入和直线召唤的，这两个功能都是ota升级来的，手机app远程控制也很使实用，比如找车、直线召唤、开空调、开冰箱制冷制热、授权驾驶给朋友。哨兵模式也非常好用，如果别人刮了我的车导致车震动了，我的手机会收到通知有高风险事件发生，我可以在手机上看发生了什么。</p><figure class="image ss-img-wrapper image_resized" style="width: 170px;"><img src="https://cdnfile.sspai.com/2025/08/12/9e4748a1380c5060345aae23f57bbc2b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>但是我两次被开门杀都没有被识别到，这我挺不满意的。</p><p><strong>导航及娱乐：&nbsp;</strong>这个车的导航用的是高德导航，且不能更换导航APP，而我是百度地图的重度用户，高德导航在出匝道口、三车道时的提醒不提前，往往是我走到跟前了才提醒我走哪条车道。我得时时刻刻看着地图才不会走错。</p><p>且不能使用Carplay以及Apple Music，Apple Music只能通过浏览器收听，还会出现歌曲断断续续的情况。其他常用的QQ音乐、网易云音乐都有内置APP。</p><p>视频方面，常用的爱优腾都有，我也可以通过有线和无线投屏的方式看手机的视屏。</p><h3>成本篇：养它贵不贵？&nbsp;</h3><p><strong>能耗费用：</strong>&nbsp;我一共开了20265公里，电跑了13583公里，家用电桩1168元电费，商业充在300元左右，油跑了6432公里，百公里7升油耗，现在95号汽油8元每升，那么我的油钱应该是3640元，每公里0.56元，</p><p><strong>保险费用：</strong>&nbsp;首年交强险1100，商业险5013，驾驶意外险488。</p><p>我们出了三次险，今年交强险1210，商业险5402。</p><p><strong>保养费用：</strong>&nbsp;我们只做了一次小保养，就是买1299元的用车服务包包含的一次空调滤芯和增程器更换机油，我问施工人员，他们说我第二年保养的时候就要大保养了，什么是大保养，就是外加更换一次空气滤芯。</p><p><strong>其他费用：</strong>在成都新能源汽车在公共停车场和路边停车场是2小时免费的。</p><p><strong>总体评价：</strong>&nbsp;相比于燃油车，纯电力使用成本是非常省钱的，如果充电桩离地库总电闸距离更近那就更好了，像我这样安装充电桩花了4500的人，需要再用两年把这部分成本平摊下来才是真正的省钱。</p><h3><strong>总结</strong></h3><p>L8是我们愿意开的一辆车，没有花里胡哨的功能，每次更新都非常实在地解决了用户的痛点。</p><p>以前出远门自驾要计算一下油费，毕竟一块钱1公里，现在这部分费用基本不考虑了，我们其实不太爱跟朋友一起开车远行，所以没太改变我们的社交相处方式。</p><p>我作为车主，满分100我可以打到80分，少的20分是因为我对智驾有更高的期待和要求，多花的几万买带激光雷达版本，就是期望能减轻我的驾驶负担，但是目前来说并没有，在城市道路开启智驾比我开还要更紧张，切不舒适。如果我没买激光雷达版本，那这是台好车。</p><p>希望未来ota可以把Apple music加上，智能泊车整体更人性化，智驾系统好开。</p><p>2024款 理想L8 Max， 还需打磨的一部好车。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/ecd7401bf179b128fa76475097f06554.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101782</id>
            <title>精选 7 档高质量英文播客：深度对话、豪华嘉宾、多样主题</title>
            <link>https://sspai.com/post/101782</link>
            <guid isPermaLink="false">https://sspai.com/post/101782</guid>
            <pubDate></pubDate>
            <updated>Thu, 14 Aug 2025 01:25:23 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 英文播客, Lex Fridman, 科技访谈, 深度对话  
<br>  
<br>  
总结: 作者推荐了7档高质量的英文播客，包括Lex Fridman Podcast、All-In Podcast、Acquired等，涵盖了科技、商业、创业等主题。这些播客以深度访谈、时效性内容和专业嘉宾为特点。作者还介绍了自己的播客应用Bayt，支持中文音频和字幕转换，帮助用户更高效地获取信息。 </div>
                        <hr>
                    
                    <p>每天早上通勤时，我都会戴上耳机听播客。听着听着，我发现一个现象：英文播客不仅制作更精良、嘉宾阵容更豪华，对话深度也更让我欲罢不能。于是，我挑选了 7 档自己常听、并且非常推荐的英文播客分享给你。</p><p>当然，如果你的外语水平还没到能无障碍收听英文长播客，或者想用母语更高效地获取内容，可以试试我最近上线的 Bayt 播客 —— 所有节目都能自动生成中文音频和双语字幕。</p><p>比如我把一档 2 小时的英文访谈转成中文，时长直接少 30 分钟，用母语再开 1.5 倍速，效率直接翻倍！</p><p>接下来分享我的清单：</p><figure class="image ss-img-wrapper image_resized" style="width: 293px;"><img alt="Lex Fridman Podcast | Podcast on Spotify" src="https://cdnfile.sspai.com/2025/08/12/article/08e0dbbffe4729da76d87826c75645da.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Lex Fridman Podcast</figcaption></figure><h3>1、Lex Fridman Podcast</h3><p><strong>关键词：科技访谈 | 重磅嘉宾 | 深度</strong></p><p>我最喜欢的播客。每期都是 Lex Fridman 与一名嘉宾的深度访谈。有很多重磅的嘉宾参加了该节目，如马斯克，扎克伯格，特朗普，Sunder Pichai 等。涵盖的主题很广泛，包括但不止于科技、物理、哲学、政治、历史。我最喜欢的一点是，每期内容都是2~8小时的长内容，保证了访谈的深度。有很多访谈类播客会沦为公关宣传节目（@Decoder 播客），但 Lex Fridman 很好地避免了这一点。Lex Fridman 是一位很有魅力和好奇心的主持人，有趣的是，他还经常会在每期节目最后灵魂拷问嘉宾：“对你来说，活着的意义是什么？”</p><p>每期内容比较长，对于缺乏耐心和专注力的当代人可能是一种考验。</p><p><i>推荐 Episode：《#474 - DHH: 编程的未来, AI, Ruby on Rails, 效率 &amp; 为人父母》（#474 - DHH: Future of Programming, AI, Ruby on Rails, Productivity &amp; Parenting）</i></p><figure class="image ss-img-wrapper image_resized" style="width: 300px;"><img src="https://cdnfile.sspai.com/2025/08/12/7ca9d917b2cd57d5b6b55281e1db35f0.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>All In</figcaption></figure><h3><strong>2、All-In Podcast</strong></h3><p><strong>关键词：时效性 | 广度 | 右派</strong></p><p>几位科技圈40+，50+岁的大佬每周聚在一起聊硅谷新闻的节目。由于几位嘉宾都是不同的领域的投资人，所以总是能提供不同的视角，而且视角会比较宏观，会关注货币政策、政治局势、国际局势等话题。</p><p>偏右派观点，主持人们基本属于特朗普阵营的人。</p><p>内容更新比较频繁，适合获取新资讯，但深度有时略有不足。</p><p><i>推荐 Episode：《12天战争，纽约的社会主义风潮，股市新高，AI版权，科学角》（12 Days War, Socialism Wins in NYC, Stocks All-Time High, AI Copyright, Science Corner）</i></p><p>&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 293px;"><img src="https://cdnfile.sspai.com/2025/08/12/a17a81e2a5531cee10a69a931c1d9627.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Acquired</figcaption></figure><h3><strong>3、Acquired - 公司史研究</strong></h3><p><strong>关键词：时效性 | 广度 | 右派</strong></p><p>从小我就很喜欢读各种公司的创业史、发展史，而 Acquired 这档节目就像是这些书的浓缩精华播客版。每期 Ben 和 David 都会挑选一家著名公司，如宜家、任天堂、Visa、星巴克，深度剖析这家公司的发展历程、创始人背景、商业模式。从播客内容可以感受到，两人对每期的节目都做了非常细致的调研工作。</p><p>我很喜欢的一起《宜家》，从这集播客中，我了解到宜家确实是一家非常特别的公司：诞生于挪威小镇，几乎没有竞争对手，没有上市。</p><p><i>推荐 Episode：《宜家》（IKEA）</i></p><p>&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 310px;"><img src="https://cdnfile.sspai.com/2025/08/12/980a1ff44b1cf276ad33e433890b8782.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>The Social Radars</figcaption></figure><h3>4、The Social Radars</h3><p><strong>关键词：创业 | YC | 硅谷</strong></p><p>硅谷著名创业加速器 Y-Combinator（简称YC） 创始人 Paul Graham 的妻子开的一档播客，访谈硅谷创业人，采访过的嘉宾包括 OpenAI 的 Sam Altman，Dropbox 创始人，Replit 创始人等。对话的氛围比较轻松自在。</p><p>对话的深度不如 Lex Fridman Podcast。</p><p><i>推荐的近期 Episode：《Sam Altman，CEO of OpenAI》</i></p><p>&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 308px;"><img alt="Indie Hackers | Podcast on Spotify" src="https://cdnfile.sspai.com/2025/08/12/article/c43ab89eb6ab58727fa59a57e31b02f6.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Indie Hackers</figcaption></figure><h3>5、Indie Hackers</h3><p><strong>关键词：个人开发者</strong></p><p>这档节目是播客圈比较小众和稀缺的主题：个人开发者。每期访谈一位成功的个人开发者，分享他们的个人项目是如何发展起来的，各个阶段收入多少，以及方法教训。采访过嘉宾包括 Tony Dinh，目前 Tony 的一人公司的 ARR （每年经常性收入）到达了一百万美元。在当前AI编程快速发展的时代，适合那些想借助AI独立开发的人士。</p><p>Indie Hackers 的主播还开发了同名社区，便于独立开发者们分享交流。</p><p>&nbsp;</p><p>&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 307px;"><img src="https://cdnfile.sspai.com/2025/08/12/ad7640931401d16676e36dbd5a71cb48.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>6、Swift over Coffee</h3><p><strong>关键词：苹果开发者 | Swift | WWDC</strong></p><p>这档播客的主题也是比较小众：苹果开发生态。由知名的苹果开发教学网站 Hacking with Swift 创建者 Paul Hudson 聊苹果开发者社区的新闻，比如 WWDC 的更新、Swift 版本更新等。</p><p>今年3月在上海的 Let's Version 开发者活动中，我还见到了 Paul Hudson。现场跟他分享了我的几个应用，还直接掏出笔记本让他帮我看了一个困扰多时的 Bug（虽然最后没有解出来哈哈）。</p><figure class="image ss-img-wrapper image_resized" style="width: 371px;"><img src="https://cdnfile.sspai.com/2025/08/12/6f329e6ee4af342c9a0cb68e81f0279e.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>我在上海与 Paul 见面</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/dc83363456e5e63466a98103caefbc1e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>在搜索 Swift over Coffee 的时候，还看到了一张奇怪的图片😂</figcaption></figure><h3>7、The Diary of A CEO</h3><p><strong>关键词：名人访谈</strong></p><p>以长篇对话形式呈现，主角是各界名人 — CEO、健康学家、文化人物、作家、运动员等，深入挖掘他们的人生故事与思考。</p><p><i>推荐的近期 Episode：《抗衰老专家：缺少这种维生素的危害堪比吸烟，以及你必须了解的肌酸知识！》（Anti-Aging Expert on How Missing This Vitamin Is As Bad As Smoking, and What You Should Know About Creatine!）</i></p><p>&nbsp;</p><p><strong>最好再安利一下我上线不久的播客应用 Bayt 播客，无论你是想更高效地获取更高质量的信息，还是想通过播客练习听力或跟读，Bayt 都很适合你。首页还会定期更新精选的健康、科技、AI、财经等主题内容。真诚邀请你成为 Bayt 的早期用户！（</strong><a href="https://apps.apple.com/app/apple-store/id6748532039?pt=121796720&amp;ct=ssp&amp;mt=8"><strong>下载地址</strong></a><strong>）</strong></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/ed143278cfe7e98cd5e7aa434d7c3d8d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>所有播客均可生成中文音频与字幕，还有定期更新的编辑精选内容，涵盖健康、科技、AI等主题。</figcaption></figure><p>&nbsp;</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101813</id>
            <title>如何使用Astro建立个人博客网站？</title>
            <link>https://sspai.com/post/101813</link>
            <guid isPermaLink="false">https://sspai.com/post/101813</guid>
            <pubDate></pubDate>
            <updated>Wed, 13 Aug 2025 08:12:32 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 博客部署,Astro框架,Pure主题,Vercel

<br>
<br>
总结: 作者分享了自己搭建博客的过程，最初尝试NotionNext但遇到bug和主题限制，后改用Hugo仍不满意，最终选择了Astro框架和Pure主题。详细介绍了从克隆主题仓库、本地开发调试到通过GitHub和Vercel部署的完整流程，包括域名购买和CDN加速配置。文章还说明了如何修改页面设置和添加文章内容，并提到未来可能分享使用Obsidian的Digital Garden插件生成笔记网站的方法。 </div>
                        <hr>
                    
                    <figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/2c1a982622bd3399e45ae4f0ebd182d0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>最近熬了好几个大夜做了个自己的博客，看过我之前文章的朋友们都知道，我之前就有尝试过使用 Notion 搭建自己的博客，去年 12 月使用 NotionNext 这个项目购买域名做了部署，但是，最后的结果不如人意，总有一些我看不明白的 bug，老是部署失败，而且主题可选样式太少了。</p><p>我这么爱折腾的人怎么可能满足于此，于是上周我尝试了使用 Hugo 静态部署，研究了老半天，我感觉还是不太行，最后我搜索 Obsidian 部署个人网站的时候搜到了很多其他人的博客，比如这个朋友的：<a href="https://8cat.life/">Home • CCM'blog</a> ，于是我溯源找到了他使用的主题，也就是 <a href="https://astro-pure.js.org/">Astro Pure Theme</a>，最后使用此主题改造了自己的博客主页。</p><p>我的主页已经上线，欢迎大家参观 👉 <a href="https://www.joeytoday.com/">Home • joeytoday</a>，可直接复制链接在浏览器打开，也可点击「阅读原文」进入查看。</p><pre class="language-"><code>https://www.joeytoday.com/</code></pre><p>最终我选择了 Astro 框架+Pure Theme，使用 GitHub+Vercel 部署，主页效果如下，如果不想打开网页，也可以在展开大概看看～👀</p><blockquote><p>[!abstract]- 我的主页<br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="我的主页概览" src="https://cdnfile.sspai.com/2025/08/13/article/f00f4306ab7158a483715865cc1461e3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure></blockquote><p>部署过程</p><p>大概说了下我是如何选到自己喜欢的主题的，选择使用 Astro 很大一部分原因也是帮助文档有中文的，部署也相对简单，具体部署也可以参考教程，整体来说比较简单：<a href="https://docs.astro.build/zh-cn/getting-started/">入门指南 | Docs</a></p><p>指南给的部署步骤，主要是本地的，我需要同步部署在网络上，目前的流程还是会有点麻烦，所以我优化了一下流程，主要操作如下所示。</p><h3>导入主题仓库到本地</h3><p>下载 <a href="https://desktop.github.com/download/">GitHub 桌面端</a>，点击 <code>Add</code> - <code>Clone Repository</code>，选择 <code>URL</code>，粘贴主题仓库地址，克隆到本地。</p><pre class="language-"><code>https://github.com/cworld1/astro-theme-pure.git</code></pre><p>&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/a28715d2cbc107d068443ad89107b947.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>同步修改到 GitHub</h2><p>然后选择 commit to main，再点击 push origin，同步到 GitHub 仓库，之后每次修改也是这两步操作。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/348ecb3550b019522826c5983fb3bad3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>打开终端，进入到项目文件夹，也就是上图的 <code>Local Path</code> ：</p><pre class="language-bash"><code>cd ./&lt;your-project&gt;</code></pre><p>在本地启动开发模式：</p><pre class="language-bash"><code>npm run dev</code></pre><p>然后进入本地开发环境，你就会打开一个此主题的预览页面，此后修改的内容，都可以在这个页面看到。</p><pre class="language-bash"><code>http://localhost:4321/</code></pre><h2>直接部署到 Vercel</h2><p>为了防止修改配置后部署失败，建议没修改的时候就直接先部署。没有账号的可以先注册 Vercel，然后新建项目 <a href="https://vercel.com/new">New Project</a>，在页面 import 刚刚同步的博客仓库。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/18f29eb89902a0fa78a518bbd5bfc3f0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>等待部署之后就可以直接查看页面了，初始网页链接是：<code>project-name/vercel.app</code>，国内访问可能存在比较慢的问题，所以你可以购买域名，点击右上角的 <code>Domain</code> 修改重定向。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/60c7fc1aa050ddcfe6481af1ddadaa2c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><blockquote><p>[!note] 说明</p><ul><li>关于购买域名可以参考：<a href="https://www.joeytoday.com/blog/2025/domain-purchase-by-namesilo">如何使用 NameSilo 购买域名？ • joeytoday</a></li><li>关于域名 cdn 加速可以参考：<a href="https://www.joeytoday.com/blog/2025/domain-config-by-cloudflare">如何使用 Cloudflare 配置域名？ • joeytoday</a></li></ul></blockquote><h2>修改页面设置</h2><p>具体的配置和修改也可以在 <a href="https://astro-pure.js.org/docs/setup/getting-started">Getting Started • Astro Theme Pure</a> 这里看到，但有些配置也没有说的太清楚，所以我补充我的设置进行一些说明。主要修改的部分在 <code>src</code> 文件夹下。</p><h3>site.config.ts</h3><p>页面整体设置，包括页头和页尾<br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/ed5769d042b8729b122c77b00aac0738.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/0d34b2804be6e52860db2b2a1f24e54b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/3c661c82c7b3cb09ffbaade9acddff5e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>Src/pages 页面配置</h3><h4>Index. Astro</h4><p>这个页面是配置主页的，<br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/5890d8372348038336de3d2e56ad9219.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/cd40af06cb8821ab441216ac393b4947.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/81945fa0f1fd7bc12287efddb2efbd86.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/1f02b3f13c5b07695df7a8df51643eb3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/c15e3032800ad006fc2651d526fb87f2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/908ed2d92a06d2a8357582fdf34d6c74.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/6300a3e39b9fc0d19fdf03431c6e48e0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>大部分的页面样式都在对应的文件夹下，样式如果实在看不懂可以让 AI 给注释一下。</p><h2>添加文章</h2><p>所有的文章都在 <code>src/content</code> 之下，我一般也用不上 <code>docs</code>，所以我直接在 <code>blog</code> 中添加，内容都是 markdown 文件，基础信息可以使用 frontmatter，形式如下：</p><pre class="language-markdown"><code>---
title: 标题
author: 作者
description: 文章概述
draft: false 发布，true 为草稿
publishDate: 2023-09-01 发布时间，格式如右
tags:文章标签
  - 第三周刊
  - 政治
  - 社会
  - 书评
heroImage: {src: 'https://joey-md-asset.oss-cn-hangzhou.aliyuncs.com/img/202312140000460.jpeg', inferSize: true} //封面图片，本地、网络图片都可以
---
正文内容正文内容正文内容正文内容正文内容正文内容正文内容正文内容正文内容正文内容正文内容</code></pre><p>添加完之后[[#同步修改到 GitHub]] 就会自动更新部署了，部署完成后主页就会更新内容。</p><p>End</p><p>折腾完自己的主页之后，还使用 <strong>Obsidian</strong> 的 <strong>【Digitial Garden】</strong> 插件生成了我的笔记网站，可以直接从 Obsidian 发布到网站上，效果如下所示，如果大家感兴趣的话，我可以下期再出一篇教程。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/08/13/article/04f7f5b574f280c3ecf99ee4f44ac5b3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101805</id>
            <title>我给Quote/0 墨水屏写了一个新的快捷指令</title>
            <link>https://sspai.com/post/101805</link>
            <guid isPermaLink="false">https://sspai.com/post/101805</guid>
            <pubDate></pubDate>
            <updated>Wed, 13 Aug 2025 05:10:29 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 墨水屏,Quote/0,快捷指令,资讯推送

<br>
<br>
总结: 本文介绍了作者购买和使用少数派共创的墨水屏产品Quote/0的体验。文章提到该设备可通过磁吸方式固定在冰箱或书架上，用于显示随机滚动的资讯。目前设备功能有限，主要包括看资讯、记待办和查天气，但缺乏公共交通通勤时间预估等功能。作者基于官方API开发了一个快捷指令工具，方便用户从手机推送图文内容到设备屏幕，并详细说明了使用步骤和前期准备工作。最后分享了该快捷指令的下载链接。 </div>
                        <hr>
                    
                    <p>老早就关注到了少数派共创新推出的硬件产品，又是我很喜欢的墨水屏产品，磁吸在冰箱或者书架上，瞥一眼就可以看到随机滚动的资讯。前两天看到又在卖了，才一百多就立马下单了。已经使用了半天，分享一下使用感受以及我做的快捷指令小工具。</p><p>首次使用quote/0，需要通过手机app完成配对和设置，从内容工坊中添加信息内容。iOS上面的轻应用只在安装完成之后，用来展示详情使用。<i>我在想有没有可能官方可以升级一下这个轻应用，让它更重一点，把一些基础的设置和卡片切换在这里就完成。</i></p><p>目前App里提供的功能还是比较有限，主要集中在<strong>看资讯、记待办、查天气 </strong>。而每一个功能都还没有做的很透很深入。资讯目前除了少数派，也就只有雷锋网、IT之家、36氪等，但是可以用RSS添加订阅。天气只是实时天气、降雨概率、空气质量。通勤这块有驾车、汽车、步行的通勤时间预估，<i><strong>偏偏没有公共交通。</strong></i>还有很多的分类还是空的或者零星几个应用。</p><p>看开发日志后续还会持续增加更多功能，期待后续的功能更新以及更多的第三方接入~&nbsp;</p><p>&nbsp;</p><p>对于一些刚刚拿到这个设备或者准备购买的入门玩家而言，有一个基础功能我觉得很需要，就是想从手机推送图文到屏幕，官方App目前并没有内置这样的功能，<a href="https://dot.mindreset.tech/docs/server/template/api" target="_blank">官方文档</a>中提供的接口和工具也只是一个模板（<a href="https://dot.mindreset.tech/docs/server/community_co_creation" target="_blank">共创平台</a>中有大佬做了桌面端推送工具可以自行前往下载）在xhs上也看到有用户在问怎么用。 所以，我基于官方提供的API接口和模版，改造出了一个可能更好用的快捷指令👇 给大家使用，非常简单初级，但是能解决一些问题：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/ac1d7ed104066c7463ee0cf8952400ac.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>文本推送模式示例</figcaption></figure><h3>使用步骤简单，3步就搞定：&nbsp;</h3><p><strong>运行快捷指令，</strong>可以选择是要发<strong>文本</strong>还是发<strong>图片</strong>（官网提供的快捷指令模板图文是分开的两个，这里做了合并和修改）</p><p><strong>发布内容：</strong></p><p>📝如果发文本，直接在输入框输入内容 （文本内容包括：<strong>标题、正文、署名、链接和图标</strong>，图标功能在快捷指令中没有开启可自行再设置）；&nbsp;</p><p>🖼️ 如果发图片，就从<strong>相册或文件</strong>里选择你想要的图片（快捷指令增加了转换格式的步骤，系统只接受PNG格式，现在可以转换了但是对于图片内容和尺寸还得自己把握一下）&nbsp;</p><p><strong>推送完成</strong>静静等待Quote/0屏幕刷新就行啦（系统提示设备休眠为正常状态，使用电池供电最快十五分钟同步）&nbsp;</p><p>&nbsp;</p><h4>💡不过使用前还有些准备工作要做：</h4><ul><li>要先在Dot. App里关联好你的设备。</li><li>生成API Token，只显示一次记得保存。</li><li>复制好设备序列号（deviceId）。</li><li>前往内容工坊，添加“文本API”和“图像API”。</li></ul><p>有了这个快捷指令，现在用手机就可以快捷方便地推送图文到Quote/0，对不想折腾不懂开发编程逻辑又想体验自定义显示内容的朋友，应该是很实用的。可能仍存在BUG和优化空间，后续可能会做更新，也欢迎自行下载修改。希望大家喜欢。</p><p>&nbsp;快捷指令：<a href="https://www.icloud.com/shortcuts/4325cfb405a24e4188117832eada1357" target="_blank">https://www.icloud.com/shortcuts/4325cfb405a24e4188117832eada1357</a></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/13/606b8253a88d921f700c658225e3b543.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>图片推送模式示例</figcaption></figure><p>&nbsp;<a href="https://www.xiaohongshu.com/search_result?keyword=Quote0&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#Quote0</a> <a href="https://www.xiaohongshu.com/search_result?keyword=%25E6%2599%25BA%25E8%2583%25BD%25E5%25A2%25A8%25E6%25B0%25B4%25E5%25B1%258F&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#智能墨水屏</a> <a href="https://www.xiaohongshu.com/search_result?keyword=iOS%25E5%25BF%25AB%25E6%258D%25B7%25E6%258C%2587%25E4%25BB%25A4&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#iOS快捷指令</a> <a href="https://www.xiaohongshu.com/search_result?keyword=%25E6%2595%25B0%25E7%25A0%2581%25E5%25B7%25A5%25E5%2585%25B7&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#数码工具</a> <a href="https://www.xiaohongshu.com/search_result?keyword=%25E6%2595%2588%25E7%258E%2587%25E7%25A5%259E%25E5%2599%25A8&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#效率神器</a> <a href="https://www.xiaohongshu.com/search_result?keyword=%25E5%25B0%2591%25E6%2595%25B0%25E6%25B4%25BE%25E5%2585%25B1%25E5%2588%259B&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#少数派共创</a>﻿&nbsp;﻿<a href="https://www.xiaohongshu.com/search_result?keyword=quote0&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#quote0</a>﻿&nbsp;﻿<a href="https://www.xiaohongshu.com/search_result?keyword=%25E5%25A2%25A8%25E6%25B0%25B4%25E5%25B1%258F&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#墨水屏</a>﻿&nbsp;﻿<a href="https://www.xiaohongshu.com/search_result?keyword=%25E6%25A1%258C%25E9%259D%25A2%25E5%25A5%25BD%25E7%2589%25A9&amp;type=54&amp;source=web_note_detail_r10" target="_blank">#桌面好物</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101780</id>
            <title>码农的自我修养之保持干净的 $HOME 目录</title>
            <link>https://sspai.com/post/101780</link>
            <guid isPermaLink="false">https://sspai.com/post/101780</guid>
            <pubDate></pubDate>
            <updated>Wed, 13 Aug 2025 02:27:58 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 秩序敏感, Oh My ZSH, XDG_Base_Directory, 文件管理

<br>
<br>
总结: 作者作为秩序敏感者，习惯整理电脑文件，对Oh My ZSH在用户目录生成多余文件感到不适。通过修改.zshrc文件路径变量，将临时文件收敛到指定目录。发现XDG_Base_Directory规范，该规范定义了配置文件、数据文件等的存储路径，旨在减少$HOME目录混乱。列举了遵循该规范的应用和收益，如清理数据、加速检索和数据迁移。期待未来所有应用遵守规范，使$HOME目录更简洁。 </div>
                        <hr>
                    
                    <h2>前言</h2><p>本人在生活中就是一个秩序敏感者，喜欢将桌面整理的井井有条，很享受简洁给我带来的安定感。</p><p>这种习惯也带入到使用电脑的场景，我所有文档都分类摆放在特定目录，在任何时候我都可以快速准确到找到需要的文件。</p><p>也会定期清理不重要的文件，让资源管理器处于<code>轻松</code>的状态。这算一种强迫症，喜欢删除认为不重要的东西，也反感应用软件在我非预期的地方放置文件。</p><blockquote><p>电影《机器人总动员》里面有个扫地机器人，它非常热衷于自己的清洁工作，容忍不了一点点污染，是我印象深刻的片段。</p></blockquote><h2>$HOME 目录</h2><p>在桌面操作系统中会为每个用户分配一个「用户目录」，当前用户在使用系统时产生的数据都会保存在这个用户目录下。</p><p>系统也会预设好一些通用分类的目录如：</p><ul><li>图片</li><li>文稿</li><li>下载</li><li>音乐</li><li>应用程序</li><li>影片</li><li>桌面</li></ul><p>我们在管理数字资产的时候通常会遵循预设的分类去摆放数据，以便我们的管理和检索。</p><p>一些应用程序在使用期间会产生一些配置文件，缓存文件和用户数据等。</p><p>用户目录已经有一些较为通用的分类文件夹如： <code>.cache&nbsp;</code> 、<code>.config</code> 、<code>.local</code> &nbsp;&nbsp;</p><p>往往很多应用程序都是将这些数据直接放置在用户的根目录，并创建自己的专属文件夹（.xxx），如图：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/15/105a617fae14a3158a430f542b948f4e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>很多 .xxx 文件都是应用程序生成的</figcaption></figure><p>理论上类似 <code>.npm</code> 、 <code>.vscode</code> &nbsp;这些目录都是应该收敛到 &nbsp;<code>.cache&nbsp;</code> 、<code>.config</code> 、<code>.local</code> &nbsp; &nbsp; 去的。</p><p>强迫症患者 + 洁癖患者看着这么多的 .xxx 文件夹确实是非常难受！！</p><h2>到处拉屎的 .zsh</h2><p><a href="https://ohmyz.sh/" target="_blank">Oh My ZSH</a> 对于程序员来说应该无需赘述，它非常优秀，是我愿意使用终端必要前提。但是它有个缺点，就是会在你的用户目录下生成很多<code>意外</code>文件。</p><p>比如在成功安装好 <a href="https://ohmyz.sh/" target="_blank">Oh My ZSH</a> 之后，我预期的文件只有</p><ul><li>$HOME/.oh-my-zsh</li><li>$HOME/.zshrc</li></ul><p>但是事实是在我的用户目录下会额外生成如下文件：</p><ul><li>.zprofile</li><li>.zsh_history // 输入历史</li><li>.zsh_sessions // 会话历史</li><li>.zcompdump // 加速自动补全</li><li>.zcompdump.zwc // 编译版本，进一步加速自动补全</li></ul><p>是的，它就是这么随意。</p><p>强迫症的我每次看到这些不速之客都非常难受，因为它们都有自己的作用，且哪怕删除了下次启动又会自动生成。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/b6134239a900e7c8fc2c2620ad85ab06.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>zsh 生成很多文件</figcaption></figure><p>于是就开始折腾如何收敛这些文件，好在可以在 .zshrc 中通过复写这些路径的变量，来达到收敛的目的。</p><pre class="language-shell"><code>export NODE_REPL_HISTORY="" # 关闭在终端中使用 node 的输入历史记录
export LESSHISTFILE=- # 关闭使用 less 命令的记录

# 在公共的缓存目录创建 oh-my-zsh 的缓存目录
export ZSH_CACHE_DIR="$HOME/.cache/oh-my-zsh"
mkdir -p $ZSH_CACHE_DIR

# 设置 zsh dump 的缓存文件
export ZSH_COMPDUMP="$ZSH_CACHE_DIR/.zcompdump"
# 设置 zsh 的历史记录文件
export HISTFILE="$ZSH_CACHE_DIR/.zsh_history"

# 设置 zsh 的 session 文件
# 当前设置无效，需要在 /private/etc/zshrc_Apple_Terminal 中设置
export SHELL_SESSION_DIR="$ZSH_CACHE_DIR/.zsh_sessions"
mkdir -p $SHELL_SESSION_DIR
</code></pre><p>这样就可以把那些临时文件都收敛到 <code>$HOME/.cache</code> 中，眼不见为净。</p><h2>意外的发现</h2><p>当我整理完 oh-my-zsh 的临时文件时，接着扫视 <code>$HOME</code> ，发现一个 <code>.gk</code> 的文件夹有点碍眼。</p><p>如何评判是否<code>碍眼</code>？</p><p><i><strong>就是我觉得它不是常规软件生成的，只是个妃子，不配在 </strong></i><code><i><strong>$HOME</strong></i></code><i><strong> 拥有独立位置的文件。</strong></i></p><p>比如我会觉得 <code>.npmrc</code> 和 <code>.ssh</code> 这种咖位的配置，直接存在于 <code>$HOME</code>是更容易接受的。（是的，是个严重的双标党）</p><p>于是开始谷歌这个 <code>.gk</code> 是干嘛的，搜到对应的 <a href="https://github.com/gitkraken/vscode-gitlens/issues/3660" target="_blank">vscode-gitlens-issue</a> 有人同样反感这个文件在 <code>$HOME</code> 里生成，建议作者采纳修改建议。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/b7fbe75fc7bdb79ecd8b48f9072dbaf4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>作者表示不想改，并且巴拉巴拉...</p><p>接着该用户搬出了一个社区的规范，并且列举了一些已经遵守该规范的 PR</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/b467e2c876519966ac68e5ffdce56c0b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br /><strong>于是我就发现了 </strong><a href="https://specifications.freedesktop.org/basedir-spec/latest/index.html#index" target="_blank"><strong>XDG_Base_Directory</strong></a><strong> 这个造福强迫症患者对人类文明进步做出贡献的规范。</strong></p><h2>XDG_Base_Directory</h2><p><a href="https://wiki.archlinux.org/title/XDG_Base_Directory#User_directories" target="_blank">XDG_Base_Directory</a> （Cross-Desktop Group）是一个由 <a href="https://www.freedesktop.org/wiki/" target="_blank">freedesktop</a> 发起的标准规范。 定义了<code>配置文件</code>、<code>数据文件</code>、<code>状态数据</code>和<code>缓存文件</code>的存储路径，主要用于类 Unix/Linux 系统。</p><p>这套标准的目标是 <strong>减少 </strong><code><strong>$HOME</strong></code><strong> 目录的混乱</strong>，避免一堆 <code>.*</code> 文件（如 <code>.bashrc</code>、<code>.gitconfig</code>、<code>.zsh_history</code>）直接放置在 <code>$HOME</code> 里。</p><p>XDG 规范主要定义了以下 4 个环境变量：</p><figure class="table"><table><thead><tr><th>变量</th><th>作用</th><th>适合存放的数据</th><th>示例</th></tr></thead><tbody><tr><td><code>XDG_CONFIG_HOME</code></td><td>配置文件</td><td>用户的应用配置</td><td><code>~/.config/git/config</code></td></tr><tr><td><code>XDG_CACHE_HOME</code></td><td>缓存</td><td>可随时删除的数据</td><td><code>~/.cache/zsh/</code></td></tr><tr><td><code>XDG_DATA_HOME</code></td><td>用户数据</td><td>需要长期存储的数据</td><td><code>~/.local/share/nvim/undo/</code></td></tr><tr><td><code>XDG_STATE_HOME</code></td><td>应用状态数据</td><td>运行时状态、日志、历史记录</td><td><code>~/.local/state/zsh/history</code></td></tr></tbody></table></figure><p><br />所以正常情况下我们都需要在 .zshrc 里做如下配置：</p><pre class="language-shell"><code># XDG Base Directory Specification https://wiki.archlinux.org/title/XDG_Base_Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
# XDG Base Directory Specification end
</code></pre><p>&nbsp;</p><p>如果应用程序跟进实现了此标准，那么在需要保存文件的时候，会优先读取 <code>XDG-</code> 对应的路径（用户自定义），否则回退到系统默认。</p><p>正常情况下都推荐将 <code>XDG-</code> 对应的路径设置为系统默认，即如上给出的配置示例。除非你有特别强烈的定制需求。</p><p>比如某个应用程序需要往磁盘写入一些缓存文件，那么应该按照如下方式实现：</p><pre class="language-javascript"><code>import { join } from 'path';
import { homedir } from 'os';

const XDG_CACHE_HOME = process.env.XDG_CACHE_HOME || join(homedir(), ".cache");

const applicationCachePath = join(XDG_CACHE_HOME, 'your-application-name')

</code></pre><p>虽然推荐应用按如上示例的优先级去获取路径，但是有些应用为了保持用户的习惯，在获取不到 <code>process.env.XDG_CACHE_HOME</code> 时，它是默认回退到 <code>~/.xxx</code>。</p><p>比如 <code>Git</code></p><ul><li><code>$GIT_CONFIG_GLOBAL</code>（如果设置了）</li><li><code>$HOME/.gitconfig</code></li><li><code>/etc/gitconfig</code>（系统级别）</li></ul><p>所以为了确保实现了 XDG_Base_Directory 规范的应用优先获取到 <code>XDG-</code> 路径，推荐用户都明确做好如下配置，确保命中第一优先级。</p><pre class="language-shell"><code># XDG Base Directory Specification https://wiki.archlinux.org/title/XDG_Base_Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
# XDG Base Directory Specification end</code></pre><p><a href="https://wiki.archlinux.org/title/XDG_Base_Directory#User_directories" target="_blank">XDG_Base_Directory</a> 维护了一个表格，将那些已经遵循该规范的应用列举在上面。</p><p>我截取了部分，有兴趣的同学可以点击<a href="https://wiki.archlinux.org/title/XDG_Base_Directory#User_directories" target="_blank">链接</a> 进行查看。</p><figure class="table"><table><thead><tr><th style="background-color: rgb(234, 236, 240); border: 1px solid rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; text-align: center;">Application</th><th style="background-color: rgb(234, 236, 240); border: 1px solid rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; text-align: center;">Legacy Path</th><th style="background-color: rgb(234, 236, 240); border: 1px solid rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; text-align: center;">Supported Since</th><th style="background-color: rgb(234, 236, 240); border: 1px solid rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; text-align: center;">Discussion</th><th style="background-color: rgb(234, 236, 240); border: 1px solid rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; text-align: center;">Notes</th></tr></thead><tbody><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://archlinux.org/packages/?name=act"><strong>act</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/.actrc</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><p><a href="https://github.com/nektos/act/pull/1656"><strong>1656</strong></a></p><p style="margin-left: 0px;"><a href="https://github.com/nektos/act/pull/2195"><strong>2195</strong></a></p></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/nektos/act/issues/1678"><strong>[5]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><p><code>XDG_CONFIG_HOME/act/actrc</code></p><p style="margin-left: 0px;">If present <code>~/.actrc</code> will be merged with the XDG path config.</p></td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://wiki.archlinux.org/title/Aerc"><strong>aerc</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">&nbsp;</td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://git.sr.ht/~rjarry/aerc/commit/fff1664"><strong>fff1664</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">&nbsp;</td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>XDG_CONFIG_HOME/aerc/aerc.conf</code></td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://wiki.archlinux.org/title/ALSA"><strong>ALSA</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/.asoundrc</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><p><a href="https://github.com/alsa-project/alsa-lib/commit/577df365f66ee09579864fc771136e690927b3bf"><strong>577df36</strong></a></p><p style="margin-left: 0px;"><a href="https://github.com/alsa-project/alsa-lib/releases/tag/v1.2.3"><strong>1.2.3</strong></a></p></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/alsa-project/alsa-lib/issues/49"><strong>[6]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>XDG_CONFIG_HOME/alsa/asoundrc</code></td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://aur.archlinux.org/packages/anaconda/"><strong>anaconda</strong></a>AUR</td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/.conda/.condarc</code>, <code>~/.conda/condarc</code>, <code>~/.conda/condarc.d/</code>, <code>~/.condarc</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/conda/conda/blob/main/CHANGELOG.md#4110-2021-11-22"><strong>4.11.0</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://conda.io/projects/conda/en/latest/user-guide/configuration/use-condarc.html#searching-for-condarc"><strong>[7]</strong></a> <a href="https://github.com/conda/conda/pull/10982"><strong>[8]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">&nbsp;</td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://developer.android.com/studio/index.html"><strong>Android Studio</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/.AndroidStudioX.X</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://developer.android.com/studio/intro/studio-config#file_location"><strong>Android Studio 4.1</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">&nbsp;</td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><pre class="language-"><code>XDG_CONFIG_HOME/Google/AndroidStudioX.X
XDG_DATA_HOME/Google/AndroidStudioX.X
XDG_CACHE_HOME/Google/AndroidStudioX.X
</code></pre><p style="margin-left: 0px;"><a href="https://developer.android.com/studio/intro/studio-config#file_location"><strong>Location overview by Google</strong></a> does not mention XDG - paths could be hardcoded instead of using the proper variable, though that is unlikely as Intellij IDEA, which Android Studio is based on, implements it properly as well</p></td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://wiki.archlinux.org/title/Anki"><strong>Anki</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/Anki</code>, <code>~/Documents/Anki</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">&nbsp;</td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/dae/anki/pull/49"><strong>[9]</strong></a> <a href="https://github.com/dae/anki/pull/58"><strong>[10]</strong></a> <a href="https://docs.ankiweb.net/files.html"><strong>[11]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">Uses <code>$XDG_DATA_HOME/Anki2</code> as default if no older location exists, can be changed by using <code>anki -b &lt;anki_dir&gt;</code></td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://archlinux.org/packages/?name=antimicrox"><strong>antimicrox</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/.antimicro</code>, <code>~/.antimicrox</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/Antimicrox/antimicrox/commit/edba864"><strong>edba864</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/Antimicro/antimicro/issues/5"><strong>[12]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">&nbsp;</td></tr><tr><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://aur.archlinux.org/packages/apvlv/"><strong>apvlv</strong></a>AUR</td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><code>~/.apvlvrc</code></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/naihe2010/apvlv/commit/ed0e0112b05b0cafa13ca4e215ee559c82194caf"><strong>[13]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;"><a href="https://github.com/naihe2010/apvlv/issues/70"><strong>[14]</strong></a></td><td style="border: 1px solid rgb(162, 169, 177); padding: 0.2em 0.4em;">Uses <code>XDG_CONFIG_HOME/apvlv/apvlvrc</code> now if it exist.</td></tr></tbody></table></figure><p>它甚至列举了这些应用从哪个版本开始遵循该标准，且给出了具体的修改PR。</p><p>下面简单看个 <a href="https://github.com/nektos/act/pull/600/files" target="_blank">PR</a></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/163dd9d47773864f0e54af278dc5e767.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>这是 ACT 应用在跟进 XDG 标准的 PR</figcaption></figure><p>咱们前端的包管理工具 pnpm 也跟进了此规范 <a href="https://github.com/pnpm/pnpm/issues/2574" target="_blank">具体查看</a></p><p>实际效果：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/ce2b3c50de1f14bb885ebbc3bceeeafa.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><h3><a href="https://github.com/b3nj5m1n/xdg-ninja" target="_blank">xdg-ninja</a></h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/4b8b44d90594a7466e6fbdafc34f3b4d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>GitHub 上的一个小工具，用于检测当前用户目录是否有可迁移到 XDG 目录的文件。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/2c7140d5700858f48715089394821265.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>截图是我电脑上的文件明细，它会列出是否支持 XDG 甚至指导你如何迁移配置。</figcaption></figure><h3>遵循标准的收益</h3><p>如果所有软件都自觉遵守该规范，那么 <code>$HOME</code> 将会变得非常干净，也更便于文件管理。</p><h4>清理数据</h4><p>当你想清理磁盘，可以大胆的删除 <code>$XDG_CACHE_HOME</code> or <code>$HOME/.cache</code> 这样所有应用程序产生的缓存文件就全部被删除了。</p><h4>加速检索</h4><p>可以把 <code>$XDG_CACHE_HOME</code> or <code>$HOME/.cache</code> 这类文件加入忽略列表，可以提升检索效率。</p><h4>数据迁移</h4><p>如果要重装系统，那么你可以直接备份 <code>$XDG_CONFIG_HOME</code> 到新系统。这样你之前苦心经营好的软件配置都全部同步好了。</p><h2>结尾</h2><p>在 2025 年期待一下：</p><p>所有应用产生的文件都在它该有的地方，所有应用在卸载的时候都可以将自己创建的<code>非用户数据</code>一并删除。</p><p>希望在若干年后，我们可以拥有一个简洁规范的 <code>$HOME</code> 目录。</p><p>这个世界的美好，离不开那些为之努力的人，哪怕是在某个极小慎微的地方做付出。他们在默默推动标准的实现，我列举一些在搜索资料时看到的案例：</p><ul><li><a href="https://github.com/nektos/act/issues/1678" target="_blank">github.com/nektos/act/…</a></li><li><a href="https://github.com/pnpm/pnpm/issues/2574" target="_blank">github.com/pnpm/pnpm/i…</a></li><li><a href="https://github.com/gitkraken/vscode-gitlens/issues/3660" target="_blank">github.com/gitkraken/v…</a></li></ul><p>有热心用户给出优化建议，有负责任的开发者积极采纳。</p><p>立个 FLAG 吧，我目前负责公司的某个产品的客户端开发，我后期也会推进这个规范的落地。</p><p>&nbsp;</p><h2>友情提示</h2><p>如果看文章的你在点击这些外链会看到这个页面：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/05/28/62cab31ee2f73438c1d22e54e64315cd.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>中转提示页</figcaption></figure><p>那么你可以安装我的另外一个浏览器插件 「<a href="https://sspai.com/post/99737"><strong>redirect-skipper</strong></a>」它可以让你无感跳过这些中转页面。</p><ul><li>项目地址：<a href="https://github.com/dogodo-cc/redirect-skipper"> Github</a></li><li>安装地址： <a href="https://chromewebstore.google.com/detail/redirect-skipper/bcjldhihfjnhgmkmdeojigknladnbcek?authuser=0&amp;hl=zh-CN">谷歌插件安装</a></li></ul>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101776</id>
            <title>7 个月开极氪7X跑16000km后，分享这 5 个真实用车体验</title>
            <link>https://sspai.com/post/101776</link>
            <guid isPermaLink="false">https://sspai.com/post/101776</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 08:38:16 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 极氪7X, 用车体验, 电动车, 配置全面  
<br>  
<br>  
总结: 作者分享了提车7个月以来的5个真实用车体验。1. 配置全面是关键，包括HUD、后排座椅调节、辅助驾驶、空气悬架和大电池等，提升了日常和长途驾驶体验。2. 操控和底盘表现良好，过弯侧倾抑制好，但存在左右晃动和电门迟滞感。3. 续航焦虑逐渐消失，随用随充和高速规划使充电更便捷。4. 软件能力有待加强，辅助驾驶可用但语音助手反应慢，车机更新不频繁。5. 车身尺寸合理，空间富余，适合家庭使用。总体对极氪7X满意度较高。 </div>
                        <hr>
                    
                    <p>不知不觉提车已经 7 个月，更没想到的是已经开了超过 16000km，再开不到 4000km 就要做首保，在此分享 5 个真实用车体验。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/00489eaa72598f8f4fa22f1b595e0c2d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><hr /><h2><br /><strong>一、配置全面就是好</strong></h2><p>消费者既要又要还要没有任何错，特别是汽车这种大件，绝大多数家庭有且仅有一辆家庭用车。</p><p>当下各种新车太多太多，选车并不容易，我是通过下面三个步骤完成了购车的决策：</p><h3><strong>① 梳理用车需求</strong></h3><p>结合用车场景：接送娃上学、节假日长途自驾结合主要用车人：主要是我开、老婆偶尔开、后排主要坐小朋友</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/14/e8723453574f2408d3371886f0fa640d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3><strong>② 试驾多多益善</strong></h3><p>试驾的均为国内的新势力车型：</p><figure class="image ss-img-wrapper image_resized" style="width: 459px;"><img src="https://cdnfile.sspai.com/2025/08/12/fad9bebf38929a8472067b11e43f9677.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3><strong>③ 敢于做决策</strong></h3><p>决赛圈是蔚来 ES6 VS 极氪 7X，用了几个小时的时间，一家三口去到两个线下店实地看车，最终敲定极氪 7X。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/14/47e3f50817d0161c09cc87865e2bccd5.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/14/2ee6a47fcff14b580f6f061089a6d7ec.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/01/10/11ffe542971a674edd5e6c91be367072.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/01/10/f4219e7ecc95d3bdffafde5371250870.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>配置全面带来的好处是在日常的使用中逐渐体现出来：</p><h3><strong>① 既有仪表盘又有 HUD：</strong></h3><p>开车的时候看 HUD 为主，对颈椎很友好</p><h3><strong>② 后排座椅可调节：</strong></h3><p>极大提升长途体验，日常体验也有显著提升</p><h3><strong>③ 辅助驾驶：</strong></h3><p>有和无就是天壤之别，高速场景和堵车场景尤其好用</p><h3><strong>④ 空气悬架：</strong></h3><p>可能一年调不了几次，但需要调整的悬架高度都是有大用处的时候</p><h3><strong>⑤&nbsp;大电池：</strong></h3><p>100 度电池的好处是显而易见的，特别是高速上的续航，如果是 450km 左右的路程，能做到中途不充电直接抵达目的地。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/26357b958592c739368ae6859d3f704d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>6 月 9 日从合肥返程的时候，路过服务区充电需要排队，于是直接没充电开回家的。全程 460km，高速里程大约450km，停好车剩余 13% 电量。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/fdbb70e99bfaa818d87124fe2bee5e8a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><strong>现在再盘点下整体配置，还想要的配置有 3 个：</strong></p><p>1. 主副驾的零重力座椅</p><p>2. 单腔空悬变成双腔空悬</p><p>3. 前排玻璃从单层变成双层<br />&nbsp;</p><h2><strong>二、能感受到的操控和底盘</strong></h2><p>操控和底盘比较微妙，特别是在网络上，针对某一款车不同人车评人的评价很可能大不一样，而对于驾驶里程十分有限的普通人来说，对操控和底盘的感知自然更不具体。</p><p>由于本人驾驶里程也才 8w 多公里，之前开的车（比亚迪唐）也只有一辆，只能浅谈 4 个直观感受：</p><h3><strong>① 过弯时侧倾抑制好</strong></h3><p>不管是日常开还是在高速上，过弯的时候都没有身体被车带着向某一侧倾斜的感受。</p><h3><strong>② 奇怪的左右晃动</strong></h3><p>过减速带和颠簸路段的时候极其明显或者说是有点突兀，相较于难以抑制的左右晃动，车子上下波动的幅度很小且感知不明显。</p><h3><strong>③ 不像 SUV的灵活度</strong></h3><p>刚提车的时候，我还是保持着上一辆车的驾驶习惯。有一天早上和老婆一起送娃上学，途中一个平平无奇的变道把我们三个人都惊到。</p><h3><strong>④ 开山路时的电门迟滞感</strong></h3><p>在市区和高速上并没有这种感觉，但开山路上下坡的时候能感知到，距离人车合一还差一点点。<br />&nbsp;</p><h2><strong>三、必然消失的续航焦虑</strong></h2><p>电动车充电早就不是难题，难的是节假日出行在服务区的充电桩不足所带来的充电等待。</p><h3><strong>① 随用随充成为现实</strong></h3><p>放在几年前无法安装家充可能是影响购买纯电车的关键因素，放在现在的情景中，已经完全不是问题。随着支持快充的充电桩越来越多，充电越来越方便，30-50 分钟的补能便能支持5-7 天的用车。</p><h3><strong>② 高速长途提前做规划</strong></h3><p>各种地图 app 都能查路途中服务区充电桩的情况，根据自身情况进行灵活的规划：60%电量时补能、40%电量时补能、20%电量时补能……</p><h3><strong>③ 日趋合理的电耗</strong></h3><p>现在各大车企对电车电耗的优化都是越来越好，特别是辅助驾驶的加持下也能让高速里程更有保障。</p><h2><br /><strong>四、有待加强的软件能力</strong></h2><p>软件能力对于纯电车的重要性不言而喻，在硬件无法拉开差距的情况下，各家车型的软件水平就是其产品力的重要体现之一。</p><h3><strong>① 可用的辅助驾驶</strong></h3><p>不用管是在什么梯队，极氪 7X 的辅助驾驶在高速是可用的，强烈建议开启变道确认，避免无效变道。在城区基本不用，车多的时候还是自己开靠谱。</p><h3><strong>② 反应慢半拍的语音助手</strong></h3><p>用了几天之后，就自适应了Eva偶尔响应不及时和智障回复。即便如此，还是比 iPhone 上的 Siri 好用。</p><h3><strong>③ 车机系统更新不频繁</strong></h3><p>距离上次更新已经有 4 个月！！！！</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/69cb77654ef87833e7d2757cff3da393.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2><strong>五、尺寸与空间</strong></h2><p>就个人的感受而言，长度超过 5m 或宽度接近 2m 的车都偏大的车型，在日常使用中需要去适应车辆的时间也会更长一些。</p><h3><strong>① 合理的尺寸</strong></h3><p><br />车身尺寸为4825×1930×1666mm，车长和车宽均不会对停车造成困扰</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/08/12/article/4016799c97a7154753ee53e5941a667c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3 style="margin-left: 8px;"><strong>② 富余的空间</strong></h3><p style="margin-left: 8px;">轴距为2925mm，所带来的是富余的后排和后备箱空间</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/14/026ba2aa2bdd6b1b5f5a9812020c85b8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><hr /><p><br />综上，极氪 7X 是一款我挺满意的一款车，满分 100 分能给到 85 分。希望我的5 个真实用车体验能对你有所帮助。</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101777</id>
            <title>写一篇漂亮的技术调研文档</title>
            <link>https://sspai.com/post/101777</link>
            <guid isPermaLink="false">https://sspai.com/post/101777</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 07:12:44 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: GitHub图标,NPM文档,实时数据,浏览器插件  
<br>  
<br>  
总结: 1. 在GitHub或NPM文档中使用精美图标能提升专业感和信任度。2. 这些图标通过shields.io等服务器实时获取数据。3. 作者模仿got包的文档制作了对比表格但过程繁琐。4. 开发了chrome-npm-comparison插件简化对比表格生成。5. 插件支持多维度对比和Markdown导出。6. 推荐了redirect-skipper插件跳过中转页面。7. 工具旨在提升技术文档的呈现效率。8. 所有工具均为开源项目。 </div>
                        <hr>
                    
                    <p>平时逛 Github 或者 NPM 网站时候，在 README.md 中或多或少都会看到一些这样的图标：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/4a613fe46e4f7f502e69a21f9d1185e7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>在枯燥的文档中加入这样的图标能让文档的观感提升不少，且可以增加读者的信任度。</p><p>读者会认为这份文档你是认真写的，且看着<strong>比较专业</strong>。</p><p><strong>认真</strong> + <strong>专业</strong> = <strong>信任</strong> 👍</p><h2>原理</h2><p>这些图标除了精美之外，它所展示的数据是实时的，这就非常酷了。</p><p>它让你文档呈现的数据永远都是准确的。</p><p>原理也较为简单，我们来解析一下这个路径：</p><p><a href="https://img.shields.io/github/stars/vuejs/core?color=white&amp;label"><strong>https://img.shields.io/github/stars/vuejs/core?color=white&amp;label</strong></a></p><p>它就是往 <code>img.shields.io</code> 这个服务器请求图片，通过一定规则拼装出请求参数，让服务器知道我们需要什么数据。</p><p>示例的地址就是告诉服务器返回一张 <strong>表示 vue 仓库的 star 数量的图片</strong></p><p>而这样的雷锋服务器目前我知道的有3个：</p><ul><li><a href="https://shields.io/" target="_blank">shields.io/</a> 支持多种图标</li><li><a href="https://flat.badgen.net/" target="_blank">flat.badgen.net/</a> 支持多种图标</li><li><a href="https://packagephobia.com/" target="_blank">packagephobia.com/</a> 只返回指定 npm 包所占用的内存大小</li></ul><p>这些服务器会根据我们的请求参数，去获取数据源，将数据包装成一个漂亮的图标，返回给客户端。</p><h2>我也想高大上</h2><p>之前逛 NPM 的时候发现 &nbsp;<a href="https://www.npmjs.com/package/got" target="_blank">got</a> &nbsp;这个包的 README.md 非常精美。作者列举了该库和其他类似库的一些对比数据，觉得非常专业。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/2f8ab4c7b8531a3cc1ef6b38bc986aa5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>看着是一个小图标，但是它展示的数据却是实时的、动态的</figcaption></figure><p>于是我在写调研报告的时候也学着写了一个这样的表格：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/8528d4e8c8b9eeb1b008ed0da3a23a06.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>截图是之前写的技术调研报告</figcaption></figure><p>表格看着是很舒服，可是编辑 markdown 的时候费了老命了。短短的一张对比表格，需要配置这么多的图片地址和图片链接，配置完了还得保证组合正确，瞬间觉得投入产出不成正比了。（除非写这样的报告可以拿奖金，否则不可能再写第二次！！）</p><p>如下文本是上面那张表格的 markdown 源码，来感受一下工作量：</p><pre class="language-markdown"><code>## npm 包对比

|                    |    [`yauzl`][ygit]    | [`extract-zip`][egit] |   [`adm-zip`][agit]   |  [`unzipper`][ugit]   |   [`archiver`][argit]   |
| ------------------ | :-------------------: | :-------------------: | :-------------------: | :-------------------: | :---------------------: |
| Issues open        |   [![][yio]][yio_a]   |   [![][eio]][eio_a]   |   [![][aio]][aio_a]   |   [![][uio]][uio_a]   |   [![][ario]][ario_a]   |
| Issues closed      |   [![][yic]][yic_a]   |   [![][eic]][eic_a]   |   [![][eic]][aic_a]   |   [![][uic]][uic_a]   |   [![][aric]][aric_a]   |
| Downloads          |    [![][yd]][yd_a]    |    [![][ed]][ed_a]    |    [![][ad]][ad_a]    |    [![][ud]][ud_a]    |    [![][ard]][ard_a]    |
| Bugs               |  [![][ybug]][ybug_a]  |  [![][ebug]][ebug_a]  |  [![][abug]][abug_a]  |  [![][ubug]][ubug_a]  |  [![][arbug]][arbug_a]  |
| Dependents         |   [![][ydp]][ydp_a]   |   [![][edp]][edp_a]   |   [![][adp]][adp_a]   |   [![][udp]][udp_a]   |   [![][ardp]][ardp_a]   |
| Install size       | [![][ysize]][ysize_a] | [![][esize]][esize_a] | [![][asize]][asize_a] | [![][usize]][usize_a] | [![][arsize]][arsize_a] |
| GitHub stars       |  [![][ystar]][ygit]   |  [![][estar]][egit]   |  [![][astar]][agit]   |  [![][ustar]][ugit]   |  [![][arstar]][argit]   |
| TypeScript support |   [![][yts]][ygit]    |   [![][ets]][egit]    |   [![][ats]][agit]    |   [![][uts]][ugit]    |   [![][arts]][argit]    |
| Last commit        |   [![][ycm]][ycm_a]   |   [![][ecm]][ecm_a]   |   [![][acm]][acm_a]   |   [![][ucm]][ucm_a]   |   [![][arcm]][arcm_a]   |
| symlink support    |  :heavy_check_mark:   |  :heavy_check_mark:   |          :x:          |      :question:       |       :question:        |

&lt;!-- https://gist.github.com/rxaviers/7360908 图标编码参考 --&gt;

&lt;!-- GITHUB --&gt;

[ygit]: https://github.com/thejoshwolfe/yauzl
[egit]: https://github.com/max-mapper/extract-zip
[agit]: https://github.com/cthackers/adm-zip
[ugit]: https://github.com/ZJONSSON/node-unzipper
[argit]: https://github.com/archiverjs/node-archiver

&lt;!-- ISSUES OPEN --&gt;

[yio]: https://img.shields.io/github/issues-raw/thejoshwolfe/yauzl?color=gray&amp;label
[eio]: https://img.shields.io/github/issues-raw/max-mapper/extract-zip?color=gray&amp;label
[aio]: https://img.shields.io/github/issues-raw/cthackers/adm-zip?color=gray&amp;label
[uio]: https://img.shields.io/github/issues-raw/ZJONSSON/node-unzipper?color=gray&amp;label
[ario]: https://img.shields.io/github/issues-raw/archiverjs/node-archiver?color=gray&amp;label
[yio_a]: https://github.com/thejoshwolfe/yauzl/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[eio_a]: https://github.com/max-mapper/extract-zip/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[aio_a]: https://github.com/cthackers/adm-zip/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[uio_a]: https://github.com/ZJONSSON/node-unzipper/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc
[ario_a]: https://github.com/archiverjs/node-archiver/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc

&lt;!-- ISSUES CLOSED --&gt;

[yic]: https://img.shields.io/github/issues-closed-raw/thejoshwolfe/yauzl?color=blue&amp;label
[eic]: https://img.shields.io/github/issues-closed-raw/max-mapper/extract-zip?color=blue&amp;label
[aic]: https://img.shields.io/github/issues-closed-raw/cthackers/adm-zip?color=blue&amp;label
[uic]: https://img.shields.io/github/issues-closed-raw/ZJONSSON/node-unzipper?color=blue&amp;label
[aric]: https://img.shields.io/github/issues-closed-raw/archiverjs/node-archiver?color=blue&amp;label
[yic_a]: https://github.com/thejoshwolfe/yauzl/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc
[eic_a]: https://github.com/max-mapper/extract-zip/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc
[aic_a]: https://github.com/cthackers/adm-zip/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc
[uic_a]: https://github.com/ZJONSSON/node-unzipper/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc
[aric_a]: https://github.com/archiverjs/node-archiver/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc

&lt;!-- DOWNLOADS --&gt;

[yd]: https://img.shields.io/npm/dm/yauzl?color=darkgreen&amp;label
[ed]: https://img.shields.io/npm/dm/extract-zip?color=darkgreen&amp;label
[ad]: https://img.shields.io/npm/dm/adm-zip?color=darkgreen&amp;label
[ud]: https://img.shields.io/npm/dm/unzipper?color=darkgreen&amp;label
[ard]: https://img.shields.io/npm/dm/archiver?color=darkgreen&amp;label
[yd_a]: https://www.npmjs.com/package/yauzl
[ed_a]: https://www.npmjs.com/package/extract-zip
[ad_a]: https://www.npmjs.com/package/adm-zip
[ud_a]: https://www.npmjs.com/package/unzipper
[ard_a]: https://www.npmjs.com/package/archiver

&lt;!-- BUGS --&gt;

[ybug]: https://img.shields.io/github/issues-raw/thejoshwolfe/yauzl/bug?color=darkred&amp;label
[ebug]: https://img.shields.io/github/issues-raw/max-mapper/extract-zip/bug?color=darkred&amp;label
[abug]: https://img.shields.io/github/issues-raw/cthackers/adm-zip/bug?color=darkred&amp;label
[ubug]: https://img.shields.io/github/issues-raw/ZJONSSON/node-unzipper/bug-fix?color=darkred&amp;label
[arbug]: https://img.shields.io/github/issues-raw/archiverjs/node-archiver/Bug?color=darkred&amp;label
[ybug_a]: https://github.com/thejoshwolfe/yauzl/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug
[ebug_a]: https://github.com/max-mapper/extract-zip/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug
[abug_a]: https://github.com/cthackers/adm-zip/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug
[ubug_a]: https://github.com/ZJONSSON/node-unzipper/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22bug-fix%22
[arbug_a]: https://github.com/archiverjs/node-archiver/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug

&lt;!-- DEPENDENTS --&gt;

[ydp]: https://badgen.net/npm/dependents/yauzl?color=orange&amp;label
[edp]: https://badgen.net/npm/dependents/extract-zip?color=orange&amp;label
[adp]: https://badgen.net/npm/dependents/adm-zip?color=orange&amp;label
[udp]: https://badgen.net/npm/dependents/unzipper?color=orange&amp;label
[ardp]: https://badgen.net/npm/dependents/archiver?color=orange&amp;label
[ydp_a]: https://www.npmjs.com/package/yauzl?activeTab=dependents
[edp_a]: https://www.npmjs.com/package/extract-zip?activeTab=dependents
[adp_a]: https://www.npmjs.com/package/adm-zip?activeTab=dependents
[udp_a]: https://www.npmjs.com/package/unzipper?activeTab=dependents
[ardp_a]: https://www.npmjs.com/package/archiver?activeTab=dependents

&lt;!-- INSTALL SIZE --&gt;

[ysize]: https://packagephobia.com/badge?p=yauzl
[esize]: https://packagephobia.com/badge?p=extract-zip
[asize]: https://packagephobia.com/badge?p=adm-zip
[usize]: https://packagephobia.com/badge?p=unzipper
[arsize]: https://packagephobia.com/badge?p=archiver
[ysize_a]: https://packagephobia.com/result?p=yauzl
[esize_a]: https://packagephobia.com/result?p=extract-zip
[asize_a]: https://packagephobia.com/result?p=adm-zip
[usize_a]: https://packagephobia.com/result?p=unzipper
[arsize_a]: https://packagephobia.com/result?p=archiver

&lt;!-- GITHUB STARS --&gt;

[ystar]: https://img.shields.io/github/stars/thejoshwolfe/yauzl?color=white&amp;label
[estar]: https://img.shields.io/github/stars/max-mapper/extract-zip?color=white&amp;label
[astar]: https://img.shields.io/github/stars/cthackers/adm-zip?color=white&amp;label
[ustar]: https://img.shields.io/github/stars/ZJONSSON/node-unzipper?color=white&amp;label
[arstar]: https://img.shields.io/github/stars/archiverjs/node-archiver?color=white&amp;label

&lt;!-- TYPESCRIPT SUPPORT --&gt;

[yts]: https://badgen.net/npm/types/yauzl?label
[ets]: https://badgen.net/npm/types/extract-zip?label
[ats]: https://badgen.net/npm/types/adm-zip?label
[uts]: https://badgen.net/npm/types/unzipper?label
[arts]: https://badgen.net/npm/types/archiver?label

&lt;!-- LAST COMMIT --&gt;

[ycm]: https://img.shields.io/github/last-commit/thejoshwolfe/yauzl?color=gray&amp;label
[ecm]: https://img.shields.io/github/last-commit/max-mapper/extract-zip?color=gray&amp;label
[acm]: https://img.shields.io/github/last-commit/cthackers/adm-zip?color=gray&amp;label
[ucm]: https://img.shields.io/github/last-commit/ZJONSSON/node-unzipper?color=gray&amp;label
[arcm]: https://img.shields.io/github/last-commit/archiverjs/node-archiver?color=gray&amp;label
[ycm_a]: https://github.com/thejoshwolfe/yauzl/commits
[ecm_a]: https://github.com/max-mapper/extract-zip/commits
[acm_a]: https://github.com/cthackers/adm-zip/commits
[ucm_a]: https://github.com/ZJONSSON/node-unzipper/commits
[arcm_a]: https://github.com/archiverjs/node-archiver/commits

### 选择的依据：

-   软连接的支持（编辑器内部有软连接）
-   较少的依赖
-   较多的下载量

综合以上数据，[yauzl][ygit] 是下载量最大的，但是它提供的接口相对底层。所以最终选择 [extract-zip][egit]，它是对 yauzl 的一个简单的封装。对外提供更简单的接口。
</code></pre><p>&nbsp;</p><p>手写是不可能了，但是我们是程序员啊！类似这样的配置性的东西最适合程序化了。</p><p>于是就决定开发一个浏览器插件，用来快速制作 NPM 包的对比表格。</p><p>就像逛购物商城一样，在商品详情页可以点击商品到<strong>对比列表</strong>。方便用户横向对比多个商品。</p><h2>浏览器插件</h2><p>懒是第一生产力，于是就有了 <a href="https://github.com/dogodo-cc/chrome-npm-comparison" target="_blank">chrome-npm-comparison</a> 这款浏览器插件。<a href="https://chromewebstore.google.com/detail/npm-comparison/opijdickacjhbendcbbabpgffoppphdg?authuser=0&amp;hl=zh-CN" target="_blank">Chrome 安装地址</a></p><p>该插件在 npm 的包的详情页，添加一个 「Add to npm Comparison」 的按钮。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/4bfec1503e0d18b8c97f441757bd42a3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>点击之后会生成对比表格：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/e69b152a9dc98fce48dacfb4323519d4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>点击按钮，就会追加到表格</figcaption></figure><p>&nbsp;</p><p>还提供了众多图标选项供你自由组织表格数据：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/12/515428dd5261adebdbaefb85bd183fbe.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>可以勾选需要对比的维度</figcaption></figure><p>表格生成之后你可以将它复制到 Markdown 或者 HTML 。</p> <p>&nbsp;</p><p><br />这样无论是你需要介绍自己的 npm 包，还是写一篇技术调研文档，都可以快速制作出一份精美的 <strong>npm 包对比表格</strong>。</p><ul><li>插件安装地址：<a href="https://chromewebstore.google.com/detail/npm-comparison/opijdickacjhbendcbbabpgffoppphdg?authuser=0&amp;hl=zh-CN" target="_blank">Chrome 安装地址</a></li><li>插件仓库地址：<a href="https://github.com/dogodo-cc/chrome-npm-comparison" target="_blank">chrome-npm-comparison</a></li></ul><h2>友情提示</h2><p>如果看文章的你在点击这些外链会看到这个页面：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/05/28/62cab31ee2f73438c1d22e54e64315cd.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>中转提示页</figcaption></figure><p>那么你可以安装我的另外一个浏览器插件 「<a href="https://sspai.com/post/99737"><strong>redirect-skipper</strong></a>」它可以让你无感跳过这些中转页面。</p><ul><li>项目地址：<a href="https://github.com/dogodo-cc/redirect-skipper"> Github</a></li><li>安装地址： <a href="https://chromewebstore.google.com/detail/redirect-skipper/bcjldhihfjnhgmkmdeojigknladnbcek?authuser=0&amp;hl=zh-CN">谷歌插件安装</a></li></ul>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101704</id>
            <title>如何根据神经科学原理快速放松</title>
            <link>https://sspai.com/post/101704</link>
            <guid isPermaLink="false">https://sspai.com/post/101704</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 06:29:20 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 费登奎斯,钟形手,神经可塑性,身体实践  
<br>  
<br>  
总结: 该练习设计受费登奎斯、艾瑞克森等体系影响，原型来自费登奎斯1981年工作坊中的"钟形手"技术。其理论依据最初基于运动/感觉侏儒图，后根据新研究更新，但实践早于神经可塑性理论被学界承认。视频初版2023年发布于B站，复刻版有所调整。原计划制作系列节目从静态放松过渡到动态练习，因恶评中断。专栏将结合多媒体形式阐述身体实践方法，后续会探讨其作用、局限及风险。 </div>
                        <hr>
                    
                    <p>该练习的设计，受到费登奎斯（Feldenkrais method）、艾瑞克森（Milton Erickson）、西斯特玛（Systema）等体系的影响。一些细节也受到其他体系的影响，暂不一一列举。<br />其原型来自费登奎斯1981年的工作坊，他晚年才开始使用这个方法，所以没有收录到他的书中。在这个练习中，手部动作细微如同钟的振动，故命名为钟形手（the bell hand）。</p><p>费氏当时的理论依据是 Wilder Penfield &amp; Edwin Boldrey 的运动侏儒图（motor homunculus）、感觉侏儒图（sensory homunculus），这似乎有些过时了，所以根据 Frank Willett、Evan M. Gordon 等的研究做了一定更新。但这个体系的出现，是基于他通过武术获得的身体直觉及其科研背景造就的思考能力，其实践领先于理论领域 —— 该体系的雏形诞生时，主流科学界尚未承认神经可塑性。</p><p>这个视频的初版，于 2023 年 8 月 8 日首发于 B 站，也是我做过的第一个视频。复刻版的内容有一定调整，且更换了高清素材。</p><p>原计划要做一个系列，写了个大纲，由几十个词汇组成，每期处理一个词汇。这个节目旨在提供静态放松的基础，后续会逐步过渡到动态和生活层面（我一向<strong>不提倡做太多静态练习</strong>）。然而刚发出来就有位疑似费登奎斯领域的用户发表恶评和引流，令我怒而弃更 —— 当时刚做视频，对互联网现状的理解还很浅，所幸这两年经过大量低素质用户的锤炼，脸皮已经很厚了（笑）。</p><p>这个专栏涉及身体实践，很多观点难以仅凭文字阐明， 所以会结合音视频等形式，试图制造一定<strong>印象</strong>，作为讨论的基础。后文还会讲到这个方法的作用、延展、局限性与潜在风险。敬请期待。</p><h2>视频版</h2> <h2>播客版</h2><div class="ss-audioSource" id="" src="https://media.transistor.fm/b52b0087/70ac5104.mp3" title="如何根据神经科学原理快速放松（两周年复刻版）">Audio</div>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101749</id>
            <title>Opal：真正让我戒手机的不是屏蔽，而是「不方便」</title>
            <link>https://sspai.com/post/101749</link>
            <guid isPermaLink="false">https://sspai.com/post/101749</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 01:55:08 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 戒手机,Opal,注意力管理,App屏蔽  
<br>  
<br>  
总结: 文章探讨了现代人尝试戒手机的常见方法及其局限性，如卸载娱乐App或使用系统自带限制功能效果不佳。作者通过使用Opal软件，发现其通过设置时间段屏蔽App、增加解锁繁琐流程的方式有效减少了无意识刷手机的行为。Opal的核心逻辑是打断用户习惯性操作，促使有意识地选择使用App，而非完全戒断信息。该软件还能针对不同场景定制专注模式，帮助培养健康习惯。最终作者强调，软件辅助之外，找到人生“主线任务”才是解决注意力分散的根本方法。 </div>
                        <hr>
                    
                    <p>现代人戒手机一般来讲无非就是卸载娱乐型App、采用系统自带的时间限制或重新使用Dumb Phone（功能机），但尝试过后要么发现对生活造成了不便，要么反馈收效甚微。曾经我也是「小红书」、「抖音」等各种APP卸载了又重新下；不断「续杯15分钟后提醒我」；手机刷不了我上电脑网页版刷……抱着死马当活马医的心态，我在某个工作日的上午安装了Opal，一周过后，我发现我的注意力终于回来了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/9334251beb4e9e9b0ff4a405466120eb.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>iPhone自带的App使用时间限制功能</figcaption></figure><p>下载并且填完一些个人需求问卷后，Opal会根据我填写的需求自动设置不同时间段要屏蔽的App，像我的工作日就被设置的比周末严格一些（上班比假期更喜欢刷手机），你也可以按照自己的需求去设置时间段、需要屏蔽的App列表并选择摆脱限制的难易度（我认为选择最简单的那一档就够用了）。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/5861d9f7ee4fc7c825fb48d9605f66b0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Opal的主界面，App屏蔽列表设置</figcaption></figure><p>乍一看，我感觉Opal这款软件和系统自带的「App限制」核心的逻辑其实差不多啊，不就是自动给容易上瘾的App设定时间段屏蔽吗？我抑制住了卸载的冲动，此时我设置屏蔽的App图标已经全都变成了黑色并且打开就是屏蔽画面。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/2e173527040e6c56d40fa2fc47933174.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>我在上班时间我打开“豆瓣”后，App变成了屏蔽画面，只有关闭退出选项</figcaption></figure><p>当我再次拿起手机准备刷小红书时， 除了屏蔽界面外没有「再使用15分钟」之类的选项，只有一个「关闭」按钮。此时要想继续使用App，我只能去Opal App主页，点击「休息一下」，然后等待10秒的时间，再手动点击「休息」（break），选择休息时长后再点一次「休息」，我才能获得最多15分钟的使用时间，时间一到，我又要重复这繁琐的操作。重复几次后，我直接按下了锁屏键。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/1073d04f1c36af8a4c0a358a310d05c2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>解除App使用限制需要操作繁琐的流程</figcaption></figure><p>至此，我终于切身体会到为什么互联网公司会在一个界面的交互、一个按钮上反复地进行调研和优化了，产品使用过程中但凡有一点不够丝滑的地方都会极大地促使用户终止下一步的行动，最终退出使用。</p><p>Opal 的思路就是把这种丝滑的体验打断了。只经过短短的3个工作日后，我发现自己下意识打开社交媒体的习惯逐渐被切断了，手机使用时间从此前的每日4个小时降低到了平均每天2小时左右，这让我感觉一天精力最充沛的时间段里，注意力更加集中。就算是感觉无聊，我也只会看向窗外发会呆或者打开笔记本利用间歇时间学习，因为打开社交媒体App的流程实在是太麻烦了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/2ab0d338af5297155aac9fbaecff5fe8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Opal的周报让我清晰看到自己手机使用时间的下降</figcaption></figure><p>Opal这种具有解锁成本的「App白名单」逻辑在桌面端使用体验也非常的一致。在Opal电脑端设置了视频、社交媒体网站之后，我每次下意识打开这些网页都会进入一个“缓冲区”，必须先去Opal操作一下才能进，而且还面临着使用时间限制。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/5f464bdfbb77ff7d5b4d7ffebbb27ca0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Opal桌面版主页</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/1347464de7567fa73f0f48939160569d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Opal桌面版设置屏蔽的网站和软件列表</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/c1dcf3627da2357661e6ccdb0f7cb256.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>打开网页即被屏蔽，需要回到Opal解锁并设置使用时间</figcaption></figure><p>Opal的核心目的不是让我完全的「信息戒断」，而是让我想清楚，我进某个App或者网页，是带着目的去搜索信息的？还是单纯无聊想打发时间。它让我把无意识刷信息流的习惯转变成有意识的选择和反思。只要我不卸载Opal，我就能坚持「少打开一次、快退出一点」的原则守住我的注意力。</p><p>除此之外，Opal还能针对如阅读、健身、睡眠等细分场景定制每天的专注时刻，进一步减少你培养阅读、健身习惯时的信息干扰，还有你睡前看手机的频次。这些功能和上述的基础功能一样，目前都是免费使用的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/0c4ae3eda3c68e84b4b02444a9842bdf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Opal各类专注场景设置</figcaption></figure><p>对于我来说，Opal解决我的信息上瘾有着独门「秘方」，但也不是万能钥匙。极端情况下你总能想出绕开限制的办法或者干脆卸载Opal。根本上，我认为软件辅助之外，我们还是要找到人生的「主线任务」，它可以是你热爱的事业、是家人与爱人的相处、是某项让你沉浸其中的爱好……</p><p>缺失「主线任务」的人生，哪怕没有手机和互联网，那无处安放的注意力也将被其他廉价的刺激替代。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101770</id>
            <title>AI图像生成技术发展史：从像素艺术到智能创作的技术革命</title>
            <link>https://sspai.com/post/101770</link>
            <guid isPermaLink="false">https://sspai.com/post/101770</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Aug 2025 01:51:17 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: AI绘图,神经网络,深度学习,扩散模型

<br>
<br>
总结: 文章回顾了AI绘图技术的发展历程，从1960年代Sketchpad的诞生到现代扩散模型的应用。早期突破包括1963年Sketchpad开创计算机绘图，1979年Neocognitron奠定CNN基础，1985年玻尔兹曼机引入统计学习方法。2006年后深度学习兴起，2013年VAE实现创造性图像生成，2014年GAN通过对抗训练提升图像质量。2021年DALL-E和CLIP实现文本到图像的跨模态转换，2022年扩散模型和Stable Diffusion开源推动AI绘图进入成熟期，使高质量图像生成普及化。 </div>
                        <hr>
                    
                    <blockquote><p>如果你告诉1960年代的计算机科学家，有一天机器能够仅凭一句话就画出逼真的画作，他们可能会觉得你在说科幻小说。但这个看似不可能的梦想，经过六十多年的技术积累，真的实现了。</p></blockquote><p>从最初笨拙的几何图形绘制，到今天能够生成"红蓝色动力甲蜘蛛侠背上带蜘蛛义肢全身形象"并生成精美图像，这个效果如今已经媲美曾经设计师一周的工作量，但是这条路走得并不容易。每一个技术突破的背后，到底AI是如何一步步学会"画画"的呢？</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/6aa7d93c2d9ea0e03b9ab64c8c64fd55.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2 style="text-align: center;">早期探索：当计算机第一次拿起"画笔"（1960-2000年）</h2><h3 style="text-align: center;">一切从Sketchpad开始</h3><p>1963年说起。MIT的博士生Ivan Sutherland创造了一个叫Sketchpad的程序，这可能是人类历史上第一个真正意义上的计算机绘图软件。在那个年代，大多数人连计算机长什么样都没见过，Sutherland就已经在用光笔直接在屏幕上画图了。Sketchpad奠定了现代计算机图形学和人机交互（HCI）的基础，为后来的AI绘图埋下了种子。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/b09455821952b801d879a7638b82fe4a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Sketchpad的程序</figcaption></figure><h3 style="text-align: center;">神经网络的早期萌芽</h3><p>同一时期，另一条技术路线也在悄悄发展。1979年，日本科学家福岛邦彦提出了Neocognitron一个模仿视觉皮层工作方式的神经网络。当时的人们可能没有意识到，这个看起来很学术的模型，被认为是现代卷积神经网络（CNN）的重要先驱，其实也是是今天所有深度学习图像处理技术的鼻祖。</p><p>Neocognitron的设计灵感来自于Hubel和Wiesel对猫视觉皮层的研究，模拟了视觉皮层中简单细胞和复杂细胞的工作机制。在Hubel-Wiesel模型里面，<strong> 通过动物的视觉刺激， 来观察了脑部接受的电信号来提出假设模型。</strong></p><p>而福岛提出了类似的神经网络模型用来做模式识别的进程。先识别边， 然后识别特征， 然后模式识别。 这不就是我们介绍深度学习里面用的最多的东东？</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/ac43a0ed79ad808f9179661aeb01afc8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Hubel和Wiesel的研究</figcaption></figure><p>并且为此构建了网络模型， 是个多层网络模型， 并且命名了简单单元和复杂单元的映射， 作为每个层次识别的层结构。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/942555f28db564e6b1d3d1bec3a1545f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>1980年推出的neocognitron是<strong>第一个真正意义上的级联卷积神经网络</strong></figcaption></figure><p>1985年，Geoffrey Hinton（就是那个后来获得诺贝尔奖的"深度学习之父"）和同事们发明了玻尔兹曼机。这个名字听起来很高深，其实核心思想很直观：<strong>让机器通过统计学的方法来理解数据的规律</strong>。就像人类通过观察大量画作来理解什么是"美"一样。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/b49e1c93d576491ded75c84c7e76efee.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><strong>玻尔兹曼机的核心奥秘在于能够“学习”并找出数据中隐藏的模式</strong>。你可以把它看作是一个能够通过调整内部连接（我们称之为“权重”）来理解复杂信息的机器，它不像传统程序那样需要你一步步告诉它怎么做，而是能够自己摸索着学习。这个过程之所以被称为“玻尔兹曼”。</p><blockquote><p>玻尔兹曼机就是一个装满开关和磁铁的盒子，它通过随机拨动开关，让盒子整体越来越“舒服”（能量最低）。它还能通过看我们给它的“案例”，学会调整哪些开关之间该用吸引磁铁，哪些该用排斥磁铁。</p></blockquote><h3 style="text-align: center;">深度学习的"觉醒"</h3><p>2006年是个重要的年份。Hinton在《Science》杂志上发表了一篇划时代论文《Reducing the Dimensionality of Data with Neural Networks》，证明了深度神经网络可以被有效训练。这听起来很技术化，但简单说就是：机器终于学会了如何从复杂的数据中提取有意义的特征。</p><blockquote><p>这就像是给了机器一双能够理解世界的"眼睛"。有了这双眼睛，后面的故事才真正开始。</p></blockquote><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/2933ebf6cbcfe56b7a12d51bc581bf72.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2 style="text-align: center;">深度学习时代：机器开始"理解"图像（2010-2016年）</h2><h4 style="text-align: center;">变分自编码器（VAE）：第一次真正的"创作"</h4><p>2013年12月，两位荷兰科学家Kingma和Welling发布了<strong>变分自编码器（VAE）</strong>。这个技术的厉害之处在于，<strong>它不仅能复制已有的图像，还能创造出全新的、从未见过的图像</strong>。</p><p>把概率图模型的“变分推断”和神经网络的“反向传播”无缝拼在一起：</p><p>编码器把输入 x 变成隐变量 z 的概率分布（而不是一个点）；解码器再把 z 还原成 x 的分布；目标函数是“重构误差 + KL 散度”，既能生成新数据，又能给出似然估计。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/13d8be8e2a6dfd1b7e2d5329ed599bf0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/5dafb6996ecc89cc62d2b73e48e187e7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><blockquote><p>想象一下，如果你教一个孩子画苹果，传统的方法是让他模仿现有的苹果画。但VAE就像是教会了这个孩子理解"苹果"这个概念的本质，然后他就能画出各种不同的苹果，甚至是世界上不存在的苹果品种。</p></blockquote><h3 style="text-align: center;">GAN的诞生：一场"艺术较量"</h3><p>2014年6月的一个晚上，在蒙特利尔的一家酒吧里，Ian Goodfellow和朋友们正在讨论如何让机器生成更好的图像。当朋友们提出各种复杂的数学方法时，Goodfellow突然想到了一个绝妙的点子：为什么不让两个神经网络互相竞争呢？</p><p>就这样，生成对抗网络（GAN）诞生了。<strong>一个网络专门负责"画画"（生成器），另一个网络专门负责"鉴定真假"（判别器）。两者在不断的对抗中互相提高，就像真正的艺术家在竞争中成长一样。</strong></p><p>GAN 的核心思想是同时训练两个深度神经网络：</p><ul><li>生成器 Generator：负责“绘画”一些看起来与真实数据无异的图片。</li><li>判别器 Discriminator：像一位“质检员”，判断输入的图片究竟是真实样本还是 G 伪造的。</li></ul><p>在训练过程中，G 和 D 像打擂台的对手：G 不断“造假”，D 不断“打假”。随着回合增加，G 的赝品愈发逼真，D 的火眼金睛也愈发锐利。最终，当 D 再也分不清真假时，G 就学会了如何产出高质量的新数据。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/4b9bbc6871ae89095dc1f1a8ec4059f8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>生成对抗网络（GAN）</figcaption></figure><p>尽管 GAN 已经能合成令人惊艳的图像，但仍有两个痛点：</p><ol><li>训练成本高：对抗式训练既耗时又吃显卡，稍不注意就可能把 GPU 跑崩。</li><li>局部编辑难：GAN 对整个图像“一知半解”，很难精准地只改一只眼睛而不影响整张脸。</li></ol><h3 style="text-align: center;">Transformer：注意力机制的革命</h3><p>2017年，Google的研究团队发表了一篇名为"Attention is All You Need"的论文，提出了Transformer架构。这个看起来专注于自然语言处理的技术，实际上为整个AI领域带来了一场革命。</p><p>Transformer的核心创新是"注意力机制"——让AI能够专注于最重要的信息，就像人类在阅读时会重点关注关键词句一样。这种机制不仅让机器更好地理解语言，也为后来的多模态AI奠定了重要基础。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/ffd31d9e0e530be30efe5fa606623cf9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Transformer</figcaption></figure><blockquote><p>最初，人们可能没有意识到Transformer会对图像生成产生多大影响。但这个架构的优雅和强大很快就显现出来：它能够处理任意长度的序列，能够并行计算，最重要的是，它为不同模态（文字、图像、音频）之间的融合提供了统一的框架。</p></blockquote><h4 style="text-align: center;">StyleGAN：给AI艺术家更多控制权</h4><p>2018年底，NVIDIA再次突破，推出了StyleGAN。这个技术最了不起的地方在于，<strong>它让AI不仅能画得像，还能画得"有风格"。</strong></p><p>想象一下，传统的AI就像是只会临摹的学徒，而StyleGAN就像是有了自己风格的艺术家。你可以告诉它："画一个人，但要有梵高的笔触风格"，或者"保持这个人的五官，但改变发色和表情"。</p><p>大家的QQ里也出现了同样的功能，简单来说，就是可以把照片变成梵高风格：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/ce26aeed5056d8b7a4aa177f6a826598.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>StyleGAN</figcaption></figure><h4 style="text-align: center;">VQ-VAE-2：分层思考的智慧</h4><p>2019年，DeepMind的研究者们想出了一个聪明的方法：VQ-VAE-2。<strong>这个系统模仿人类画画的思维方式——先构思整体布局，再添加具体细节。</strong></p><p>顶层网络负责理解"这是一张海边日落的照片"这样的宏观信息，底层网络负责处理"海浪的纹理应该是什么样的"这样的细节问题。这种分层处理的思想，为后来更先进的生成模型提供了重要启发。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/a0b4751516f6100fc5e42cf504bd7f49.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>VAE原理</figcaption></figure><h2 style="text-align: center;">理解语言的AI画家：多模态时代的到来（2020-2021年）</h2><h4 style="text-align: center;">DALL-E：会读文字的AI画家</h4><p>2021年1月，OpenAI发布了DALL-E，这是一个历史性的时刻。第一次，<strong>我们有了一个真正能够理解人类语言并将其转化为图像的AI。</strong></p><p>DALL-E有12亿个参数，就像一个拥有12亿个"神经元"的大脑。你可以告诉它"一只戴着侦探帽的鳄鱼在下雨天查案"，它就能画出来。更神奇的是，即使是从未在训练数据中见过的奇异组合，它也能合理地创作出来。与当时主流的 GAN 路线不同，DALL·E 把文本和图像都离散化为 token，再用自回归 Transformer 统一建模，从而首次展示了“一句话出图”的可行性</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/e6be0dacbca8a75b3f837ae68bcee98a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>DALL-E这个名字象征着艺术和技术的统一，“DALL”向西班牙艺术家萨尔瓦多·达利致敬，“-E”指的是受欢迎的迪士尼角色Wall-E。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/bba01a6b034df040409ba09890f468a6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>DALL·E 1 的“文字→图像”流程拆成了 4 个你一眼就能看懂的小盒子，可以把它想象成 “写作文→画草图→上色→交卷” 的四步：</p><ol><li>BPE Tokenizer 你敲进去一句话，它先把每个字切成小“积木”（Token），就像把“一只穿西装的猫”切成 <code>一只 / 穿 / 西装 / 的 / 猫</code> 这样的编号。</li><li>dVAE 编码器 真正的照片太大，机器不好直接画。于是先有一个“压缩大师”把参考图压成 32×32 个小方格，每个方格用一个“色号”（codebook 里的编号）表示，变成一张“马赛克草图”。</li><li>Transformer 大脑 现在作文（文字 Token）和草图（马赛克编号）都准备好了。 Transformer 像一位“语文老师兼美术老师”，它一边读作文，一边按顺序猜下一个方格该填哪个色号，直到 32×32 格全部写完——这就是“自回归”地画图。</li><li>dVAE 解码器（也是 VAE 解码器） 最后一步相当于“上色放大”：把 32×32 的草图还原成 256×256 的真彩色高清大图，交卷！</li></ol><p>一句话总结：</p><p>“文字 → 小积木 → 马赛克草图 → Transformer 猜色号 → 上色放大 → 最终图像。”</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/c57000032c6c5feffdb19b402277cfe4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这一技术路线带来了三大突破：</p><ol><li><strong>跨模态对齐：</strong>文本语义与视觉元素精准对应，支持“穿西装的牛油果坐在法庭上”这类复杂组合。</li><li><strong>零样本泛化：</strong>无需针对特定类别微调，即可生成训练集里从未出现过的概念。</li><li><strong>局部可控：</strong>通过修改文本提示词或 token 掩码，就能重新绘制图像的局部区域，解决了 GAN 难以“只改一处”的痛点。</li></ol><p>DALL·E 的出现，标志着“文本→图像”生成进入可商用阶段，也为后续的 DALL·E 2、Stable Diffusion、Midjourney 等模型奠定了架构基础。</p><h3 style="text-align: center;">CLIP：视觉与语言的桥梁</h3><p>同样在2021年，OpenAI还发布了CLIP（Contrastive Language–Image Pre-training对比式语言-图像预训练），这个技术虽然不直接生成图像，但它做了一件同样重要的事：建立起了视觉和语言之间的联系，核心目标是<strong>用自然语言监督来训练一个能同时理解文本和图像的通用表征。</strong></p><p>CLIP就像是一个双语翻译官，能够理解图像的含义，也能理解文字的含义，并且知道它们之间的对应关系。这为后来所有的文本到图像生成系统提供了"语言理解"的基础能力。</p><p>CLIP通过利用大规模图文配对数据（约 4 亿条），通过对比学习让文本编码器和图像编码器在同一个向量空间里学会对齐语义。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/5529682cd9bceb9029e8463cb6c5df1f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>图像和文本编码器的对比学习过程</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/332c8be00cc21ad526567c576b7bf818.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>图像和文本编码器进行匹配的过程</figcaption></figure><h2 style="text-align: center;">扩散模型革命：AI艺术的成熟时代（2022-至今）</h2><h4 style="text-align: center;">扩散模型：从噪声中诞生的艺术</h4><p>扩散模型的核心思想其实很诗意：<strong>从纯粹的噪声开始，一步步去除噪声，最终"显现"出清晰的图像。就像雕塑家从一块粗糙的石头中雕出美丽的雕像一样。</strong></p><p>这个想法最早来自2015年斯坦福大学的研究，他们受到物理学中分子扩散现象的启发。想象一滴墨水在水中慢慢扩散，最终变成均匀的灰色。扩散模型就是要学会这个过程的"倒放"——从均匀的灰色重新聚集成清晰的墨水滴。</p><p>扩散模型灵感源于热力学中的“扩散”过程，分为两个步骤：正向扩散过程和反向扩散过程。</p><ul><li><strong>正向扩散过程：</strong>将初始图像通过基于马尔可夫链原理被逐渐加入随机“噪声”，一般这个过程会迭代上千次进行降噪过程，将原始图像逐渐变成纯粹的随机噪声。</li><li><strong>反向扩散过程：</strong>就是如何“反向”去噪，通常会训练一个神经网络（通常用U-Net）预测每一步需要减去的噪声，逐步去除噪声还原数据。随着这一过程的进行，原始数据的清晰度和细节逐渐显现。</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/afe8f369568f1d740acc25845a442bab.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>到了2020-2021年，研究者们发现扩散模型在图像生成质量上竟然超越了GAN，而且训练过程更加稳定。这就像发现了一个既有天赋又很听话的学生，自然引起了全行业的关注。、</p><h3 style="text-align: center;">Midjourney的出现开启ai绘图纪元</h3><p>2022年7月，一个小团队推出了公测的 Midjourney，打破了 AIGC 领域的大厂垄断。作为一个精调生成模型，以聊天机器人方式部署Discord，目前有980万用户，</p><p>2022年8月，游戏设计师 Jason Allen 凭借 AI 绘画作品《太空歌剧院》获得美国科罗拉多州博览会“数字艺术/数码摄影“竞赛单元一等奖，“AI 绘画”引发全球热议。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/f9bce7d2072385ff2eab1eed7d5abd57.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3 style="text-align: center;">Stable Diffusion：开源的力量</h3><p>2022年8月，Stability AI做了一个大胆的决定：将Stable Diffusion完全开源。这就像是把一个原本只有少数人能用的昂贵艺术工具，免费分享给了全世界。</p><p><strong>Stable Diffusion的厉害之处不仅在于生成质量高，更在于它能在普通的消费级显卡上运行</strong>。为什么叫 Stable？ 不是数学意义上的“稳定”，而是相对早期像素级扩散模型，显存占用低、训练收敛稳、社区生态繁荣。突然之间每个人都可以在自己的电脑上拥有一个AI艺术家。这种技术民主化的影响是革命性的。一夜之间，社交媒体上充满了AI生成的精美图像，各种基于Stable Diffusion的应用如雨后春笋般涌现。从专业设计师到普通用户，每个人都可以成为"AI艺术的导演"。</p><p>基于潜在扩散模型（LDM）的架构，Stable Diffusion在保持生成质量的同时大大降低了计算需求</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/article/2af42820d30f8c1c456f9023bb889580.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Stable Diffusion架构图，展示VAE编码器-解码器和UNet去噪过程</figcaption></figure><p>Stable Diffusion 并不是单个模型，而是 “文本编码器 → 潜空间扩散器 → 图像解码器” 三段式流水线，用潜空间换效率，用文本嵌入做方向盘，把 1000 步扩散压到 50 步就能跑在消费级显卡上。</p><ul><li>CLIP 把文字变成向量：77 个 token，每个 768 维，语义浓缩。</li><li>U-Net 在潜空间里“降噪”：从纯噪声张量一步步减去预测噪声，得到 4×64×64 的干净潜图。</li><li>VAE 负责“放大”：把潜图解码成高清 512×512 像素图，完成出图。</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/11/d0240967daf2abc34a1b22eab98b241d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><hr /><p>当前图像生成（“生图”）领域，主流技术路线主要有两类：<strong>自回归模型</strong>与<strong>扩散模型</strong>。二者都能从文本、草图或多模态条件生成高质量图像，但在建模方式、训练与推理流程、可控性与速度等方面存在显著差异。后续我会继续出品主流模型的区别和原理讲解～</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101693</id>
            <title>插件+AI的探索，AI笔记整理助手pickit</title>
            <link>https://sspai.com/post/101693</link>
            <guid isPermaLink="false">https://sspai.com/post/101693</guid>
            <pubDate></pubDate>
            <updated>Mon, 11 Aug 2025 23:05:27 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: AI笔记整理助手, 网页插件, 康奈尔笔记法, 费曼学习法  

总结: 本文介绍了作者开发AI笔记整理助手“Pickit”的思路和过程。该工具通过浏览器插件快速摘录网页文本，结合AI智能体进行自动整理，融合康奈尔笔记法和费曼学习法，输出结构化的笔记文档。核心功能包括快捷键摘录、来源记录、JSON导出及与Coze平台的AI工作流对接，最终在飞书生成包含关键词、原文、总结和教学尝试的标准格式文档。工具适用于浏览器阅读场景，支持移动端回顾，但存在无法记录软件内文本和图片等局限性。文末提供了插件下载和智能体配置指引。 </div>
                        <hr>
                    
                    <h2>前言</h2><p>本文主要讲述我搭建整个AI笔记整理助手的思路，并在文尾提供已完成的插件文件和通过修改coze密钥来使用自己的智能体的相关指引。</p><h2>想法的起始</h2><p>最近在学习一些新的知识，发现日常都是在工作中或者在家中，通过一些论坛或者网站阅读文章后，然后把觉得需要记录的句子或者段落记录下来。</p><p>但是我经常性地为了图省事，经常性地直接把文本直接复制到笔记软件里，想着后面回过头来会看一下。时间一长，就发现笔记本里已经堆满了不同的单句、段落，有时候甚至想不起当时为什么会记录这些内容。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/92963e182b1c0881f8a1d5cf01ba6af0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>把格式也复制下来，笔记排版会更加混乱</figcaption></figure><p>不知道是否也有人和我遇见了一样的问题，我回顾一下了我的笔记摘录路径，试图找出是哪个环节造成了这样的情况。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/13ed048c97391503d00ac377535bfe52.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><ul><li><strong>文章阅读：</strong>浏览器阅读的文章带有不同的格式的文本，不同网站使用的文本格式更是不同，直接复制粘贴会把格式带上；</li><li><strong>文本摘录：</strong>通常需要笔记本软件进行辅助，一般会根据当前的记录主题创建目录再进行摘录；如果需要记录来源网址，则需二次记录。</li><li><strong>摘录文本整理：</strong>一般初步摘录的文本时比较凌乱的，需要时间整理，或者调整格式来达到自己想呈现的笔记效果。</li><li><strong>回顾：</strong>一般在上班或者下班路上进行回顾，需要能用手机进行阅读；而且面对未整理的文档，阅读欲会大大降低。</li></ul><p>归纳了几个我的核心需求点：</p><ul><li><strong>网页的阅读环境下能快速摘录文本；</strong></li><li><strong>自动按我的想法整理文本，能够帮我加强对某些内容和定义的记忆；</strong></li><li><strong>能通过手机进行回顾。</strong></li></ul><p>思考过后，想到之前做的一款插件（<a href="https://sspai.com/post/101285">WordPilot英语学习插件搭建 - 少数派</a>、）可以作为不错的思路延展，既然已经可以记单词，自然也可以做进一步的延展，也用来记录笔记。</p><p>基于前面的核心需求点，已经可以有整个大致思路：<strong>抓手获取、大脑思考、载体承载结果</strong>；我想要的是一个只需要<strong>“拾取”（pick it up）</strong>就能用起来的工具。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/c10bbf136cff7fe7b83d660412efcc84.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>「抓手」：网页插件工具</h2><p>照例还是使用VS code和augment进行插件开发。</p><p>绘制简单的原型图：</p><figure class="image ss-img-wrapper image_resized" style="width: 563px;"><img src="https://cdnfile.sspai.com/2025/08/08/365c0183df5c45a8f05c76c58a2635f0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>原型图草图</figcaption></figure><p>编写初步的的PRD文档，确定核心的必要功能，不需要一步到位完整列出所有功能，只需要讲述完整的项目形态，以及能想到的一些功能。</p><figure class="image ss-img-wrapper image_resized" style="width: 393px;"><img src="https://cdnfile.sspai.com/2025/08/08/a8f2815c6b2026418ed8921c1655284a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>原型和初步的PRD不代表插件的最终形态，只为了给AI有一个整体上的概念，确保产品的关键主干在自己的把控之下，其他部分可以在后续与AI的交流中可以不断完善。</p><p>最后在沟通的过程中，完成具备记录功能的插件「Pickit」的初步产品形态，以下为一些核心的功能点：</p><ul><li>抽屉式功能悬窗触发；</li></ul><figure class="image ss-img-wrapper"><img alt="触发弹窗.mp4 [video-to-gif output image]" src="https://cdnfile.sspai.com/2025/08/09/article/382f88b5606d2f66d1e2aa1cbeb5485e.gif" /></figure><ul><li>部分无限制网站可通过快捷键Alt+p直接获取文本进行摘录，同时记录文本的来源；</li></ul><figure class="image ss-img-wrapper"><img alt="20250809_221116.mp4 [video-to-gif output image]" src="https://cdnfile.sspai.com/2025/08/09/article/9e6bde075878286c88867694ce7afb7e.gif" /></figure><ul><li>部分限制网站无法使用快捷键（如微信读书、知乎等），可先复制，再粘贴到输入框中保存，也会同时记录下摘录文本的来源；</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/09/e19b0cbeb359fbc6db16e4388c2330a4.gif" /></figure><ul><li>支持可导出CSV格式表格在本地备份。</li></ul><figure class="image ss-img-wrapper"><img alt="20250809_224734.mp4 [video-to-gif output image]" src="https://cdnfile.sspai.com/2025/08/09/article/79d18c2aee6a56aaeda4eaffc5868c6c.gif" /></figure><p>除了以上功能，我在这个初步的版本还预留了一个导出JSON格式文件的功能，指定了输出的JSON格式，作为输入为与AI整理分析的智能体进行对接做准备。这次产品的「抓手」已经完成。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/09/01a0bda93ef84000e515dc659637c52b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>「大脑」+「载体」：AI分析整理智能体</h2><p>继续采用对个人使用更为友好的coze，在这个部分，完成「大脑」的搭建，以及「载体」的选中，是支撑整个AI笔记整理助手的核心流程，需要在该部分完成流程如下：</p><figure class="image ss-img-wrapper image_resized" style="width: 538px;"><img src="https://cdnfile.sspai.com/2025/08/09/6911ccf7234fe6c7e2a976a37724dd55.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>搭建后的整体工作流如下：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/09/06816686cb0f70b6416ab0b85bbf2f1b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>JSON输入</h3><p>工作流的起始的节点，在上一步「抓手」搭建中已经确定输入数据的形式，可使用JSON导出功能导出的示例数据，作为该工作流的入参测试数据。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/09/9fd6821d31a3d3f709d0212d2c68e0b9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3><strong>大模型分析整理</strong></h3><p>大模型分析整理环节主要使用了大模型的分析节点，这里的重点是提示词的编写，决定你最终想输出的是怎样的一份笔记成果。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/09/24ee0c9b7dc4bd19ddf7c89ebc8b6fe1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/e16f46c36177e707ca4b96e3dee957d1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>注意调整最大回复长度</figcaption></figure><p>我希望 AI 能帮我实现的，是从<strong>康奈尔笔记法与费曼学习法</strong>中汲取灵感、融合后形成的构想。</p><ul><li>提炼关键词；</li><li>将摘录的笔记分类；</li><li>并帮我做出内容提炼总结；</li><li>以及能够引导我向别人复述相关的定义。</li></ul><p>总结四点，最后输出应具备以下结构：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/8bff91b773c4f7381eba3a1679db72fc.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>最后在大模型组件下完成的提示词编写，即完成了<strong>大模型分析整理</strong>的环节，经过多次测试后，我完成的提示词如下，这里可以按照实际的个人需求进行编写。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/09/693faea3e34b2d8515ddc2456610950f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>输出到载体</h3><p>该节点主要是输出载体的组件的选择，经调研，发现有两个组件符合我的要求。</p><p>第一个是<strong>Notion的create_page插件，</strong>支持创建一个新页面，用户可以在其中输入想要的内容。而Notion是我最近常用的一个笔记软件，完美符合我的「载体」要求。</p><p>但是经过测试后，发现了一个缺点，就是创建的新页面笔记内容被限制在了2000字以内，在我要求记录原文的前提下，2000字远远不够，只能放弃使用该组件。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/3d279d9415f8aa94b43641698919c9ba.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>第二个是<strong>飞书云文档的create_document插件</strong>，支持创建空文档和带内容的文档，支持 markdown 语法创建。这个插件比Notion更好的是，更长的文本输出，且支持markdown格式，这样能让我的笔记通过整理成markdown格式输出后，就能有完整的格式结构。最后，我也是选择了该插件作为「载体」。</p><figure class="image ss-img-wrapper image_resized" style="width: 603px;"><img src="https://cdnfile.sspai.com/2025/08/10/809eb85ac9623974068d43241df81975.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>并且用了一个时间插件，作为标题输出。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/a176cc23c60a3bc60a9b404272013e96.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>智能体接入</h3><p>整个工作流搭建完毕并测试通过后，发布为工作流，供后续的的接口调用。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/41c2175b6b51434bcdadc71877d59c59.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>在扣子API中找到执行工作流，输入自己的的token（具体参考<a href="https://www.coze.cn/open/docs/developer_guides/authentication">鉴权方式概述 - 文档 - 扣子</a>。）和workflow_id后，将接口复制提供给Augment进行对接，把原有的JSON导出功能改造为调用AI智能体智能体功能。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/f1b41737d0f68cda64dd917b8bf474a6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>至此，我获得了我所需要的一个完整形态的AI笔记整理助手，筛选出摘要笔记后，点击AI按钮，触发笔记整理，在飞书中生成整理后的云文档，<strong>最终形成一个具备标准格式且具有[关键词]、[笔记原文、来源]、[笔记总结]、[教学尝试]四个模块的可读文档。</strong></p><p>最终的实现效果如下：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/3e2ee0b0681df9b760248827f70caa35.gif" /></figure><p>同时可以在移动端的飞书中查看生成的云文档。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/32f42f6688e479d6c73a30c1bde30ef8.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>写在最后</h2><p>AI笔记整理助手「pickit」适用于浏览器阅读的场景，能帮助我整理当日的摘录文本后，在上下班的路上进行查看回顾，并能引导我进行内容复述加强记忆，但仍然存在不少缺点：</p><ul><li>受限于浏览器场景，无法记录在软件中阅读的文本内容；</li><li>部分无法进行复制、且服务调用快捷键的网站无法进行记录；</li><li>只适用于纯文本类的阅读整理，不适用于需要图片保存的场景，也无法进行快照。</li></ul><p>感兴趣的朋友可下载已完成的插件，并搭建自己的coze智能体进行接入使用，可直接替换token和workflowID进行使用，具体操作参考压缩包中的<strong>智能体调用配置说明.md</strong>。</p><p>&nbsp;</p><blockquote><p>网盘链接: https://pan.baidu.com/s/1CohnmIPaO9kPX3rXZZfoKw?pwd=a82p</p></blockquote><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101744</id>
            <title>Archlinux 笔记本省电设置</title>
            <link>https://sspai.com/post/101744</link>
            <guid isPermaLink="false">https://sspai.com/post/101744</guid>
            <pubDate></pubDate>
            <updated>Sun, 10 Aug 2025 21:54:21 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Linux省电, PowerTOP, TLP, 电池优化

<br>
<br>
总结: 本文介绍了在Archlinux系统上通过PowerTOP和TLP工具优化笔记本电池续航的方法。作者对比了MacBook和Windows笔记本的续航表现，指出Linux默认缺乏电源管理导致续航较短。核心方案包括安装配置TLP服务、调整CPU调频驱动(amd-pstate)、设置能源性能偏好(EPP)、管理充电阈值等。通过降低屏幕亮度、关闭动态组件等基础措施，结合TLP的进阶配置，最终将85Wh电池的续航从3-5小时提升到8小时左右。文章还提供了具体的命令行操作和配置参数，特别说明了ThinkPad和非ThinkPad设备的电池护理设置差异。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;"><strong>Matrix 首页推荐</strong>&nbsp;</p><p style="margin-left: 0px;"><a href="https://sspai.com/matrix">Matrix</a>&nbsp;是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&nbsp;</p><p style="margin-left: 0px;">文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><hr /><h2>背景</h2><p>我一直很羡慕 Mac 笔记本，尤其是 MacBook Air，轻薄便携的机身与惊人的续航几乎就是它的标志。通过 MacOS 系统和 M 系列芯片的软硬件深度整合，苹果给 MacBook Air 带来的省电体验实在是让人印象深刻。</p><p>相比之下，Windows 笔记本虽然难以完全复刻这种表现，但随着 AMD 和 Intel 在芯片架构与制程工艺上的进步，加上各大 OEM 厂商的省电模式与大容量电池的配合，现在的 Windows 笔记本也能做到办公场景下 8~10 小时的续航。其中的佼佼者，如 Lunar Lake 系列的笔记本，已经达到甚至超越了 Mac。</p><p>然而，我的笔记本上运行的则是 Archlinux。由于几乎没有进行过任何电源优化，即使这台笔记本拥有 85 Wh 的电池，离电续航却往往只有 3~5 小时。于是为了提示笔记本的离电使用时间，我决定探索一下 Linux 上的省电方案。</p><h2>核心工具</h2><p>Linux 下有两款工具可以用来协助用户进行功耗控制：PowerTOP 和 TLP。</p><ul><li>PowerTOP：顾名思义，类似 <code>top</code>，用于监控系统中各个软件与硬件组件的功耗情况，并能生成详情报告与优化建议。即使不使用它来直接进行具体的配置，它本身依然是一个非常优秀的功耗分析工具，可以帮助定位设备上主要的耗电来源。</li><li>TLP：这是一款功能丰富的命令行工具，能够在无需深入研究技术细节的情况下，轻松延长笔记本电脑的续航时间。TLP 默认针对电池寿命进行了优化，并且开箱即用地实现了 PowerTOP 的推荐配置。因此大部分情况下，只需要安装并启用 TLP 服务，就可以得到不错的省电效果。</li></ul><h2>基础措施</h2><p>在启用 TLP 之前，先调整一些离电状态下的基础配置（如屏幕亮度与键盘背光）。这些设置通常已集成在桌面环境的电源管理中，可以立即减少功耗。以 KDE 为例，可在“系统设置 → 电源管理”中，对电池供电时的屏幕亮度与键盘背光进行调节。我自己的设置是将屏幕亮度降低到了 20%，并完全关闭键盘背光。因为我离电场景多是在室内光照环境下，不需要更高的屏幕亮度和键盘背光。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/f3e566d726aeda3d14039a08ac29c8eb.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>另一个容易被忽略的功耗来源是桌面环境的动态组件，例如天气挂件、系统监控以及动态壁纸等。这些组件在离电状态下仍然可能会占用不少的系统资源，从而拖累整体的续航时间。可以根据自身的需求，调整这些组件的运行策略，例如：天气类挂件可以延长数据的刷新间隔，动态壁纸组件也可以设置为电池模式时停止动态特效。这样减少动态组件的活动频率，也可以进一步延长使用电池时的续航。</p><p>接下来，就是安装并启用 PowerTOP 和 TLP：</p><pre class="language-bash"><code># 安装 PowerTOP（功耗分析工具）
sudo pacman -S powertop

# 安装 TLP（实际的电源管理服务）
sudo pacman -S tlp

# 安装 tlp-rdw（提供根据特定事件启用或禁用蓝牙/Wi-Fi和WWAN设备的功能，需要NetworkManager）
sudo pacman -S tlp-rdw 

# 启用 TLP 服务（可以使用 --now 参数立即启动服务）
sudo systemctl enable tlp.service

# 启用 tlp-rdw 需要的 NetworkManager-dispatcher.service 
sudo systemctl enable NetworkManager-dispatcher.service

# 屏蔽 systemd-rfkill 相关服务避免冲突，确保 TLP 的无线电设备切换选项正常工作
sudo systemctl mask systemd-rfkill.service 
sudo systemctl mask systemd-rfkill.socket</code></pre><p>启动 TLP 服务后，可以通过以下命令检查其运行状态：</p><pre class="language-bash"><code>sudo tlp-stat -s</code></pre><p>若一切正常，应该可以看到 TLP 输出的系统信息和 TLP 服务状态。</p><p>以上就是一个基本的电源管理配置了。大部分情况下，TLP 提供的默认配置已经足够了。但因为 TLP 本身也是可以进行高度定制化的，所以还可以针对自己设备的情况，进行更深入的设置。</p><h2>进阶配置</h2><p>TLP 本身是一个纯命令行的工具，其配置文件路径位于 <code>/etc/tlp.conf</code>，可以通过修改配置文件来修改它的配置。或者也可以使用 TLPUI 之类的图形界面来进行可视化的配置操作，这也是我主要使用的配置方式。</p><pre class="language-bash"><code># TLPUI 位于 AUR 仓库中
yay -S tlpui</code></pre><p>安装完成后，打开 TLPUI，就可以使用它来更改 TLP 的配置了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/bca936144de54fe963f0f5eae8a9e195.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>CPU DRIVER OPMODE</h3><p>TLPUI 的 CPU 选项中的第一个项目是 CPU DRIVER OPMODE，这个项目中配置的是 CPU 的调频驱动。在较新的 AMD CPU（Zen 2 或更新版本）和内核版本中（内核 6.3 或更新），推荐的 CPU 调频驱动是 <code>amd-pstate/amd-pstate-epp</code>，可以通过下面的命令来检查当前 CPU 调频驱动的模式：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/amd_pstate/status</code></pre><p>如果输出的信息是 <code>active</code>，说明 <code>amd-pstate</code> 驱动已经启用并被设置为了 <code>active</code>，也称 <code>amd-pstate-epp</code>，这是推荐的现代模式。该驱动模式下，低级别控制权会被交给 CPU 硬件本身，硬件可以根据能源性能偏好（Energy Performance Preference，EPP）来优先考虑性能或能效。</p><p>如果上面的命令输出了其他结果或者文件并不存在，那么在 6.3 或更新的内核上，可以将 <code>amd_pstate=active</code> 加入到内核启动参数中使其永久生效：</p><pre class="language-bash"><code>sudo vim /etc/default/grub</code></pre><p>找到 <code>GRUB_CMDLINE_LINUX_DEFAULT</code> 这一行，在引导参数中加入 <code>amd_pstate=active</code>：</p><pre class="language-diff"><code>- GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
+ GRUB_CMDLINE_LINUX_DEFAULT="quiet splash amd_pstate=active"</code></pre><p>保存后，重新生成 GRUB 配置文件并重启：</p><pre class="language-bash"><code>sudo grub-mkconfig -o /boot/grub/grub.cfg    
sudo reboot</code></pre><p>再次执行下面的命令：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/amd_pstate/status</code></pre><p>此时应该可以看到输出为 <code>active</code>。</p><p>在 TLP 配置中，也可以手动更改 <code>CPU_DRIVER_OPMODE_ON_AC/BAT</code> 的选项，如需区分插电和离电时的调频驱动模式，那么就可以在这里进行配置，否则只需要在启动参数中统一设置就足够了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/d1f383a9770b6ec725f5fc49f049ba27.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p>这里也结合 TLP 的文档对 <code>guided</code> 和 <code>passive</code> 简单进行一下说明：</p><ul><li><code>guided</code>：需要 6.4 或更高的内核版本，可以配置最大和最小频率，处理器将在指定范围内自动选择工作频率。基本上可以将 <code>guided</code> 视为强制限定了频率范围的 <code>active</code> 模式。</li><li><code>passive</code>：可以结合 Linux 的 CPU 调速器（Governor）使用，也就是 TLP 中的 CPU SCALING GOVERNOR 选项。CPU 将按照调速器的配置决定频率。</li></ul><p>还可以通过下面的命令来验证当前 CPU 的调频驱动：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_driver</code></pre><p>如果是 <code>active</code> 模式，那么结果应该是 <code>amd-pstate-epp</code>。<code>guided</code> 或 <code>passive</code> 模式下，这个命令输出的可能是 <code>amd-pstate</code> 或其他结果（例如文件不存在等）。</p><h3>CPU SCALING GOVERNOR</h3><p>这个配置项目用于选择自动频率调节的 CPU 调速器，TLP 的默认设置的插电和离电的调速器都是 <code>powersave</code>。可以通过下面的命令，确认当前驱动模式下可用的调速器：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors</code></pre><p>当 <code>amd-pstate</code> 为 <code>active</code> 模式时，可用的选项有 <code>performance</code> 和 <code>powersave</code>，当 <code>amd-pstate</code> 处于 <code>guided</code> 或 <code>passive</code> 模式时，全部的选项有 <code>conservative</code>、<code>ondemand</code>、<code>userspace</code>、<code>powersave</code>、 <code>performance</code> 和 <code>schedutil</code> 这六个。对这些调速器的更具体说明，可以参考相关的<a href="https://www.kernel.org/doc/Documentation/cpu-freq/governors.txt">文档</a>。</p><p>因为我已经激活了 <code>amd-pstate-epp</code>驱动，所以我只有 <code>performance</code> 和 <code>powersave</code> 这两个选项，并且这两个选项在当前模式下，实际上并不是像真正的调速器那样工作，而是会被转换为 CPU 内部的能源性能偏好提示去进行工作。因此我这里保持了默认的状态，并没有进行设置。</p><p>另外需要说明的是，TLP 配置项中明确提到了，如果要配置此项，必须禁用发行版的调速器设置，否则会发生冲突。在 KDE 和 GNOME 桌面环境中，这个发行版的调速器设置通常可能是 <code>power-profiles-daemon</code> 管理的。</p><p>可以通过验证服务状态来确认：</p><pre class="language-bash"><code># 检查 power-profiles-daemon 服务是否在运行
systemctl status power-profiles-daemon.service

# 如果服务在运行中，可以选择停止并禁用该服务
sudo systemctl stop power-profiles-daemon.service
sudo systemctl disable power-profiles-daemon.service

# 或者屏蔽该服务
sudo systemctl mask power-profiles-daemon.service</code></pre><h3>CPU ENERGY PERF POLICY</h3><p>这个配置项目在 <code>amd-pstate-epp</code> 驱动下才是主要控制 CPU 能源消耗的配置项。在大多数情况下，它的可选值有 5 个：<code>performance</code>，<code>balance_performance</code>，<code>default</code>、<code>balance_power</code> 和 <code>power</code>。这 5 个节能的程度依次加深。</p><p>同样的，可以通过命令来确认自己 CPU 可用的 EPP 选项：</p><pre class="language-bash"><code>cat /sys/devices/system/cpu/cpu0/cpufreq/energy_performance_available_preferences</code></pre><p>我将插电时的 EPP 设置为了 <code>performance</code>，离电时则改为了最节能的 <code>power</code>。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/10/be6c406863adb751bec7701aba4b0f53.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>TLP 的其他设置</h3><p>使用电池时关闭睿频：</p><pre class="language-txt"><code>CPU_BOOST_ON_BAT=0</code></pre><p>设置平台（Platform）的整体电源级别：</p><p>当前可用的配置值可以使用下面的命令查看：</p><pre class="language-bash"><code>$ cat /sys/firmware/acpi/platform_profile_choices
low-power balanced performance</code></pre><p>我的配置如下：</p><pre class="language-txt"><code>PLATFORM_PROFILE_ON_AC=performance
PLATFORM_PROFILE_ON_BAT=low-power</code></pre><p>还有一些别的配置项目，如硬盘、WIFI 以及 USB 的省电，也可以通过 TLPUI 进行检查。这时候就会发现，TLP 在默认情况下的确已经进行了不少的配置了。所以这些配置项目我也就没有再进行进一步的更改了。</p><h2>电池</h2><p>最后的部分是电池本身的护理。电池护理并不会直接降低功耗，但能够减少容量的衰减，延长使用寿命。在 TLPUI 中，这部分的配置位于「ThinkPad 电池」标签，但这个配置并不只适用于 ThinkPad 机型。实际可用的参数取决于笔记本厂商与驱动的支持情况，具体的配置可以参考 TLP 的<a href="https://linrunner.de/tlp/settings/bc-vendors.html">相关文档</a>。</p><p>以我的 ThinkBook 为例，属于联想的非 ThinkPad 系列，使用的是 <code>ideapad_laptop</code> 驱动。可以通过 <code>lsmod | grep ideapad_laptop</code> 命令来确认，如果看到该模块已加载，就可以进行对应的电池阈值配置：</p><pre class="language-txt"><code>START_CHARGE_THRESH_BAT0=0  # dummy value
STOP_CHARGE_THRESH_BAT0=1</code></pre><p>这样电池的最大充电量就会被限制在 80%，减少高电量长期保持带来的电池老化。</p><p>但是，如果让电脑始终保持在 80% 的电量，难道不就是平白无故地损失了 20% 的容量吗？这里其实可以区分不同的使用场景：</p><ul><li>日常插电为主时：保持 80% 的上限，延长电池寿命。</li><li>临时需要外出时：可以通过命令 <code>tlp fullcharge</code> 临时将电源充满，达到最长的续航效果。</li></ul><p>另一个配置项，RESTORE_THRESHOLDS_ON_BAT 就是结合这种情况使用的。当使用 <code>tlp fullcharge</code> 将电池充满后，TLP 的阈值限制会在下一次开机后才恢复。启用这个配置项，可以在电脑切换回插电状态后，自动恢复用来的充电阈值。这样就能兼顾长期的电池寿命和临时的续航需求。</p><h2>最终结果</h2><p>完成以上的配置后，我再次在离电状况下启动了 PowerTOP 观察自己笔记本的功耗表现，发现设备的整体功耗已经被限制在了 8~10 w 左右（网页浏览和笔记记录等轻度工作）。这个功耗结合 85 Wh 的电池，已经足够给我带来 8 小时左右的续航了。</p><p style="margin-left: 0px;">&gt; 关注&nbsp;<a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank">少数派小红书</a>，感受精彩数字生活 🍃</p><p style="margin-left: 0px;">&gt; 实用、好用的 <a href="https://sspai.com/mall">正版软件</a>，少数派为你呈现 🚀</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101706</id>
            <title>五月份开始我成胶佬了</title>
            <link>https://sspai.com/post/101706</link>
            <guid isPermaLink="false">https://sspai.com/post/101706</guid>
            <pubDate></pubDate>
            <updated>Fri, 08 Aug 2025 07:24:29 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 拼装模型,童年回忆,国产模型,爱好发展  

总结:  
1. 作者回忆童年时购买低价拼装玩具的经历，尤其喜爱变形金刚和猛兽侠系列。  
2. 长大后因国产拼装模型塔斯提尔和孤影的高质量重新燃起对拼装模型的兴趣。  
3. 描述了从简单素组到学习渗线、刻线等进阶技巧的过程。  
4. 提到拼装模型填补了生活中缺乏创造性爱好的空缺。  
5. 通过模型制作获得个人印记和成就感。  
6. 认为新手阶段的学习过程充满乐趣。  
7. 表达了对这个爱好持续发展的期待。  
8. 希望读者也能找到属于自己的乐趣。 </div>
                        <hr>
                    
                    <p>今年五月份我买的两个胶-- 国产拼装模型 塔斯提尔 和 孤影 到货了，那时候我还没有想过我会真的把这个偶尔想起来的 爱好 逐渐拾起来。</p><p>在这以前，关于摸型都是有一搭没一搭的，偶尔想起来，就买一个看看。好几次老婆说要不给你买一个高达，都被我以家里没地方放为由拒绝了。<br /><br />但是从五月份开始我好像找到了拼装上的快乐。</p><p>&nbsp;</p><p>对于拼装模型，我算是很有渊源了。</p><p>小时候，学校门口的小摊上，花个五毛一块就能有一个玩具版件，那会孩子们的零花钱也不超过一两块，刚好这个价位就可以买到一两个。 那些玩具也以变形金刚，猛兽侠为主。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/109e95fde67a4d6bba92381e7fe19ac0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/ad8fbac744d60a7d378d999ae4ae19e9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>如图，时间过去很久，我也记得不怎么真切了</figcaption></figure><p>我还记得曾经斥巨资- 2.5 元， 买了一个纯蓝的带点透明的 擎天柱（也算是远古彩透了），还是可以变形的款式，和哥哥两人玩了很久，很可惜，岁月变迁，得那时候的人和事一样都没留住，随风而去。</p><p>&nbsp;</p><p>那会小摊上还会有其他的成品玩具，摆在最后面，又大色彩又鲜艳，最是吸引孩子们的眼光。我印象最深的是有三变的霸王龙，金属的，分色利落，和我们常买的款式一个天上一个地上，相当的酷，左手是龙头， 右手是尾巴。</p><p>&nbsp;</p><p>好在小伙伴中好像有一人家里还算殷实，各种变形金刚，六神合体等，也有这款霸王龙，我们其他人也可以去他家过过瘾。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/4e4f5bb1e0158493af3341ad14a998f9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>尽管摊位上有不少的玩具，但是受限于动画片的播放限制（ 那个时候几乎都是点映，电视台上放什么才能看什么，像变形金刚这类的动画看不到，也只能是看到玩具问多了才认识，像一些不在电视上播放的的动画片则需要碟片，如果要去影碟城买的话，价格应该在100 200元以上，这种不菲的价格和娱乐，几乎是不可能被普通小孩子得到），只认识猛兽侠。</p><p>&nbsp;</p><p>当时猛兽侠每天放学后会在电视上播放，只记得片头一连串炫技和一声声 Beast war。现在眼光来看，那个画面相当粗糙，但却是3d建模，不同于其他主流的2d作画，当时把 动物，机器人，争斗这些小男生们喜欢的元素揉在一起，自然是很受孩子们喜欢的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/b9df7bca3b54b0ea2798d50dfe9dbb62.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>猛兽侠的小玩具</figcaption></figure><p>我买的最多的也是五毛钱的猛兽侠系列的拼装摸型。&nbsp;</p><p>&nbsp;</p><p>一盒打开，小小的几版，每个零件都可以按压下来。 我那时年纪小，且这些玩具是盗版，用料粗糙不讲究，不能和原版比（我也是长大才知道有原版，也是长大才知道原来那个材质叫做毒塑料），每次都得用大劲才能拧下来去拼装。</p><p>小时候的我对黄豹勇士和老鼠勇士爱不释手，可是后来两个玩具一个不知道丢到哪里去了，一个在有一次去澡堂洗澡时，我拿着玩，不小时掉了两条腿到下水口被冲走了，很可惜。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/b310c02cd147e9019558ab2b5d9dba44.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>远没有这么精致，但在我心目中应该就是如此</figcaption></figure><p>再后来大了一些，电视上开始放神龙斗士了 （其实应该还有其他的机甲作品，但是我已经不太记得清了，印象中应该还有六芒星），我妈妈每天都说我又要去看 小杜了。隔壁小笼包店的阿姨姓杜，妈妈现在都记得我喜欢看“小救星小杜”，小摊上又开始卖各种各式的龙神号了，这也是我最早认识万代这个牌子。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/be2bbe5220bac79715fc4b25fe0da41e.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>现在也很爱听主题曲 一つのハートで</figcaption></figure><p>后来搬来搬去，上了初中高中大学，工作，这么长的时间也忙于学业和成长的其他的事情，也没有再接触过这些了。</p><p>19年，那时工作还没几年，女朋友（现在已经是老婆了）送了我一个RG强袭自由，从那个时候我算是正经开始接触成熟的拼装模型。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/3cdd8746c7702c03cdd84eccb47e4dda.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>现在眼光来看，早期的rg一体式骨架很有问题，容易软，这个能站起来还得靠支架+蓝丁胶才行</figcaption></figure><p>后来又买了mg力天使，依然是一种 对作品一点不了解，只凭着外观入手，统一叫高达，对于素组，改造没概念 的一个状态，应当是21年入手，也是没能继续下去这个爱好。 后面几年间陆陆续续又买了一两款其他类型的拼装</p><p>&nbsp;</p><p>契机在今年五月份，国模拼装 孤影和塔斯提尔让我彻底入坑了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/7046057263e322173505464b21d33a94.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>就是这两位，右起第一位是塔斯提尔</figcaption></figure><p>我在关注粘土人的时候关注到了NGA的 toy版块，那段时间论坛里总是在讨论这两款，公论认为提到年度最佳国产拼装可以给到塔斯提尔，这就勾起了我的好奇心，让我想入手看看具体如何。</p><p>&nbsp;</p><p>这两款的质量我不用多说，网上有太多的测评。拼装时流畅的体验让我感觉国产的拼装已经到了这样的程度，不尤得提起了很大的兴趣，趁着这个劲又入了 将魂姬的 舞狮 和摩动核炒的很热的 赵云。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/936b304b8f62d29c247aee76e8433508.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>赵云，很大一只，我个人感觉没有哪吒让我感觉惊艳</figcaption></figure><p>优秀的作品需要沉淀，也不一定真的是每一个热度高的就是最好的。</p><p>之后我又跟风入了5501, 不流畅的拼装体验让我还是打算入正，看看代哥这些年的功力。</p><p>&nbsp;</p><p>趁618我一口气买了三款mgsd，目前做了自由和巴巴托斯，又开始学习渗线，刻线加深，贴水贴，消光，马克笔补色，也入手了RG 四天王，目前在练习补色，或许之后会入喷涂坑。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/42fcf4cf400f7d6712e0849de822d755.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>RG牛，第一次尝试消光，没有喷好，远看没事近有橘皮</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/6465b50bbe6dca0ac858e8b797402a8f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>RG沙扎比，没有消光，仅水贴，渗线</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/2d64fdb96a009e729417acf775326ded.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>之前献祭过血的哪吒，是真的扎手，哪怕拼好了摆也是很扎手</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/a83400125be42165acdf5d1c4604de92.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>加油，布鲁托，你可以的</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/ce0a2344fe3cfcb8fee9d5c2af565a33.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>福冈lala port 仰拍</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/08/d03b5f37d7688822806b6de506f7f5b1.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>中古店碰到了，莫名的好笑，想起了那个表情包</figcaption></figure><p>每一个新爱好的开始阶段总是有很多可以做的，可以学习的地方，就像是每一个手游的新手阶段还没有到堆数值的地方，层出不穷的新机制会让人忍不住继续玩下去。</p><p>&nbsp;</p><p>我想，之所以我这次能入坑恐怕是因为我已经很久没得有一个有创造性的爱好了。</p><p>我可以看书，看小说，看电影，听音乐，刷视频，来获得更多信息；我可以去打羽毛球，打篮球，游泳，跑步，撸铁，骑自行车，来强健我体魄；但是我却缺失一个可以留下我个人印记的爱好，希望撸胶能弥补我这一点缺失。</p><p>希望看到这里的朋友和我都可以找到更多的乐趣。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101633</id>
            <title>从期待到现实：领克07 CarPlay 车载初体验</title>
            <link>https://sspai.com/post/101633</link>
            <guid isPermaLink="false">https://sspai.com/post/101633</guid>
            <pubDate></pubDate>
            <updated>Wed, 06 Aug 2025 09:21:31 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 领克07, CarPlay, 车载体验, Carlink  
<br>  
<br>  
总结: 领克07通过1.9.0 OTA更新支持CarPlay，连接过程简单，界面简洁。高德地图在CarPlay上精简设计，注重驾驶安全和操作简便。音乐应用Spotify不支持歌词显示，但可通过快捷指令实现自动播放。与本土方案Carlink相比，CarPlay在流畅度和老设备兼容性上表现更好，但Carlink在大屏适配和应用丰富度上更具优势。CarPlay满足核心需求，但界面留白和交互效率不及Carlink。未来的CarPlay 26可能在体验上进一步提升。 </div>
                        <hr>
                    
                    <h2>🎬 观看体验视频</h2><p><a href="https://www.bilibili.com/video/av114966023638046" target="_blank">lBilibili - 你更新了 1.9.0 吗？来看下领克 07 CarPlay 车载的初体验</a></p> <p>&nbsp;</p><hr /><p>从去年提车到今年 8 月，过去一年有多，领克发布会上宣传的 CarPlay 终于随着 1.9.0 的 OTA 更新到来了。领克07 上的 CarPlay 表现如何？是否值得这份期待？</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/1d12bc7be8dbafbfec4a9ec135d0c4a7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>​连接 CarPlay</h2><p>第一步是连接。我使用的是搭载 iOS 16 的 iPhone 8，配对过程比较简单。连接成功后，熟悉的界面出现在中控屏上。向右滑动进入主界面，整体观感简洁明了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/4bd13ce423ccf856a38a3dbbb1db6a07.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 应用界面</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/97546578507a43eceb083ae7e808102e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 主界面</figcaption></figure><h2><strong>地图导航：精简设计，操作简便</strong></h2><p>最先体验的是高频使用的应用——高德地图。相较于手机端的丰富功能，CarPlay 端的界面进行了精简，除了地图与上方的工具栏，没有过多的元素出现在画面中。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/c306313a3301aa1a5fa8b1637d10514d.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 上的高德地图</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/f99ecc47ec1bc03089414e1da626c9fd.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 上的地图导航界面</figcaption></figure><p>CarPlay 的设计考量​聚焦驾驶安全与操作简便。大部分 CarPlay 应用都遵循设计模板，避免司机在行驶中的分心和复杂操作。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/1e1ffc129d417042e7ff92f1c065b47e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay Develop Guide</figcaption></figure><h2>音乐体验：专注聆听，歌词缺席​</h2><p>接着测试音乐应用 Spotify。在主界面，推荐歌单以列表形式呈现。点击播放歌曲后，出于安全考虑，CarPlay ​不支持在播放界面展示歌词，对习惯看歌词与哼歌的我来说，多少有些不便。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/19e3d4f5ce0043fd24d625350e2ac928.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 上的 Spotify</figcaption></figure><p>但 CarPlay 也弥补了 Flyme Auto 的一个缺点，车机自带的场景助手仅支持 QQ 音乐自启，而 CarPlay 能够通过 iPhone 上的快捷指令实现上车自动播放 Apple Music 的音乐。</p><h2>对比“选手”：Carlink的本土优势​</h2><p>和国内主流方案 Carlink 相比比较，后者在本土化和大屏适配上的优势十分明显。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/bee7aee9b1037ac1cc953da58ae7c7ab.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Carlink 首页</figcaption></figure><p>​​</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/8eb7517dcadaae18f9af4670dd7f6043.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Carlink 上的地图导航界面</figcaption></figure><p>Carlink 针对国内车辆的大屏做了更好的原生适配，尤其在屏幕利用率上，并且应用商店里提供更丰富的应用选择（当然还是会存在白名单的情况）。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/7774e83991a0b90fa575bb858eef5b2a.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Carlink 支持应用</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/2b036a67047bae8f677719db6f7ba724.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Carlink 上的 Apple Music</figcaption></figure><p>但不清楚是什么原因，Carlink 的操作经常会出现掉帧、反应缓慢的问题，流畅度存在明显短板。</p><p>&nbsp;</p><h2>结论：满足核心需求，但并非换机动力​</h2><p>经过初步的体验，领克07 上 CarPlay 的表现符合我对它的核心预期：​简洁、流畅，满足我的基本需求 —— Apple Music 与车道级导航。并且对老设备依旧友好，数年前的 iPhone 8 依然能稳定运行，这值得称赞。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/76b069508857975265364c71d678af45.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>但它的“简洁”，在某种程度上也是“限制”。国产的 Carlink 在界面适配、应用丰富度和设置灵活性方面展现出强大竞争力。同时，早前的 CarPlay 并未适配车里的“大号平板”，界面会出现大面积的留白，观感上不够协调，列表式的信息展示与触控交互，在效率上不及网格布局。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/19c11396842b3287ad6e6b9462edd2c8.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 上的地图导航界面</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/06/61a4341ee4fd23b219def9ec0111b326.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CarPlay 上的 Apple Music</figcaption></figure><p>这套体验目前而言，​还不足以吸引我升级到新款 iPhone。它提供了足够好的“车机投屏”基础体验。但今年的 CarPlay 26，引入了 Liquid Glass 设计风格与应用模板，让界面更通透，带来了明显的质感提升，这些改进已显露出苹果对车载生态的持续打磨，或许在未来，CarPlay 的使用体验能追上或媲美 Flyme Auto。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101622</id>
            <title>树莓派家庭服务器，上篇：系统的安装与配置</title>
            <link>https://sspai.com/post/101622</link>
            <guid isPermaLink="false">https://sspai.com/post/101622</guid>
            <pubDate></pubDate>
            <updated>Tue, 05 Aug 2025 14:57:28 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 树莓派, Rocky Linux, NAS, Cockpit

总结: 作者分享在树莓派4B上安装Rocky Linux系统并将其配置为小型NAS服务器的经验。文章详细介绍了系统选择、安装流程、初始化配置（包括存储扩展、软件源设置、CPU频率问题修复、用户管理）、系统精简等步骤。重点讲解了通过Cockpit管理面板实现文件共享和系统管理，以及使用Docker容器部署服务的方法。作者最终在Rocky Linux上实现了图形化系统管理和容器管理，虽然相比专业NAS系统稍显复杂，但提供了更高的自由度。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;"><strong>Matrix 首页推荐</strong>&nbsp;</p><p style="margin-left: 0px;"><a href="https://sspai.com/matrix">Matrix</a>&nbsp;是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&nbsp;<br />文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><hr /><h2>前言</h2><p>我有两个树莓派 4B，其中一个我当作了一个电视盒子，具体可以看我之前的<a href="https://sspai.com/post/96764">文章</a>。不过我买树莓派最初的目的，是想将它作为一个小型服务器，在挂载硬盘后进行文件共享，并在后台运行下载器进行 BT 下载，所以另外一个树莓派就被委以了这项重任。</p><p>对于如何将树莓派作为一个小型服务器，我尝试过很多方案。关于系统选择与配置，容器的使用，以及软件的选择，我想我最近终于找到了一个比较满意的答案。虽然不敢说这是个正经的 NAS，但却多少算是手搓了个 NAS 系统吧。</p><h2>系统的选择</h2><p>在树莓派上可用的 NAS 系统不多，我知道的只有 <a href="https://www.openmediavault.org/">openmediavault</a>，我在很久之前安装过一次，感觉不太好用。因为我还是有一点 Linux 的使用经验的，所以在很多时候，成品 NAS 系统的图形化界面对我来说反而是累赘，很多时候进行一些高级配置还是没有直接用终端方便，而且还占用了很多资源。因此我一直以来都是直接用普通的 Linux 发行版，在上面手动配置 smb 文件共享与其他服务。我一直以来都比较习惯在服务器上用 Debian 系的发行版，而且树莓派官方的 Raspberry Pi OS 就是基于 Debian 的，自然 Raspberry Pi OS 就是我最常用的系统，虽然期间我也尝试其他的系统，比如 Ubuntu，甚至是 Manjaro，但是最终都又回到了 Raspberry Pi OS。</p><p>不过一直以来 Raspberry Pi OS 都有一个问题困扰我，就是这个系统偏向于教学用途和作为玩具折腾，对于服务器用途，稳定性和软件维护还是有点欠佳，我有点馋红帽系发行版每个大版本五年的软件更新和十年的安全更新，所以就在最近，我尝试着把我正在运行的云服务器，以及树莓派，都换成红帽系的发行版。</p><p>目前比较推荐使用的红帽系的发行版有 <a href="https://almalinux.org/">AlmaLinux</a> 和 <a href="https://rockylinux.org/">Rocky Linux</a>。在红帽改变 CentOS 的定位让其「名存实亡」以及决定不公开 RHEL 源码后，红帽下游的发行版进入过短暂的六神无主的状态，因为这些发行版最初的目的是要达到与 RHEL 百分百兼容，AlmaLinux 和 Rocky Linux 对此的解决方案不完全相同：AlmaLinux 项目不再追求与 RHEL 百分百兼容，而只是做到二进制兼容，也就是说任意为 RHEL 开发的软件都可以在 AlmaLinux 上运行，但不一定会产生相同的 bug；而 Rocky Linux 则是设法绕过了红帽的限制，从其他渠道获取到了 RHEL 的源码，尽量做到与 RHEL 百分百兼容。对于普通的用户，两个发行版用起来大概率几乎没有区别，不过 AlmaLinux 能更快跟进上游的更新，Rocky Linux 则会迟一些。另外 AlmaLinux 还提供了一个<a href="https://wiki.almalinux.org/migration/">迁移工具</a>，可以从旧的 AlmaLinux 升级到新版本，也可以从其他的红帽系发行版迁移到 AlmaLinux，而 Rocky Linux 目前<a href="https://docs.rockylinux.org/release_notes/10_0/#upgrading-to-rocky-linux-10">不支持版本迁移</a>。我个人比较倾向选择 Alma Linux，我的其他云服务器目前也都迁移到了 Alma Linux。</p><p>不过我在树莓派上最终还是安装了 Rocky Linux，在我最初安装时，虽然 AlmaLinux 和 Rocky Linux 都已经跟进上游推出了 V10 大版本，但 AlmaLinux 在官网上依然没有适用于树莓派的 V10 版本安装镜像可供下载，而 Rocy Linux 10 已经有了树莓派安装镜像。不过在我写这篇文章时，我发现 Rocky Linux 官网的树莓派安装镜像下载选项也消失了，不知道什么原因😂。</p><p>（后来我又在 Rocky Linux 的官方论坛里发帖询问了这件事，社区管理员说会「修复」这个问题，现在在官网应该可以直接下载树莓派的镜像了）</p><h2>系统的下载与安装</h2><p>如果想要更快的下载速度，可以去国内镜像站下载系统镜像，比如从中国科学技术大学开源软件镜像站<a href="https://mirrors.ustc.edu.cn/rocky/10/images/aarch64/Rocky-10-SBC-RaspberryPi.latest.aarch64.raw.xz">下载</a>，我对比过校验值，和我之前在 Rocky Linux 官网下载到的镜像是完全一样的。</p><p>系统的安装就很简单了，使用刷写工具，比如 <a href="https://etcher.balena.io/">balenaEtcher</a> 或是树莓派官方的 <a href="https://github.com/raspberrypi/rpi-imager">Raspberry Pi Imager</a>，将镜像刷写入 SD 卡中，然后将其插入树莓派中，插电启动即可。</p><p>这个系统镜像默认会启用 ssh 服务，插上网线就可以直接用 ssh 远程登入了，默认的用户名和密码分别是 rocky/rockylinux，登入以后，就可以对系统做一系列配置了。</p><h2>一些初始化配置</h2><h3>扩展存储空间</h3><p>这个系统镜像默认没有使用全部的 SD 卡空间，想要使系统使用全部的存储空间，只需运行 <code>sudo rootfs-expand</code> 就可以自动扩展空间了。</p><h3>配置软件源</h3><p>Rocky Linux 默认的软件源会根据当前的网络位置自动选择最近的镜像站，所以一般情况下无需换源也能有比较快的软件下载速度，而且红帽系的软件源配置文件改起来比较麻烦，所以我就没有换源。</p><p>首先进行系统更新：</p><pre class="language-shell"><code>sudo dnf update
# 或
sudo dnf upgrade</code></pre><p>其实现在红帽系的 dnf 包管理器已经把 <code>dnf update</code> alias 到了 <code>dnf upgrade</code>，所以上面两个命令其实是一样的，都是更新软件源并更新系统，随便选一个就行。更新完最好重启一下。</p><p>之后添加 EPEL 软件源，这是一个适用于红帽系发行版的第三方软件源，包含了很多常用但官方软件源没有的软件包：</p><pre class="language-shell"><code># 添加软件源
sudo dnf install epel-release
# EPEL 的很多软件依赖官方的 crb 软件源，所以需要启用这个软件源
sudo /usr/bin/crb enable</code></pre><p>EPEL 默认的软件源在国内是挺慢的，所以这次需要换源了，以北京外国语大学开源软件镜像站<a href="https://mirrors.bfsu.edu.cn/help/epel/">为例</a>：</p><pre class="language-shell"><code>sudo sed -e 's!^metalink=!#metalink=!g' \
    -e 's!^#baseurl=!baseurl=!g' \
    -e 's!https\?://download\.fedoraproject\.org/pub/epel!https://mirrors.bfsu.edu.cn/epel!g' \
    -e 's!https\?://download\.example/pub/epel!https://mirrors.bfsu.edu.cn/epel!g' \
    -i /etc/yum.repos.d/epel{,-testing}.repo</code></pre><p>之后再次运行 <code>sudo dnf update</code> 更新一次即可。</p><h3>问题修复</h3><p>这个 Rocky Linux 镜像目前存在一个问题，就是会让树莓派的 CPU 默认运行在省电模式，这个模式下 CPU 的频率会一直处在 600MHz，无法上升到更高的频率。要验证这个问题是否存在，可以安装 <code>stress</code> 和 <code>btop</code> 两个软件包，stress 用来给 CPU 进行压力测试，而 btop 可以用来实时监控 CPU 频率。打开两个 ssh 窗口连接到树莓派，一个窗口运行 btop，默认布局下会在右上角显示目前的 CPU 频率，另一个窗口运行 <code>stress -c 4 -t 60</code>，表示运行一个持续时间 60 秒、4 个线程的 CPU 压力测试，如果 CPU 的频率一直是 600MHz，就说明树莓派是运行在省电模式下的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/f138a04ed8c6b06743f2ac3447b4ead4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>参考官方论坛中的这个<a href="https://forums.rockylinux.org/t/powersave-mode-is-still-default-in-rl10-for-raspberry-pi/18858">帖子</a>，解决方法也比较简单，首先安装 <code>kernel-tools</code> 软件包，之后创建一个新的 systemd 服务文件 <code>/etc/systemd/system/cpupower.service</code>：</p><pre class="language-ini"><code>[Unit]
Description=Configure CPU power related settings
After=syslog.target

[Service]
Type=oneshot
RemainAfterExit=yes
EnvironmentFile=/etc/sysconfig/cpupower
ExecStart=/usr/bin/cpupower $CPUPOWER_START_OPTS
ExecStop=/usr/bin/cpupower $CPUPOWER_STOP_OPTS

[Install]
WantedBy=multi-user.target</code></pre><p>之后启用服务：</p><pre class="language-shell"><code>sudo systemctl daemon-reload
sudo systemctl enable --now cpupower.service</code></pre><p>然后再次运行一次压力测试，正常没有超过频的树莓派 4B CPU 频率是可以达到 1.5GHz 的，如果在压力测试时频率上升到 1.5GHz，压力测试停止后又回落到 600MHz，就说明问题已经解决了。</p><h3>用户配置</h3><p>首先要修改默认密码，这个很简单，运行 <code>passwd</code>，按提示输入旧密码然后输入两次新密码即可，输密码的时候不会显示，这些都是 Linux 用户习以为常的了，不必多说。</p><p>不过这个系统默认的用户名是 rocky，我有点不太习惯，用久了 Raspberry Pi OS 后，我还是习惯用户名是 pi，其实我大可以新添加一个名为 pi 的用户，但是这样的话，新的用户和用户组的 id 就不是最常用的 1000 了，这让强迫症有些难受。</p><p>其实也是有办法把现有的用户改名的，不过 Linux 系统不允许修改目前正在使用的用户，所以在改名之前，需要以 root 用户登陆，修改 <code>/etc/ssh/sshd_config</code>，在最后添加一行 <code>PermitRootLogin yes</code> 以允许 root 用户登陆 ssh，之后运行 <code>sudo systemctl restart sshd</code> 重启 ssh 服务，然后运行 <code>sudo passwd root</code> 为 root 用户设置一个密码，之后便可以退出当前账户的登陆，然后重新以 root 用户登陆，在以 root 用户登陆的情况下，运行：</p><pre class="language-shell"><code># 把用户名 rocky 改为 pi
usermod -l pi rocky
# 把用户组也改名成 pi
groupmod -n pi rocky
# 把用户 pi 的家目录改为 /home/pi
usermod -d /home/pi -m pi</code></pre><p>之后便可以重新以用户 pi 登陆到树莓派的系统了。为了安全起见，最好把之前在 <code>/etc/ssh/sshd_config</code> 所做的修改复原并重启 ssh 服务以禁止 root 登陆，然后运行 <code>sudo passwd -l root</code> 锁定 root 用户。</p><h3>语言、时区与时间同步</h3><p>这个系统镜像默认语言是英语，可以根据自己的需要修改为中文，运行 <code>localectl</code> 可以查看当前使用的语言，运行 <code>locale -a</code> 可以列出当前可用的所有语言，运行 <code>sudo localectl set-locale LANG=zh_CN.UTF-8</code> 可以把语言设置成中文。</p><p>运行 <code>timedatectl</code> 可以查看当前使用的时区，系统默认使用的是 UTC 时区，要想修改时区，运行 <code>timedatectl list-timezones</code> 可以查看当前所有可用的时区，然后运行 <code>sudo timedatectl set-timezone Asia/Shanghai</code> 可以将时区修改为上海，其实就是中国的时区，因为绝大多数 Linux 发行版都以上海作为中国的时区。</p><p>Rocky Linux 默认使用 chrony 作为时间同步服务，并且默认使用的 ntp 服务器位于国外，可能导致时间同步失败，因为树莓派 4B 没有硬件时钟，所以时间同步失败就会很麻烦。我们可以将默认 ntp 服务器修改为国内可用的 ntp 服务器，编辑 <code>/etc/chrony.conf</code>，在文件开头找到这样一行：</p><pre class="language-"><code>pool 2.rocky.pool.ntp.org iburst</code></pre><p>修改为：</p><pre class="language-"><code>pool ntp.aliyun.com iburst</code></pre><p>其实就是把 ntp 服务器修改为了阿里云的公共 ntp 服务器，为了万无一失，还可以把服务器的 ip 填入 hosts 文件里，防止 DNS 解析出错，编辑 <code>/etc/hosts</code>，添加一行：</p><pre class="language-"><code>203.107.6.88 ntp.aliyun.com</code></pre><h3>系统精简</h3><p>这个系统镜像其实默认就已经很精简了，但还是有一些我用不到且占用资源的组件。首先我卸载了防火墙软件 firewalld 和 wifi 管理软件 wpa_supplicant。因为这个树莓派只运行在内网，我不打算将其开放到公网，所以防火墙可有可无，而且 firewalld 还挺占资源的；另外我是只打算用网线连接路由器，用不到无线网络，所以 wpa_supplicant 也不需要。</p><pre class="language-shell"><code>sudo dnf remove firewalld wpa_supplicant</code></pre><p>接着是 SELinux，这是一个由红帽开发的 Linux 安全组件，可以阻止一些高危操作。Rocky Linux 自带了 SELinux 而且默认运行在严格模式，这个模式下很多操作都会被拒绝，比如开放非常规端口什么的，并且 SELinux 在后台运行也会消耗一定资源。因为我明确知道我在做什么，所以我打算禁用 SELinux，SELinux 牵扯到很多系统组件，没法直接卸载，但可以通过配置文件禁用它，编辑 <code>/etc/selinux/config</code>，找到 <code>SELINUX=enforcing</code> 改成 <code>SELINUX=disabled</code>，重启系统之后，运行 <code>sestatus</code>，就可以看到 SELinux 已经被禁用了。</p><p>如果不想禁用 SELinux，可以在配置文件里把 SELinux 的模式改成 permissive 宽容模式，或是手动添加允许规则，至于如何添加规则，这就不是本文探讨的内容了，而且我也不懂🤣，具体可以看 SELinux 的<a href="https://github.com/SELinuxProject/selinux-notebook">官方文档</a>。</p><h2>安装并配置管理面板</h2><p>对于如何配置 smb 文件共享以及后续的系统维护，其实我可以直接从终端配置，但太麻烦了，为了一劳永逸，我打算安装 <a href="https://cockpit-project.org/">Cockpit</a>，这是一个可以用来管理 Linux 系统的网页面板，并且能通过安装插件来扩展功能，十分好用。实际上，国外知名的企业级 NAS 定制厂商 <a href="https://www.45drives.com/">45Drives</a> 所使用的 NAS 系统就是 Rocky Linux 8 加上一个定制的 Cockpit 网页面板，并且 45Drives 把相关的项目都在 github 上<a href="https://github.com/45Drives/">开源</a>了出来，我这次就用到了一些 45Drives 开发的 Cockpit 插件。</p><h3>安装并配置 Cockpit 本体：</h3><p>运行：</p><pre class="language-shell"><code># 安装 Cockpit 软件包
sudo dnf install cockpit
# 启用 Cockpit
sudo systemctl enable cockpit.socket --now</code></pre><p>要注意启用的是套接字 socket 而不是服务 service，因为 Cockpit 自带的 systemd 服务文件无法直接启用，而且启用套接字有一点好处，就是他不会在开机时就开始运行，而是只在需要的时候才会开始运行，这会提升一点开机速度，并且节省一点资源。</p><p>然后在同一局域网下的另一台电脑浏览器中输入树莓派的 ip 加上端口 9090，就可以打开 Cockpit 后台了，因为使用了自签证书，浏览器会提示不安全，不用管选择继续访问就行，登陆的用户名和密码就是系统的用户名和密码。登入后会默认处于限制访问模式，无法进行一些高级操作，需要点击主页的「Turn on administrative access」，再输入一次密码后，才能打开管理员模式。这时就可以进行一些基本的系统管理了，比如软件更新和修改网络，还可以在浏览器中打开终端。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/1dbd0e5229580ba6d28609fce5756557.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>挂载并管理外接硬盘</h3><p>要想在 Cockpit 中挂载外置硬盘，可以安装 cockpit-storaged 插件：</p><pre class="language-shell"><code>sudo dnf install cockpit-storaged</code></pre><p>安装完成后刷新 Cockpit 网页，就可以在左边的侧栏上看到有个「存储」选项了，在这里可以看到连接的外置硬盘，可以对其格式化和挂载。可以看到我的硬盘识别为了 sda，并且挂载到了 <code>/mnt/share</code>，只需手动挂载一次，之后每次系统启动都会自动挂载了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/38061741b7eda19182aa108044c3bd8b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>要想修改挂载目录的访问权限，可以安装 cockpit-files 插件：</p><pre class="language-shell"><code>sudo dnf install cockpit-files</code></pre><p>刷新之后就可以在看到「文件浏览器」选项了，浏览到 <code>/mnt</code> 目录，单击选择挂载到的 <code>share</code> 目录，点击右上角三个点，选择编辑权限，把所有者和所有组都改成 pi，点击下方的「Change permissions for enclosed files」修改所有子目录的权限。之后这个目录就可以用普通用户访问并编辑了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/757e289c72e407e233189b47df2816c3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>文件共享</h3><p>要想在 Cockpit 中配置文件共享，可以用 45Drives 的 <a href="https://github.com/45Drives/cockpit-file-sharing">cockpit-file-sharing</a> 插件，另外还推荐安装 <a href="https://github.com/45drives/cockpit-identities">cockpit-identities</a> 来管理 smb 的密码。因为 45Drives 的插件是针对 Rocky Linux 8 版本开发的，README 里面的自动安装方式也只适用于 Rocky Linux 8，对于更新的 Rocky Linux 版本，只能手动安装了，需要从 Releases 下载最新版本的 rpm 文件，然后手动安装。</p><p>可能因为版本问题 cockpit-file-sharing 在安装时依赖没有装全，少了 samba 软件包，所以还要手动装一下 samba：</p><pre class="language-shell"><code>sudo dnf install samba</code></pre><p>刷新后就可以在 Cockpit 里看见「File Sharing」和「Identities」两个选项了。第一次打开 File Sharing 可能会提示「Samba is Misconfigured」，点下方的「Fix now」让它自动修复即可。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/dc9a4549cec5cacf889944bce6b8594c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这个插件可以配置 Samba 和 NFS 共享。Samba 共享这里，在下面的「Share Configuration」这里添加新的共享，填上共享的名字、共享的目录，下面的选项基本保持默认就好，点击「Apply」就算是配置好了。NFS 共享就更简单了，添加共享，填上共享的目录和需要的 ip 就可以了，我这里只给我的笔记本电脑（设置了静态 ip 192.168.0.106）开放了 NFS 共享，局域网内其他设备是无法访问的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/9d1c316432638cebf3e1ce52b52e73be.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>在 Linux 下 Samba 的密码和用户密码是分开存储的，需要单独设置，点击「Identities」选项，选择「Users」，选择自己当前的用户，翻到下面，点击「Change Samba Password」，在这里输入密码即可。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/dda107b7a546e1a1843e7dd23ef9eeb3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这时其实还无法访问共享的文件，因为 Samba 和 NFS 服务还没有启用，在 Cockpit 的「服务」选项卡里，搜索并找到 smb 服务，将其启用，同样的方法，搜索并找到 nfs-server 将其启用，如果想要局域网内的其他电脑自动发现 smb 共享，也可以选择启用 avahi-daemon 服务。这时文件共享就算是配置好了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/0c696ba8341424bee0aaff2c48b3a605.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>其他 Cockpit 插件</h3><p>Cockpit 还有很多有用的插件，比如 <a href="https://github.com/45Drives/cockpit-zfs-manager">cockpit-zfs-manager</a> 用来创建并管理 ZFS 阵列，和 <a href="https://github.com/cockpit-project/cockpit-machines">cockpit-machines</a> 可以用来创建并管理虚拟机。可以在<a href="https://cockpit-project.org/applications.html">这里</a>查看 Cockpit 所有可用的插件。</p><p>另外 45Drives 目前正在开发新的 <a href="https://github.com/45Drives/cockpit-zfs">cockpit-zfs</a> 插件，用来代替旧的 zfs manager 插件，不过目前还在早期开发阶段，感兴趣的可以关注下。</p><h2>容器管理</h2><p>除了文件共享，我常用的大部分服务都是用容器部署的，在 Docker 之外还有很多容器化解决方案，比较值得一提的就是 Podman，而且 Podman 也是红帽主导开发的，号称完全兼容 Docker，并且有很多 Docker 没有的特色功能，比如以普通用户权限运行容器、Quadlet 可以用 systemd 管理容器服务等等，并且 Cockpit 也有一个 Podman 插件，可以将容器管理一同集成到 Cockpit 面板里面。</p><p>不过我实际用下来觉得 Podman 还是没有 Docker 好用，Quadlet 配置文件写起来实在没有 compose 配置文件简单易上手，想要让多个容器互联也非常麻烦。虽然可以通过安装 podman-compose 来兼容 compose 文件，但仍然存在很多奇奇怪怪的兼容性问题。所以最终我还是决定用 Docker。</p><h3>安装 Docker</h3><p>我最初是参照着 Docker 官方的 <a href="https://docs.docker.com/engine/install/rhel/">RHEL</a> 安装文档，但是发现 Docker 的软件源目前似乎还没有 RHEL 10 的版本，所以会安装失败。需要参照 <a href="https://docs.docker.com/engine/install/centos/">CentOS</a> 的文档：</p><pre class="language-shell"><code># 安装 dnf-plugins-core 用来管理软件源
sudo dnf -y install dnf-plugins-core
# 添加 Docker 软件源
sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
# 换源
sudo sed -i 's+https://download.docker.com+https://mirrors.bfsu.edu.cn/docker-ce+' /etc/yum.repos.d/docker-ce.repo

# Docker 依赖 iptables，可以首先安装 nftables 提供的 iptables 实现，以防止安装到旧的 iptables
sudo dnf install nftables iptables-nft

# 安装 Docker
sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# 启用 Docker 服务
sudo systemctl enable docker.service --now

# 将当前用户加入 docker 用户组，后续运行 docker 命令无需使用 sudo
sudo groupadd docker
sudo usermod -aG docker $USER</code></pre><h3>容器管理</h3><p>Cockpit 有一个 <a href="https://github.com/Xantios/cockpit-docker">Docker 插件</a>，但已经很久没有更新了，不过好在 Docker 的生态很丰富，有很多适用于 Docker 的网页管理面板，最知名的当属 <a href="https://www.portainer.io/">Portainer</a> 了，不过 Portainer 的用法对我来说太复杂了，而且我也用不到它的很多高级功能。就在最近我发现了一个比较新的项目：<a href="https://dockge.kuma.pet/">Dockge</a>，这是一个十分简单但好用的 Docker compose 管理工具，因为我所有的容器服务都是通过 Docker compose 部署的，所以它完美地解决了我的痛点。Dockge 的作者另一个更加知名的项目是 <a href="https://uptime.kuma.pet/">Uptime Kuma</a>，所以不用担心它的开发质量，另外它的界面也会和 Uptime Kuma 有点像。</p><p>Dockge 是需要通过 Docker compose 的方式安装的，去到 Dockge 的官网，可以自动生成所需的 compose 文件，只需要填上自己打算存放 compose 文件的目录以及想要开放的端口，就能自动生成可用的 compose 文件内容了。这里我打算将 compose 文件存放在家目录的 containers 文件夹里，也就是 <code>/home/pi/containers</code>，端口保持默认 5001。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/6bed6698f1e3b5e96108080ec2e94ec8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>然后回到终端：</p><pre class="language-shell"><code># 创建并进入必要文件夹
mkdir -p /home/pi/containers/dockge
cd /home/pi/containers/dockge

# 下载 compose 文件
curl "https://dockge.kuma.pet/compose.yaml?port=5001&amp;stacksPath=%2Fhome%2Fpi%2Fcontainer" --output compose.yaml

# 启动
docker compose up -d</code></pre><p>如果想要在 Dockge 网页面板里运行终端命令，还需要在 compose 文件里添加一个环境变量 <code>DOCKGE_ENABLE_CONSOLE=true</code>，我的 compose 文件是这样的：</p><pre class="language-yaml"><code>services:
  dockge:
    image: louislam/dockge:1
    container_name: dockge
    mem_limit: 256mb
    restart: unless-stopped
    ports:
      - 5001:5001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data:/app/data
      - /home/pi/containers:/home/pi/containers
    environment:
      # Tell Dockge where to find the stacks
      - DOCKGE_STACKS_DIR=/home/pi/containers
      - DOCKGE_ENABLE_CONSOLE=true</code></pre><p>其中我还添加了 <code>mem_limit: 256mb</code> 来限制容器可用的内存大小，因为我的树莓派只有 2G 内存，后期运行的服务多了内存可能会不够用，所以需要限制一下，256mb 也完全够 Dockge 运行了。</p><p>不过树莓派上的 Rocky Linux 默认是不支持为容器添加内存限制的，所以上面的选项默认会被忽略，要想使内存限制生效，需要添加一个内核参数，编辑 <code>/boot/efi/cmdline.txt</code>，应该只有一行内容，在行末添加一个 <code>cgroup_enable=memory</code>，不要另起一行，还要和前面的内容间隔一个空格。修改完后重启，容器的内存限制应该就能生效了。</p><p>Dockge 部署完成后，在同一局域网下的另一台电脑浏览器中输入树莓派的 ip 加端口 5001，就可以打开 Dockge 的管理面板了，第一次打开需要设置用户名和密码。</p><p>使用 Dockge 可以非常直观地编辑容器常用的的运行选项，开放端口、文件系统映射以及环境变量等都可以在这里编辑，对于不支持的运行选项，也可以直接编辑右侧的 compose 文件。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/7a4b9ec6c855a151e3feb3c734d016c6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>如果实在不知道如何编辑 compose 文件，Dockge 甚至还支持将 docker cli 命令直接转换成 compose 文件。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/d079bb52c824f0411baf1a218beca513.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>另外，Dockge 会把已经添加的 compose 文件整齐地放在各自的文件夹里原样保存，这意味着我们仍然可以用其他编辑器编辑 compose 文件，也可以很容易地将之前的的 docker-compose 项目导入 Dockge，只需按照每个 compose 文件都放在单独的文件夹的规则，将已有的 compose 文件放到 Dockge 保存文件的目录（在我这里就是 <code>/home/pi/containers</code>），Dockge 就能够自动识别并导入。</p><h2>总结</h2><p>因为篇幅原因，本篇只介绍了我在树莓派 4B 上安装并配置系统的过程，在 Rocky Linux 上，通过安装 Cockpit 和 Dockge 可以实现比较方便的图形化系统管理的容器管理，虽然相比正经的 NAS 系统易用性还是差一些，但对于有一定 Linux 运维知识的人来说有更高的自由度。</p><p>我之后可能会再写一篇文章，介绍一下我当前部署的容器服务，以及具体的配置方法。</p><p style="margin-left: 0px;">&gt; 关注&nbsp;<a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank">少数派小红书</a>，感受精彩数字生活 🍃</p><p style="margin-left: 0px;">&gt; 实用、好用的 <a href="https://sspai.com/mall">正版软件</a>，少数派为你呈现 🚀</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101614</id>
            <title>Subtitle Edit：开源字幕处理神器</title>
            <link>https://sspai.com/post/101614</link>
            <guid isPermaLink="false">https://sspai.com/post/101614</guid>
            <pubDate></pubDate>
            <updated>Tue, 05 Aug 2025 10:55:00 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 字幕提取, Subtitle Edit, OCR识别, 字幕翻译  
<br>  
<br>  
总结: 本文介绍了使用Subtitle Edit工具提取视频内嵌字幕的步骤，包括打开视频文件、选择字幕轨道、OCR识别（适用于图像字幕）以及保存为所需格式。Subtitle Edit是一款功能强大的开源字幕编辑器，支持多种视频与字幕格式，并提供OCR字符识别、语音转写、时间轴同步等功能。此外，它还具备字幕翻译、同步修正、格式批处理等扩展能力。文章还澄清了常见误区，如MKVToolNix和HandBrake无法直接导出文本字幕。 </div>
                        <hr>
                    
                    <blockquote><p>今天在听中岛美雪的演唱会时，发现视频里内置了字幕。相比我之前用 Whisper 转写出来的版本，原生字幕肯定要准确得多。于是我开始找工具，希望能把这些内嵌字幕提取出来。试了好几款之后，最终脱颖而出的是 —— Subtitle Edit。</p></blockquote><p><a href="https://www.nikse.dk/">Subtitle Edit</a> 是一款功能强大的开源字幕编辑器，适用于字幕的提取、编辑、格式转换与翻译等多种场景。它支持多种视频与字幕格式，并内置 OCR 字符识别、语音转写、时间轴同步等实用功能。</p><p>最新版可在 <a href="https://github.com/SubtitleEdit/subtitleedit/releases">GitHub 发布页</a> 获取，或通过 <a href="https://wwva.lanzouq.com/i1mrz32pycbi">国内镜像</a> 下载。支持 Windows，部分 Linux 系统可通过 Mono 兼容运行。</p><h2>字幕提取</h2><h3>1. 打开视频文件</h3><p>启动软件后，点击菜单栏的“文件”（File） -&gt; “打开”（Open），选择你想提取字幕的视频文件。</p><h3>2. 选择字幕轨道</h3><p>如果视频中包含多个字幕轨道，Subtitle Edit 会弹出窗口供你选择需要提取的那一条。</p><h3>3. （可选）进行 OCR 识别（适用于图像字幕）</h3><p>若视频字幕为图像格式（如 DVD 的 VobSub 或蓝光的 PGS 字幕），软件会提示你进行“光学字符识别”（OCR）。此时建议选择 Paddle OCR 引擎，并根据字幕语言进行设置。点击「开始 OCR」后进行识别，完成后点击右侧的「确定」按钮。</p><blockquote><p>🚀 <strong>小提示</strong>：对于中文、日文等非拉丁字符，Paddle OCR 的识别效果明显优于 Tesseract 等传统引擎；后者更适用于英文字幕。</p></blockquote><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/article/9a6bd91dd2525900bb972aba0506beb1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>4. 保存为所需格式</h3><p>字幕提取后，你可以在主界面中查看字幕文本与对应的时间轴。点击“文件”（File） -&gt; “另存为”（Save as），在保存类型中选择所需格式。</p><h2>其他功能</h2><p>除了基础的字幕提取功能，Subtitle Edit 还提供了丰富的扩展能力，适用于更复杂的字幕编辑与翻译需求。</p><h3>语音转写</h3><p>当视频中没有字幕轨道时，可以通过“工具”（Tools） -&gt; “语音识别”（Audio to text）自动生成字幕。Subtitle Edit 支持多种识别引擎：</p><ul><li><strong>Whisper</strong>（推荐，效果最优，支持多语言识别）</li><li><strong>Vosk</strong>（轻量级本地模型，适合资源受限环境）</li></ul><p>用户可选择语言或启用自动识别，支持断点恢复、每句字幕自动分段等配置。</p><h3>字幕翻译功能</h3><p>在已有字幕的基础上，Subtitle Edit 支持一键翻译所有字幕内容，可通过“翻译”菜单调用主流翻译引擎，如：Google Translate、DeepL、Yandex 等。你还可以选择手动逐句翻译，适合需要逐句优化语序的场景。</p><blockquote><p>如果你需要批量的字幕翻译体验或使用ai翻译字幕，可以使用我开源的 <a href="https://tools.newzone.top/zh/subtitle-translator">Subtitle Translator 工具</a>。<br />该工具支持批量上传字幕，调用多个翻译 API，并可选择中英对照、断句模式、自定义输出格式等，适合字幕组、译者和内容创作者使用。</p></blockquote><h3>字幕同步与修正</h3><p>Subtitle Edit 提供多种对齐和修正工具，帮助字幕更精确地贴合音视频内容：</p><ul><li>自动根据音频波形对齐字幕时间</li><li>快速统一字幕偏移（正向或负向延迟）</li><li>修改帧率（用于从不同源转换视频）</li><li>检测并修复字幕重叠、间隔过短、过长等问题</li></ul><h3>字幕格式批处理</h3><ul><li>支持常见字幕格式互转：如 <code>.srt</code>、<code>.ass</code>、<code>.sub</code>、<code>.vtt</code> 等</li><li>支持 UTF-8、ANSI、Unicode 等多种编码转换</li><li>提供批量文本替换、去空字幕行、规范化字幕格式等自动化操作</li></ul><h3>精修同步字幕</h3><p>可切换为“波形图”或“频谱图”视图，辅助进行精确的起止时间调整。非常适合精修口型同步字幕或歌词字幕。</p><h2>常见误区说明</h2><ul><li><strong>MKVToolNix 并不能直接导出文本字幕</strong>：尽管有些 AI 推荐该工具提取 MKV 字幕，但实际上它输出的是 <code>.mks</code> 格式（容器文件），而非可读的字幕文本。</li><li><strong>HandBrake 不支持字幕提取</strong>：该工具适用于视频转码与压制，但无法直接提取字幕。</li></ul>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/101599</id>
            <title>做了近视手术1年后，想和你分享的事</title>
            <link>https://sspai.com/post/101599</link>
            <guid isPermaLink="false">https://sspai.com/post/101599</guid>
            <pubDate></pubDate>
            <updated>Tue, 05 Aug 2025 08:48:09 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 近视, 眼镜, 屈光手术, 术后康复

<br>
<br>
总结: 1. 近视在古代已有记载，眼镜在元明时期传入中国，曾是奢侈品。2. 现代中国青少年近视率极高，眼镜可能成为全民必需品。3. 屈光手术通过改变角膜曲率矫正视力，与眼镜原理相同。4. 主流手术方式包括全激光、半飞秒和飞秒，需根据个人情况选择。5. 术前检查至关重要，确保手术安全性和个性化设计。6. 手术过程快速安全，但术后需注意康复和可能的并发症。7. 并发症如干眼症和眩光风险较低，但需遵医嘱护理。8. 手术需谨慎选择，非必要不做，保护眼睛健康最重要。 </div>
                        <hr>
                    
                    <p>近视自古就有。<br />像欧阳修在《归田录》自述「读书甚艰，惟使人读而听之」。晚年需侍从诵读文书，疑似高度近视+老花。而同时代的司马光编修《资治通鉴》时需贴纸辨字。<br />而改善视力的眼镜在13~14世纪左右在欧洲出现，元明时期传入中国。<br />作为高度近视患者，雍正更是眼镜的大收藏家。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/5483b2dadeb932f286525498e8b8a0e5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>雍正戴眼镜照（合成）</figcaption></figure><p><br />造办处专门为雍正制作各式眼镜，任性的雍正皇帝还动不动就赏赐有功之臣眼镜一副！可见当时眼镜属于「奢侈品」。</p><figure class="image ss-img-wrapper image_resized" style="width: 502px;"><img src="https://cdnfile.sspai.com/2025/08/05/1640e70ca15d3e7416ee2385d25193d8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>白铜玳瑁眼镜「清」</figcaption></figure><figure class="image ss-img-wrapper image_resized" style="width: 508px;"><img src="https://cdnfile.sspai.com/2025/08/05/ea6ffa8db4b819541fcb434151ef8cfc.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>茶色水晶眼镜「清代」</figcaption></figure><p>近视在古代属于「富贵病」，而如今中国儿童青少年总体近视率高达52.7%（2020年），高中生近视率达到了恐怖的80.5%。</p><p>照这个趋势发展，以后眼镜要「全民佩戴」了。</p><p>除了戴眼镜，解决近视的另外一种途径就是做<strong>屈光手术</strong>。</p><p>去年狠心跺脚决定做了人生第一台手术：全激光近视手术。 &nbsp;</p><p>对近视手术听的比较多应该是飞秒激光手术。</p><p><strong>奉劝大家一句，如果你的眼睛条件符合，能做飞秒就不要选择全激光，因为它太疼了！</strong></p><p>前3天基本上都要带着眼罩，3个小时滴一次眼药水，太疼就吃止疼片，角膜3天就差不多自动愈合了，眼睛就逐渐清楚了，再带半年墨镜…… &nbsp; &nbsp;</p><h2>屈光手术的目的是改变角膜曲率 &nbsp;</h2><p>屈光手术和戴眼镜的原理一样。</p><p>都是通过直接或间接改变角膜的曲率，让眼睛达到正常视力，戴眼镜是从外部改变，而手术是直接在眼睛内做功。 &nbsp;&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 566px;"><img src="https://cdnfile.sspai.com/2025/08/05/450ce45d9b2b225778f352679e5cc0a1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>屈光不正在眼球中的成像原理</figcaption></figure><p>角膜和晶状体是影响屈光能力的，角膜是眼球前部的透明、弧形组织，是光线进入眼内的第一道介质。它承担了眼睛大部分的屈光力（约占70%），其曲率直接影响光线的折射程度。<strong>屈光手术的原理就是通过改变角膜的形状，改变角膜曲率。</strong> &nbsp;&nbsp;</p><p>正常视力下， 光线经过角膜和晶状体的折射后，准确聚焦在视网膜上，形成清晰的图像。而屈光不正则是，如果角膜的曲率过陡或过平，光线不能准确聚焦在视网膜上，导致近视、远视或散光。</p><figure class="image ss-img-wrapper image_resized" style="width: 600px;"><img src="https://cdnfile.sspai.com/2025/08/05/56d827cb3ff6cb5e92b011f6e7c0ed2a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>角膜形状改变的原理</figcaption></figure><p>目前，主流的都是用激光方法，应用的有两种激光：准分子激光手术和飞秒激光手术。手术方式主要介绍三种：全激光、半飞秒、飞秒 。 &nbsp;&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 602px;"><img src="https://cdnfile.sspai.com/2025/08/05/ae54249c8131b75d2cc5eb32c9bdf814.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>手术激光的类型</figcaption></figure><figure class="image ss-img-wrapper image_resized" style="width: 600px;"><img src="https://cdnfile.sspai.com/2025/08/05/ae95ed78d51a7d97f1c370b12fb36e10.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>激光手术术式选择</figcaption></figure><p>手术选择的时候，一定要根据自己的情况来进行选择，千万别跟风网上说哪种好就做哪种，适合自己的就是最好的！毕竟眼睛的术后康复情况适合自己的手术选择直接挂钩的，眼睛是自己的，一定要慎重选择！</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/d39ef54902ff49dc226b61ed7e9a26f4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>手术选择考虑因素</figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/09260053c49d9787e51c194274b44390.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>术式对比</figcaption></figure><h2>手术过程没有想象的那么可怕&nbsp;</h2><p>如果你要决定做屈光矫正手术的话，那么最重要的一步就是要做全面的术前检查。</p><p>术前检查的目的是全面了解你眼睛目前的状况，匹配适合的手术类型。 &nbsp;</p><p>术前检查主要目的是确保手术的安全性和个性户手术设计。</p><p>通过了解眼睛和角膜的状态，根据眼睛的度数（超过600度可能要做晶体植入）、裂纹灯下检查是否有伤口等，角膜地形图等重要的检查项目来全面对眼睛做一次「体检」。书签检查项目大约在500元左右，有些私立医院可能免费或者象征性收费或免费，不管选择什么医院，一定要选择正规的就没错了。</p><p>术前检查的项目大致如下： &nbsp;&nbsp;</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/0f7299bcdddd332e0a0b3269783ca070.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>手术前检查项目</figcaption></figure><p><strong>需要注意的是</strong></p><ol><li>检查前停止佩戴隐形眼镜（软镜1周，硬镜3周以上），避免化妆。</li><li>检查耗时：1.5-2个小时（如果排队的话时间更久）。散瞳后会出现短暂视物模糊，不耽误坐地铁，害怕的话可以找个人陪着一起去。</li><li>检查有效期3个月，所以检查完药在3个月内做手术，超期要重新检查。</li></ol><p>屈光手术的手术过程感觉会劝退很多人，怕手术过程中发生意外导致眼瞎。大家不要担心，存在一定概率的手术失败的风险，但是目前手术已经非常成熟了，而且大部分手术都是靠设备来完成，正常情况下还是比较安全准确的。<br />选择什么手术类型都是因人而异，<strong>没有最好的手术，只有最适合的手术</strong>。</p><figure class="image ss-img-wrapper image_resized" style="width: 616px;"><img src="https://cdnfile.sspai.com/2025/08/05/5b5e6a3d15a1d2ed78178004bf5f79bb.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>江苏省中医院价目表（无利益相关供参考）</figcaption></figure><p>因为我的角膜比较薄，没法做飞秒手术，我选择的是全激光手术（准分子激光切削术）。</p><p>说下我做手术的过程。 &nbsp;</p><p>手术前要提前3天滴医院给的眼药水（约手术前医生会开给你），因为我约手术的时间是一个月后，时间长忘记提前滴眼药水了……&nbsp;</p><p>大家引以为戒，千万别忘了。</p><figure class="image ss-img-wrapper image_resized" style="width: 636px;"><img src="https://cdnfile.sspai.com/2025/08/05/27dc678465686100e28e5c1f7edca2e6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>近视激光手术须知（江苏省中医院版）</figcaption></figure><p>因为已经请好假了，下次手术要约到两周后（手术医生要到外地开会），所以跟预约的医生沟通，让我在医院现场滴，帮我约了最后一台手术。 &nbsp;</p><p>接下来就是要开始手术了！进入手术室前，医生会帮忙先帮忙清洗眼睛，穿好手术服，医生会告诉你手术的主意事项，排队等手术。</p><figure class="image ss-img-wrapper image_resized" style="width: 627px;"><img src="https://cdnfile.sspai.com/2025/08/05/a133fba2d4e63c6e5e6b6a77d46ba357.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>手术室外</figcaption></figure><p>手术开始前，先在手术台上躺好，医生会确认你的姓名，然后和旁边的助理医生确定我的数据和矫正度数（我眼睛条件只能矫正到1.0），医生耐心的说，很快，5分钟只能搞定，不要紧张。 &nbsp;</p><p>手术开始，眼睛会被一个固定器规定住，眼皮撑开，然后滴入麻药（类似眼药水，没感觉）。</p><p>手术过程中，保持眼球不动，坚持10-15秒，不要眨眼睛，盯住上方的绿色指示灯，设备会追踪眼球，偏移1mm内可以自动校准。因为我中途紧张，频繁眨眼睛，医生说「你幸亏选择了全激光，做飞秒的话，这台手术就失败了」。</p><p>我害怕影响手术效果，结束问医生会不互影响手术质量，他们说没关系，设备都是3D定位的，没有影响。 &nbsp;</p><p>手术过程中会听到轻微的“兹兹”声，眼睛会微微有点胀，不会感觉疼，闻到毛发烧糊的味道。2个眼睛做完用了三四分钟就完成了。 &nbsp;</p><p>结束后，医生给带上绷带镜（医院里提前买好，也可以在网上买），三天内不能取下，眼睛不能进水，医生开的眼药水2个小时第一次，第二天再来复查。然后静坐30分钟，没有异常就可以回家啦。&nbsp;</p><figure class="image ss-img-wrapper image_resized" style="width: 610px;"><img src="https://cdnfile.sspai.com/2025/08/05/76cf7695faef7b24b3290f27eac4db3a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>术手注意事项</figcaption></figure><h2>最重要的事术后康复和并发症</h2><p>屈光不正手术其实不算可怕，飞秒手术第二天就可以正常上班了。可怕的是术后的恢复期以及可能伴随的并发症风险。<br />也别害怕，手术完之后几乎不会瞎。<br />严重并发症的风险很低（估计每4000例手术中就有一例）<br />作为对比<br />每2000名隐形眼镜佩戴者中就有1人因经常使用隐形眼镜而出现严重并发症。<br />其中最常见的并发症为干眼症和眩光。</p><ol><li>干眼症（全飞秒最不易发，切口最小）：眼干、异物感、视疲劳。需要长期滴人工泪腺预防。</li><li>眩光原因</li></ol><ul><li>手术欠矫或是过矫</li><li>角膜磨平区域和没磨平区域过度不平滑</li><li>角膜上皮愈合不良</li><li>角膜上皮下混浊（HAZE）</li><li>晶体植入手术的中央孔需要适应</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/feb0d8dfdd5b94d40ceaca1cf21f604f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>不同术式康复差异&nbsp;</figcaption></figure><p>一般来说，手术过程中设备越好，切口越精细，恢复的越好，医生的水平也对术后的恢复情况有一定影响。</p><p>在康复期间，切记不能揉眼、游泳、停止用药或者乱用药，通过科学的护理和干预，3个月内基本都可以获得稳定的视力。不用过于担心，严重的并发症比较罕见，如果在康复过程红出现异常疼痛或者势力骤降，一定要立即就医，不要拖延。&nbsp;</p><h2>写在最后：手术需要知道的几件事&nbsp;</h2><ol><li>近视手术是按需手术，如果你需要就做，如果不需要不要赶潮流。手术有利有弊，谨慎选择。</li><li>医院选择：选正规的、大型的或者连锁的专业医院，不要因为费用就选择「小作坊」。如果费用充足就选择大型连锁私立医院，公立医院一定选择临床经验丰富的来做。</li><li>选择有最先进设备的医院，目前市面上比较先进的设备是：阿玛仕1050、蔡司VisuMax3.0等。手术设备是手术成功率的基础，更好的设备带来的是更好的手术体验和更好的术后康复效果。</li><li>手术康复期间不要焦虑，不要害怕，有问题可以找医生问问缓解自己的焦虑，短期视力不稳定是正常现象，不用过度关注。</li><li>一定要遵守医嘱，按时滴眼药水，合理用眼，不要抱有侥幸心理，在康复期间一定要注意用眼安全。</li></ol><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/08/05/f059ebb88c1f605df1b8885d1138a7bf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>不适合做近视激光手术的情况</figcaption></figure><p>如果你想好要做近视手术的话，希望这篇文章能给带来帮助。</p><p>再次提醒，如果没有需求，不要强行做，毕竟手术有风险。</p><p>当然，最好是永远不要有近视的困扰，保护眼睛从生活中的用眼健康开始。</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
    </channel>
</rss>