<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>少数派 -- Matrix</title>
        <link>https://sspai.com/matrix</link>
        
        <item>
            <id>https://sspai.com/post/102773</id>
            <title>读以忘却：如何让阅读变成可复用的智慧？</title>
            <link>https://sspai.com/post/102773</link>
            <guid isPermaLink="false">https://sspai.com/post/102773</guid>
            <pubDate></pubDate>
            <updated>Fri, 26 Sep 2025 11:23:37 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p style="text-align: justify;">许久没有更新，不知不觉，首都已经从盛夏走进初秋，一场秋雨带走了最后的蝉鸣，空气中多了几丝凉意，树叶开始泛黄，这正是北平的初秋。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/25/a148cdbc64a4e578ed07a522e5ab30dc.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="text-align: justify;">最近几周，工作的节奏有些平缓了下来，因而有时间可以更多地阅读。</p><p style="text-align: justify;">通勤时间，地铁里糟糕的网络，也让我有时间可以坐下来，好好读几本书。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">今年读了好些书，</p><p style="text-align: justify;">有些是为了解答问题而阅读的，譬如最近在读的《创新者的窘境》系列，《这样写出好故事》系列。有些是感到有兴趣的领域，譬如费孝通的《乡土中国》，张宏杰《饥饿的盛世》。有些是单纯只是享受阅读的乐趣，譬如铁生的《我在地摊》，郁达夫的《春风沉醉的晚上》，马伯庸的《太白金星有点烦》。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">不止是书籍，还有互联网上的文章，甚至部分图文或视频，也是极好的读物。</p><p style="text-align: justify;">相比起书籍，我想我花了更多时间在互联网上阅读，在 readwise 的统计里，我在互联网上精读的文章已经接近 4000 篇，一共留下了 20000 多条划线或批注。</p><p style="text-align: justify;">按照上文所说，如果部分抖音和小红书的内容，也是一种阅读。譬如抖音总喜欢给我推荐一些电影的片段，古人诗句照进现实，这是只有文字时无法表现的。譬如小红书也总会给我推荐 AI 、互联网行业的最新讯息。林林总总地加起来，我的阅读量还是很可观的。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">总之，</p><p style="text-align: justify;">今天来聊聊「阅读」这个话题，</p><p style="text-align: justify;">人总是要阅读的。</p><p style="text-align: justify;">&nbsp;</p><h2><strong>阅读是为了忘记</strong></h2><p style="text-align: justify;">几天前我顺着群聊的推荐找到了《Read to Forget》这篇文章，深有感触。</p><blockquote><p style="text-align: justify;"><i>"Read to Forget." MO‘s Blog, 05 Jul, 2025, </i><a href="https://mo42.bearblog.dev/read-to-forget/"><i>https://mo42.bearblog.dev/read-to-forget/</i></a><i>.</i></p></blockquote><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">这篇文章的核心观点是「<strong>阅读是为了忘记</strong>」</p><p style="text-align: justify;">&nbsp;</p><h3><strong>01 我们的大脑是一个贝叶斯系统</strong></h3><p style="text-align: justify;">博主说“我们的大脑不是一个保存所有信息的数据库，而是一个贝叶斯信念的思考系统。”</p><p style="text-align: justify;">贝叶斯系统，这个词语来源于贝叶斯定理。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/5c9376f1db059ea6d6a99b893e366bf3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="text-align: justify;">意思是每个人都会有自己的先验知识——用 AI 领域常用的话术来说，也就是每个人都有自己的 Context——在先验知识的基础下，新的经历和阅历，都是一种后验的数据。后验数据会不断地修正我们的先验知识，修正我们的决策系统，影响我们做出某个决策的概率。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/d4e2b2439744a58a5fd7ba8975b539c3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p style="text-align: justify;">是的，我们的大脑不是为了记忆，为了背诵，为了默写而设计的（如果有造物主）的话，这也难怪在应试教育时期，背诵对很多人来说一直是一件痛苦的事情，因为这就是一件很为难大脑的事情。</p><p style="text-align: justify;">我们阅读过的内容，大部分都会被遗忘掉。但它会作为一种后验数据，在大脑里悄悄留下一个微妙的印象，它可能是一个神经元，可能是一个向量，可能是 token。总而言之，它确实在潜移默化之间影响了我们的思维。</p><p style="text-align: justify;">所以随着不断地阅读，我们的贝叶斯系统，是一个渐进式的更新。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">这么看来的话，<strong>人是经历的造物，阅历则是他人经历的产物。</strong>一个人的经历毕竟有限，阅历就成了一种很好的补充。<strong>经历过的故事或事故，读过或写过的的文字，慢慢在塑造一个人。</strong></p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">&nbsp;</p><h3><strong>02 月亮与六便士</strong></h3><p style="text-align: justify;">在我自己身上的，愈发地也可以感受到这种微妙的变化。</p><p style="text-align: justify;">最近和朋友的交流中，我总是不经意之间，说出一些有意思或有点意思的话。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">时间回到九月八日凌晨的月全食，月光恰好穿过我的窗户洒到我的书桌上。</p><p style="text-align: justify;">我便在家中的“工位”上一边操作着电脑，一边观摩着月全食——这是我第一次看月全食——索性拿起手机拍了张模糊的照片与朋友分享。</p><p style="text-align: justify;">朋友调侃道：「这是在你的 CBD 工位上拍的吗？」</p><p style="text-align: justify;">我也没经过思考地回答道「是的，抬起头是月亮，低下头就是六便士。」</p><p style="text-align: justify;">非常有意思，或许是因为读过《月亮与六便士》，所以我顺口就说出了这句带有些隐喻的话。</p><p style="text-align: justify;">当然，今夜的我是幸运的，可以同时拥有六便士和月亮。</p><figure class="image ss-img-wrapper image_resized" style="width: 663px;"><img src="https://cdnfile.sspai.com/2025/09/26/da962161af0ca4ab3f6626e09d93460f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">&nbsp;</p><h3><strong>03 仁科的抽象和“幻觉”</strong></h3><p style="text-align: justify;">又联想到最近频繁地”阅读“到仁科的内容，仁科是乐队五条人的吉他手，在老罗的《罗永浩的十字路口》中与仁科，在 B 站刷到的一些桃花坞的切片里…</p><p style="text-align: justify;">仁科表现出来的是一种抽象，一种松弛的风格，似乎无时不刻在用独特的视角观察这个世界。网友评价说「没有一个人可以理解仁科的脑回路」，但也正是因此，仁科才能写出好的句子，做出好的音乐。</p><p style="text-align: justify;">虽然我没有深入地了解过仁科，但我想这种思维，和他的「先验知识」有很大关系。仁科的整个千禧年代，二十年浮层在广州城中村的走柜生活里，大量地听各种风格的打口碟，读中外文学小说，看大量地电影，，这些先验知识，塑造了仁科的“脑回路”。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/1962c5a44a7f3d510e6d2d8c415f347e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>《罗永浩的十字路口》中的仁科</figcaption></figure><p style="text-align: justify;">像 GPT 这样的大语言模型同样是如此。</p><p style="text-align: justify;">大语言模型的特殊之处在于，使用了语言（文字）来作训练，语言是人类创造出来的具有泛化性的产物。大语言模型在学习了人类的语言后，便掌握了人类的智慧。在预训练阶段，语言模型训练了大量的文本，相当于让 AI 学会了世界上所有的知识，或者说把全世界的知识都压缩到了一个模型中，使得 GPT 和过往所有的深度学习模型都不同，语言的泛化性，让模型拥有了智能。</p><p style="text-align: justify;">我想如果仁科的大脑是一个 AI 的话，他的幻觉一定很强。好似 Deepseek-R1 和 Kimi-K2，因为学习了大量的小说数据，模型的幻觉能力提升了，但进行创意写作的能力也同时增强了。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;"><strong>正是这些「先验知识」造就了我们。</strong></p><p style="text-align: justify;">人总是要阅读的，不管阅读什么内容，正如乔布斯在斯坦福毕业晚会上的演讲上说的「总会用上的」。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">&nbsp;</p><h3><strong>04 阅读是为了引发思考或行动</strong></h3><p style="text-align: justify;">回到《Read to Forget》这篇文章里，如果说阅读是为了忘记的话，那么怎样的阅读是有意义的呢？</p><p style="text-align: justify;">作者说</p><blockquote><p style="text-align: justify;">If a non-fiction text doesn't spark new thoughts or actions, it may not even be worthwhile reading. Anything beyond that clutters my note-taking system. You can't possibly keep track of everything, nor can you work with hoarded pieces of information. 如果一本非虚构类书籍不能引发新的想法或行动，那么阅读它可能就毫无价值。除此之外的任何东西都会让我的笔记系统变得混乱。你不可能记住所有事情，也不能处理堆积如山的信息。</p></blockquote><p style="text-align: justify;">没错，这是一个很有启发的句子。</p><p style="text-align: justify;">阅读的目的为了引发思考或行动。</p><p style="text-align: justify;">读过之后，我们大可把内容忘记，但必须要思考。只有思考，可以让读过的文字在大脑里留下一些微妙的影响，无论如何，阅读过后，这些内容微妙地影响了我们的贝叶斯决策系统。</p><p style="text-align: justify;">另外则是一些重要的信息，这需要记录</p><blockquote><p style="text-align: justify;">From most texts, I only want two things: First, I want it to subtly alter my thinking, an incremental update that moves me towards a refined world model. Second, I want to pull out a few key pieces of information that I might use later in my writing. For instance, if I come across a well-written methodology section in a paper, I’ll save that. Reading should stimulate my thinking and produce new ideas. 从大多数文本中，我只想要两件事：第一，我希望它能微妙地改变我的思维方式，带来一种渐进式的更新，让我更接近一个更精细的世界模型；第二，我希望提取出一些关键信息，以后写文章时可以使用。比如，如果我在一篇论文中看到一段写得很好的方法论部分，我会把它保存下来。阅读应该激发我的思考并产生新想法。</p></blockquote><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">这里提到的第二点——记录——让我想起之前学到的阅读笔记方法。</p><blockquote><p style="text-align: justify;">记录读书笔记的方法：</p><p style="margin-left: 0px; text-align: justify;">阅读过程中，标记处自己觉得好的地方。也就是划线</p><p style="margin-left: 0px; text-align: justify;">对于自己有所感触的地方，在文章过程中予以批注</p><p style="margin-left: 0px; text-align: justify;">阅读完某一章或某一节后，尝试用自己的话，将这部分知识的论述逻辑总结出来记录。</p></blockquote><p style="text-align: justify;">这里不再做展开，感兴趣的朋友可以移步：</p><p style="text-align: justify;"><a href="https://sspai.com/post/69922">我的阅读工作流(2021年版)</a></p><p style="text-align: justify;"><a href="https://sspai.com/post/64522">我如何在Notion中实践zettelkasten</a></p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">但这种由「先验知识」带来的思考的时刻，却不那么多。</p><p style="text-align: justify;">有没有什么办法，来增强这个过程呗？</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">我想 Readwise 可以做到......</p><p style="text-align: justify;">&nbsp;</p><h2><strong>Readwise 让阅读变成可复用的智慧</strong></h2><p style="text-align: justify;">接下来我们聊聊一款工具 Readwise，看看它是如何让阅读变成可复用的智慧。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;"><strong>准确地说，应该是三个产品 Readwise、Readwise Reader 和 Readwise Chat</strong></p><p style="text-align: justify;">&nbsp;</p><h3><strong>01 Readwise</strong></h3><p style="text-align: justify;">Readwise 的核心功能是零散在各处的划线和批注，同步到一处。</p><p style="text-align: justify;">如果只关注“Readwise”这个词语，踏实“Read” 和 “wise” 的结合，也就是「阅读」和「智慧」，我更倾向于称之为「让你的阅读更具智慧」，确实，Readwise 今天也确实再做这件事。一切的一切，都围绕「阅读」进行设计。</p><p style="text-align: justify;">基于这些<strong>阅读的产物</strong>，他确实给我带来了更多思考。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/7c947a96803483d88ef7eeb09379b0a8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="text-align: justify;">&nbsp;</p><h3><strong>02 Readwise Reader</strong></h3><p style="text-align: justify;"><strong>Readwise Reader</strong> 则是 Readwise 开发的第二款产品。</p><p style="text-align: justify;">Readwise Reader 是一款非常好用的阅读器。你可以将文章、视频、epub、pdf 等放到文件中，进行阅读，批注，同样这些阅读的产物，也会同步到 Readwise 中。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/e777c7612c9967a6a18fe5c141a028ed.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="text-align: justify;">我在 Readwise 这个软件里，堆积了我所有的阅读划线和批注。</p><p style="text-align: justify;">Reader 里则囤储了很多待读清单。我很喜欢这个软件，已经是我为了它付费的第五年。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/5e2321c5b28c81de6a0ad20997750a50.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="text-align: justify;">我曾多次在文章中安利这个软件。</p><p style="text-align: justify;"><a href="https://sspai.com/post/80398">为了让中国区的用户更好地使用 Readwise，我们还开发了一个小工具，让你可以在微信中，将公众号和朋友推荐的内容，快速收藏到 Readwise Reader。</a></p><p style="text-align: justify;">如果你感兴趣，可以通过下方这个二维码添加小助手，即可以免费试用 15 天。</p><figure class="image ss-img-wrapper"><img alt="Frame 1321314745" src="https://cdnfile.sspai.com/2025/09/25/article/ec1a998ab5e4b5ef921b4d3feb61470e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">&nbsp;</p><h3><strong>03 Readwise Chat</strong></h3><p style="text-align: justify;">今年，Readwise 又基于 RAG 的技术，开发了 Readwise Chat ，通过 Readwise Chat，我们可以与自己过去的「先验知识」对话。</p><blockquote><p style="text-align: justify;">Readwise Chat (<a href="https://readwise.io/chat">https://readwise.io/chat</a>)</p></blockquote><p style="text-align: justify;">我习惯在遇到一些自己想不清楚的事情时，尝试从过去的阅读这找到答案</p><p style="text-align: justify;">例如，当我面临重要的人生决策时。</p><p style="text-align: justify;">在 2 月份时，我在纠结是否来到北京工作，便问它。在 Readwise Chat 里，我看到了一些自己想要的答案。「<strong>如果你在一个困境决策上举棋不定时，选择短期内更困难和痛苦的那条路，因为长期来看这种选择往往会带来更好的结果</strong>」_via.《纳瓦尔宝典》</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/02e292ffa3cb3a36cb5d6e7715e70413.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">再比如，情绪低落时，我也会尝试找到答案</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/1619eaee5236daffcb68a269de00a904.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">这种体验非常棒。</p><p style="text-align: justify;">倒不是说它带来多少新的价值，而是在遇到新的问题时，能够在过去自己读过的内容中得到一些启发，引发一些思考。相比起大语言模型给到的千篇一律地给一个正确的答复，我更喜欢这种能够给到自己启发的内容。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">Readwise Chat 的答复，像是一种「<strong>激活信号</strong>」，这些文本进入大脑后，似乎激活了先验知识给大脑的那些微妙的变化，让人有一种“原来我之前还读过这种内容”的惊喜。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">类比地说，我们在写LLM 的 prompt 时，经常需要输入特定的内容来激活 LLM 里那部分专业的知识（特别是 MOE 的大模型），激活后 LLM 会回答得更好。而 Readwise Chat 的答复，就好像是对大脑特定的神经元，或者特定脑区的激活信号，这种感觉很奇妙。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">这是 Readwise 带来的价值，一个好的阅读器，阅读过后，还可以通过聊天的方式，让「先验知识」再次在脑海中泛起，引发新的思考。通过这三个产品的组合，Readwise 确实让阅读变得更有价值。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">&nbsp;</p><h3><strong>04 如果你想要尝试</strong></h3><p style="text-align: justify;">如果你是一位阅读爱好者，但还没有尝试过 Readwise 这款产品，非常强烈建议你使用。</p><p style="text-align: justify;">可以通过我的邀请链接：<a href="https://readwise.io/i/dayugodd">https://readwise.io/i/dayugodd</a> 来注册，这样我可以额外获得一个月的使用权。</p><p style="text-align: justify;">试用后如果满意，我也可以协助你申请发展中国家的优惠，这样可以半价购买 Readwise 的年会员，感谢。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">&nbsp;</p><h2><strong>延伸地讲一些</strong></h2><h3><strong>Analogy / 相关笔记/ Smart Connection</strong></h3><p style="text-align: justify;">如果再把视角看到更深处的角落。</p><p style="text-align: justify;">在 <a href="https://sspai.com/post/69922">我的阅读工作流(2021年版)</a> 中，实际上我们把笔记分为了几个级别：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/307fed703c88c2a7093b6ee57125e3b9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>图片来自 5 年前 的文章</figcaption></figure><ul><li style="text-align: justify;">第一等级是划线</li><li style="text-align: justify;">第二等级是批注</li><li style="text-align: justify;">第三等级是临时笔记</li><li style="text-align: justify;">第四等级是永久笔记</li></ul><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">Readwise Chat 实际上解决的是前两个层级的知识复用问题，那么对于在知识库中的笔记，是否也可以用一样的方法来解决呢？</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">是的。</p><p style="text-align: justify;">在 Obsidian 中，优类似 Smart Connection 这样的插件，可以让我在阅读当前笔记时，联想到关联的笔记。</p><p style="text-align: justify;">例如下图，在右侧边栏中，可以看到当前笔记关联的笔记内容。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/983b8fdbc5a4858a87db69a1210c50b0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">在 flomo 中，我们也可以使用“相关笔记”的功能来找到相关的笔记</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/7d388e1348f4783a84f2b9d193a7a4b8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">一年前我写了《类比思维 | 新产品 Analogy 内测邀请》 这篇文章，我们正在开发一款面向 Notion 的知识管理者的相关笔记产品，叫 Analogy，近期会发布，感兴趣的朋友可以点击关注，期待一下。</p><figure class="image ss-img-wrapper"><img alt="read_value_09" src="https://cdnfile.sspai.com/2025/09/25/article/412df8bba608d13b7785002c814914b8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="text-align: justify;">同时，我的<strong>《阅读工作流（2025版）》</strong>的文章也正在写作中，来聊聊在这个 AI 时代，应该如何阅读？应该怎样做个人知识管理。</p><p style="text-align: justify;">&nbsp;</p><h2><strong>结语</strong></h2><p style="text-align: justify;">好的，这篇文章到这里结束。</p><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;">简单回顾下</p><ol><li style="text-align: justify;">我们的大脑是一个贝叶斯决策系统，每个人都是由他的「先验知识」造就的。先验知识总是会微妙地影响我们的贝叶斯决策系统（思考）。</li><li style="text-align: justify;">人无法记住所有的知识，只能忘却掉大部分，记录下其中能够带来思考的部分，如果阅读无法带来思考，将变得毫无价值。</li><li style="text-align: justify;">通过 Readwise 这款工具，我们可以放大「先验知识」的价值，让那些微妙的改变更容易被察觉，变得可复用。</li><li style="text-align: justify;">预告了接下来我们会做的两件事，发布 Analogy 产品，以及更新我的新文章，欢迎关注。</li></ol><p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;"><i>感谢阅读，愿你在下一个瞬间，能够意识到那句脱口而出的话、那个突然冒出的念头，正是曾经某本书留在你系统里的 0.1% 概率增量；也愿你继续读、继续忘，却在一次次看似浪费的翻页里，悄悄把自己更新到更好的版本。</i></p><p style="text-align: justify;"><strong>如果这篇文章对你有帮助的话，请给我的文章点赞，在看，或是转发给你觉得需要的朋友。</strong></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102783</id>
            <title>跑步两年半，2700km踩坑与惊喜：分享5双国产跑鞋的真实体验</title>
            <link>https://sspai.com/post/102783</link>
            <guid isPermaLink="false">https://sspai.com/post/102783</guid>
            <pubDate></pubDate>
            <updated>Fri, 26 Sep 2025 04:40:22 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <h2><strong>一、引子</strong></h2><p>长期跑步，绕不开的不是今天跑不跑，跑多少！</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/3202a753898b3e86170720b85fb52fdc.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>而是跑步相关的装备，其中一定会定期更换的或增购的必然是：跑步鞋！</p><p>入坑跑步的第一双跑步鞋是老婆买的，她当时刷到老罗的直播间正在卖亚瑟士，在老罗分享了自己跑步减肥的故事之后，果断下单。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/cd85868317fe4e075214e1a9326c4bd1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>稳定性和缓震效果都不错，不过现在已经很少穿这双鞋，综合下来两个原因：</p><p><strong>1）性能下滑明显</strong></p><p>大概是 85kg 的时候开始穿的，几百公里后，缓震效果约等于无</p><p><strong>2）入坑国产跑步鞋</strong></p><p>在 200-400 的价位，有极其丰富的国产跑步鞋可选。</p><p>在刚开始跑步的半年一年，也难免会关注各种跑鞋博主，看他们的测评，通过他们对某款跑鞋的表述来判断是否试试看。</p><p>看得越多越能感受到：各个国产品牌的跑步鞋都有点东西！</p><p>自此，入坑国产跑步鞋，一发不可收拾！</p><hr /><h2><strong>二、用过的国产跑步鞋们</strong></h2><p>按购买时间来列举下，纯粹的一手主观体验，我的身高是 177km，体重为 75kg，所购鞋子的鞋码均为 44 码。</p><p>PS：仅供参考，毕竟每个人的身高、体重、跑姿、使用场景都有不一样的地方。</p><h3><strong>1️⃣ 安踏 雳炼</strong></h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/ba7299a559f306d833f900e368684d6a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/ddc9ed0284949a0ca20d4b0ee3b98448.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>购买时间： 2024年 2 月 19 日</p><p>购买方式：PDD</p><p>当下状态： 休眠中</p><p>使用里程： <u>约 500km</u></p><p>入手价格： ¥ 399</p><p>主观评分： ★★★</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/04e6768adda3dcb0d0aa250ec5954be8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/f21a66e9b9dee1719a884afa630ac10a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3><strong>2️⃣ 李宁 烈骏7 Pro V2</strong></h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/f7e06f95061d3870fa8bf3b6498cfb7c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>购买时间： 2024年 6 月 2 日</p><p>购买方式：淘宝</p><p>当下状态： 已报销</p><p>使用里程： <u>约 650km</u></p><p>入手价格： ¥ 608</p><p>主观评分： ★★★</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/7736df0ed61e4e2698c3b848e159164a.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/aa2213573cb118badedea08fb9d11402.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3><strong>3️⃣ 乔丹 强风 2PRO</strong></h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/0e670c26797be585b106df38a22428fc.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>购买时间： 2024年 10 月 17 日</p><p>购买方式：淘宝</p><p>当下状态： 服役中</p><p>使用里程： <u>约 450km</u></p><p>入手价格： ¥ 292.02</p><p>主观评分： ★★★★</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/df8d3ec060ce0ac8be1868a9441e6499.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/82467d25c73f24df3c1d76a795ec2b74.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3><strong>4️⃣ 鸿星尔克 绝尘2.5</strong></h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/15d04f31bd220f5cb8fc047543e7e7b5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>购买时间： 2025年 6 月 2 日</p><p>购买方式：京东</p><p>当下状态： 已报销</p><p>使用里程： <u>约 720km</u></p><p>入手价格： ¥ 264.81</p><p>主观评分： ★★★★</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/354b7e5c7b6aed23c4bf19da4073819d.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/e721bc3195b25014a571f81824d6fff0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3><strong>5️⃣ 匹克 千层浪</strong></h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/5dc5c2176046ac088c41585a2cccba37.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>购买时间： 2025年 9 月 1 日</p><p>购买方式：京东</p><p>当下状态： 服役中</p><p>使用里程： <u>约 120km</u></p><p>入手价格： ¥ 308.94</p><p>主观评分： ★★★★</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/74d4acb77d9ad552e66e14d0a3839ce1.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/26/article/0178f33e5a63380b5bc45cc0fa4ed576.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><hr /><h2><strong>三、小结</strong></h2><h3><strong>1️⃣ 都是不错的跑步鞋</strong></h3><p>已经买过和深度用过 5 个国产品牌的跑步鞋：</p><p>安踏、李宁、乔丹、鸿星尔克、匹克，有一个直观的感受：</p><p>结合价格来看，都很有性价比，都是不错的跑步鞋。</p><p>这 5 个品牌，我所购的鞋码都是 44 码，都很合脚，侧面说明的各品牌的鞋码已经比较规范和统一，在选择的时候不用在因为鞋码而纠结。</p><h3><strong>2️⃣ 无法忽视的个体差异</strong></h3><p>跑步鞋很特殊的是：</p><p>在跑步过程中，跑步鞋是人与地面接触唯一的媒介，而不同的跑姿、身高、体重、路面等等条件，也必然会让大家的感受各不相同。</p><p>如果大家的感受都一样，反倒是不正常的，所以网络上针对某一款产品不同使用体验的争论也就在所难免。</p><h3><strong>3️⃣ 坚定的继续买国产跑步鞋</strong></h3><p>不夸张地说，跑步是一项能坚持到七八十岁的运动。</p><p>如果平均每年需要消耗 2-3 双跑步鞋，再跑个 40 年，总计可能会消耗的跑步鞋是：80-120 双， 取个中位数也就是 100 双。</p><p>接下来这 100 双跑步鞋，依然会坚定的从国产品牌中选择！</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102663</id>
            <title>从氛围编程到端到端内容创作：我踩过的 AI 协同深坑与心得</title>
            <link>https://sspai.com/post/102663</link>
            <guid isPermaLink="false">https://sspai.com/post/102663</guid>
            <pubDate></pubDate>
            <updated>Sun, 21 Sep 2025 03:34:28 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/09/21/article/a5bb43aefba9b1f286ce3650153095d1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><blockquote><p style="margin-left: 0; text-align: justify;"><code>我们需要的不是更多的 AI 工具，而是更深层的人机协同智慧。</code></p></blockquote><h2><code><strong>认知</strong></code></h2><p style="margin-left: 0; text-align: justify;"><code>最近这一段时间，我进行了不少关于 AI agent 内容创作能力的探索。很多人对 Vibe Coding （氛围编程）早已耳熟能详？只不过并没有亲身实践过。</code></p><p style="margin-left: 0; text-align: justify;"><code>我目前已经实践到了这种步骤。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/09/21/article/6395cbce3893cfac487e3b7952fce803.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0; text-align: justify;"><code>我在星球里面感叹，「能在手机上语音输入控制 agent 端到端操作，这才算是真正的氛围编程」。</code></p><p style="margin-left: 0; text-align: justify;"><code>这个过程里，我踩了不少坑，有一些心得想要和你分享。</code></p><p style="margin-left: 0; text-align: justify;"><code>先说结论，<strong>我们需要的不是更多的 AI 工具，而是更深层的人机协同智慧。</strong></code></p><p style="margin-left: 0; text-align: justify;"><code>这篇文章将带你走过三个递进的认知层次：从选择最优 AI 模型的工具基础，到掌握复杂任务拆解的技巧进阶，再到探索端到端内容创作的应用前沿。</code></p><p style="margin-left: 0; text-align: justify;"><code>注意我们的目标不是替代人类创作，而是找到那个让 AI 成为你最佳搭档的平衡点。</code></p><h2><code><strong>选择</strong></code></h2><p style="margin-left: 0; text-align: justify;"><code>模型能力是有巨大差别的。不断摸索和掉到各种坑里后，我强烈建议你使用最好的模型。如果你要处理的是严肃任务，好模型和糟糕模型输出的内容完全是两个世界。</code></p><p style="margin-left: 0; text-align: justify;"><code>你是否还在因为成本考虑而选择那些「性价比」更高的小模型？这种想法的背后其实是「只想要收益而希望成本为零」的错误逻辑。一位好友就跟我表达过这样的想法，我的答复是「你需要挣钱养家，人家研究大模型提供服务的人也得挣钱养家啊」。</code></p><p style="margin-left: 0; text-align: justify;"><code>一个真正优秀的模型往往能让你一看就有「于我心有戚戚焉」的感觉，而另外一些模型做出的东西，往往是让你摇头皱眉。当然，你可能马上会说好的模型价格太贵。没错，但你有没有注意到模型价格的下降趋势？</code></p><p style="margin-left: 0; text-align: justify;"><code>一个模型如果做出来的东西不好，你不但耽误了时间，还在这个过程中可能给自己埋下很多隐患。你觉得省下的那点模型费用，真的抵得过你重新修改、调整、甚至推倒重来的时间成本吗？你真的不在乎爆雷的时候给自己带来的经济与声誉影响吗？</code></p><p style="margin-left: 0; text-align: justify;"><code>不过，即便是主流旗舰模型也没有能最优处理一切任务，所以你也不用执着于某一个厂家的某一个模型（或者以模型驱动的工具）。前两天我看到网友 yetone 贴出来的这个帖子，非常有趣。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/09/21/article/17c18d22598f0ab6b731a8937df1c9a9.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0; text-align: justify;"><code>如今你如果为大众提供 AI 产品订阅服务，确实会对这个现象有切肤之痛。但是站在用户的角度，我觉得这是非常理性的举动 —— 你的产品如果不能吸引我，那我立即就转投更好的产品。充分竞争的市场，对用户来说总是好事儿。</code></p><p style="margin-left: 0; text-align: justify;"><code>当然我并不是说你的任何 AI 对话，都要使用最强悍的模型。那显然是一种误解和浪费。甚至有的时候厂商这么做了，用户也未必领情。</code></p><p style="margin-left: 0; text-align: justify;"><code>例如 OpenAI 推出 GPT-5 时，下架了包括 GPT-4o 在内的所有「老」模型入口，</code><a href="https://arstechnica.com/information-technology/2025/08/openai-brings-back-gpt-4o-after-user-revolt/"><code><strong>导致用户众怒</strong></code></a><code>。因为很多人并不需要 ChatGPT 帮自己解决什么实际问题，而只是希望一个可以迎合自己的 AI 提供情绪价值。在这项任务上，便宜的 GPT-4o 远远比最贵的 GPT-5 Pro 符合需求。</code></p><p style="margin-left: 0; text-align: justify;"><code>我做了这样一个决策流程图，供你参考。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/09/21/article/ae49d8a2a55fef24d652b289fe1bfd17.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0; text-align: justify;"><code>当你开始计算时间成本、机会成本和修改成本时，你会发现用最优模型往往能在严肃任务上给你带来意想不到的收益，比如更准确的理解、更自然的表达、更少的后期调整。</code></p><p style="margin-left: 0; text-align: justify;"><code>这种效率提升带来的心流体验，本身就是无价的。你最近一次因为 AI 的精彩表现而感到惊喜是什么时候？如果时间有点久远，那可能就是工具选择的问题了。</code></p><h2><code><strong>提示</strong></code></h2><p style="margin-left: 0; text-align: justify;"><code>有人一直认为提示词工程到了反思式模型的时代就不再重要了。这个看法确实看到了一个方面 —— 处理那些中等复杂度而且模型有经验的任务时，新模型的表现确实出色。</code></p><p style="margin-left: 0; text-align: justify;"><code>早期模型能力不行的时候，宝玉老师就提出了三步翻译法：先初步翻译，然后进行反思式纠错，把初翻结果、原始语料再加上给出的建议一起要求细化翻译。</code></p><p style="margin-left: 0; text-align: justify;"><code>这在当时被证明是非常有效的途径，也是提示词工程优秀样例。后来有了反思式模型，自己把这些任务在内嵌的工作步骤里一步步实施。那些中等难度又是 AI 比较熟悉的任务就变得非常容易处理，不需要你单独绞尽脑汁设置更好的工作步骤、策略和提示词，只需要描述清楚目标就行。</code></p><p style="margin-left: 0; text-align: justify;"><code>因此，有人说，提示词工程没必要存在了。</code></p><p style="margin-left: 0; text-align: justify;"><code>但你想过没有，如果要做一个非常复杂的任务 —— 那些人类会引以为傲，甚至能够让你在人群中靠着这样的能力被识别出来的任务 —— 会怎样？</code></p><p style="margin-left: 0; text-align: justify;"><code>例如创意写作 —— 写小说、写公众号、写博客、写报告等 —— 这些任务的复杂度和翻译一篇文章是完全不一样的。</code></p><p style="margin-left: 0; text-align: justify;"><code>你可以让任何一个 AI，特别是那些包含了 Agent 能力的 AI 去帮你以某个主题写一个什么东西。甚至有人会尝试给某些 Deep Research Agent 一些数据和参考文献，让它去写论文（反面案例，不要模仿）。</code></p><p style="margin-left: 0; text-align: justify;"><code>初看起来 AI 生成内容效果不错，找到了很多相关文献，论述得似乎也是头头是道。但很不幸，写出来的结果，往往会被业内人士一眼看上去便认为质量不达标。为什么会这样？</code></p><p style="margin-left: 0; text-align: justify;"><code>这就涉及到复杂任务的本质问题。我们看到的这些人类创作的高度复杂内容，是一遍直出写出来的吗？你可以去读读路遥的 </code><a href="https://book.douban.com/subject/1793990/"><code><strong>《早晨从中午开始》</strong></code></a><code>，也可以看看 </code><a href="https://en.wikipedia.org/wiki/A_Song_of_Ice_and_Fire"><code><strong>《权力的游戏》</strong></code></a><code> 作者这些年创作的漫长艰辛过程。</code></p><p style="margin-left: 0; text-align: justify;"><code>优秀的作品，都需要大量的研究工作、不断规划、调整、修改，才能真正做出来。要管理复杂的时间线索和人物关系，哪里是一条提示词能够帮你完成的？</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/09/21/article/50e3f54f09cd25438a10d8385feb2752.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0; text-align: justify;"><code>（图片来源：https://en.wikipedia.org/wiki/A_Song_of_Ice_and_Fire）</code></p><p style="margin-left: 0; text-align: justify;"><code>人类用户需要做的是<strong>依照自己的专业技能，把问题进行合理的拆解</strong>。大语言模型虽然更加通用，但是也很难做到「一心多用」时每一个任务都处理得完美。大模型能力的优秀往往是强化学习训练得来的。对于它没见过的任务，对于它不知道深浅的任务，它往往会束手束脚、畏首畏尾。</code></p><p style="margin-left: 0; text-align: justify;"><code>在 AI 不知道该怎么拆解时，你需要帮它进行合理的拆解。因为只有把拆解做到位了，才能让每一个模型对分割后的小任务都到达一种信手拈来、游刃有余，或者至少是「虽有难度有挑战性，但蹦一蹦能够得着」的地步。</code></p><p style="margin-left: 0; text-align: justify;"><code>如果没有中间的这些设计，不体现人机协同，寄希望于让 AI 来随便乱试，心中祷告能够创作出精品，那就有些天真了。这就如同让一千只猴子在键盘上随便敲打，而你所期望的是快速打出一个莎士比亚等级的传世之作。</code></p><p style="margin-left: 0; text-align: justify;"><code><strong>一个关键问题是，很多人都要么觉得提示词要太难写，要么应该由纯人工来书写。</strong> 这其实都不对。在很早之前就已经有 AI 可以帮助人们自动优化提示词了（例如 Claude 3.5），而现在具备这样能力的 AI 有更多。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/09/21/article/32d12f4e7fcef079e93b336547c087b9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0; text-align: justify;"><code>注意我们即便要写提示词，也绝不应该从头到尾每一个字都追求自己来写，那样就如同现在明明有了 AI 协助却非要坚持手动编代码的程序员一样。这样写出的「纯人工代码」当然有好处 —— 完全的控制性（或者至少是掌控感），但从效率上讲是非常低下的。</code></p><p style="margin-left: 0; text-align: justify;"><code><strong>AI 怎么才能帮好你呢？</strong> 还是那句话，你必须把一些让 AI 原先心里没底的东西变成有底。明确告诉它你的目标，范围限制，给它一些样例，这些都是很好的方式。</code></p><p style="margin-left: 0; text-align: justify;"><code>在某些探索性阶段，你就应该让 AI 去充当先锋快速出原型。它给出的结果如果与你的预期不同，也不要紧，你可以在提示词设计阶段就帮它去校准。</code></p><p style="margin-left: 0; text-align: justify;"><code>不要总想着用一个 AI 模型包打所有的事。有的 AI 模型适合根据你的理解去起草，有的适合做全局细致修改和一致性检验…… 这跟它的上下文长度有关，跟它训练的语料有关，跟它本身强化学习的任务也有关联。</code></p><p style="margin-left: 0; text-align: justify;"><code>所以我经常干的就是让一个大模型去写提示词，让另一个来修改。我觉得很多时候它确实能产生事半功倍的效果，因为这里形成了一个 AI 大模型之间的同行评审（peer review）机制。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/09/21/article/240e431e6dc71cfdcc84b92c48a2102a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2><code><strong>探索</strong></code></h2><p style="margin-left: 0; text-align: justify;"><code>按照上面的思考，我进行了一些应用探索。例如提供非常详细的框架，让 AI agent 帮助我 </code><a href="https://mp.weixin.qq.com/s/nDPkh-C9IBUq_QHQzPKdiQ"><code><strong>撰写小说</strong></code></a><code>，或者 </code><a href="https://mp.weixin.qq.com/s/IhqpOhE0sAtcyJaRhFmiWw"><code><strong>调研后创作博客</strong></code></a><code>。</code></p><p style="margin-left: 0; text-align: justify;"><code>小说写作的成果嘛，你可以参考这个视频：【</code><a href="https://www.bilibili.com/video/BV1L2HrzUEVU"><code><strong>AI 写作进化史：从垃圾内容到让专业读者认真阅读的转变</strong></code></a><code>】。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/09/21/article/2265f592e19e55f4769dd65bed29fa8b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0; text-align: justify;"><code>我的阶段性目标其实并非让 AI 替我创作博客、小说，而是让 AI 帮助我去创作定制化的互动教程。只不过，相对于包含多模态和交互设计的教程来说，文本形式的博客和小说更为简单，易于做原型验证。</code></p><p style="margin-left: 0; text-align: justify;"><code>在之前 </code><a href="https://www.bilibili.com/video/BV1UeK8zAErv/"><code><strong>我们也介绍了一些 AI 做教程的样例</strong></code></a><code>。我在上学期的机器学习课上也给学生们展示了很多当时的 AI Agent，包括 Manus 和 </code><a href="https://www.flowith.co/"><code><strong>Flowith</strong></code></a><code> 做出来动图甚至交互式教程。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/09/21/article/9f75dbb8d99ed8e362d44b94ceadabf7.gif" /></figure><p style="margin-left: 0; text-align: justify;"><code>当时我的感觉就是，效果还不够理想。用户对内容的控制、AI 对任务的理解，以及全自动生成，这几者之间一定要达到一个拿捏的火候，以便平衡。否则最终生成你会等待很久，而流程容易失控，导致你想要「前门楼子」，生成的是「胯骨肘子」。几番挫败下来，可能你就不想干了。</code></p><p style="margin-left: 0; text-align: justify;"><code>能不能把中间的过程像编制程序一样变得非常可控，但同时又能够让 AI 模型根据用户的输入动态调整，最后达成完满的定制化、个性化的教程生成？</code></p><p style="margin-left: 0; text-align: justify;"><code>我觉得我前面设定的写作应用框架就能很好达成这一点。</code></p><figure class="image ss-img-wrapper"><img alt="" src="https://cdnfile.sspai.com/2025/09/21/article/41612a5c26198fa163100d2420fb8359.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0; text-align: justify;"><code>后续我希望能将其迁移到可视化教程制作应用领域。这样可以降低广大教师朋友们工作的复杂度和负荷。</code></p><p style="margin-left: 0; text-align: justify;"><code>但如果 AI 真的能在按照我们每个人个性化的理解和风格去生成定制化教程，那么这样的讲授就能够做到千人千面，同时也能够照顾到教师群体所面对的学生的差异化接受水平。</code></p><p style="margin-left: 0; text-align: justify;"><code><strong>现实的挑战在哪里？</strong></code></p><p style="margin-left: 0; text-align: justify;"><code>你想要机器有创造力，但又不能让它完全脱缰；你希望流程高度自动化，但关键节点必须有人工介入的机会。这种平衡极其微妙，稍有不慎就可能导致整个流程崩溃。调试周期长、失败率高，这些都是我们必须面对的现实。</code></p><p style="margin-left: 0; text-align: justify;"><code>当然，AI 模型使用成本目前确实也是个问题。所以如果你打算自己研发，更建议你采用包干订阅制的 AI agent 应用来尝试。否则高昂的 token 账单会让你望而却步。</code></p><p style="margin-left: 0; text-align: justify;"><code>别问我怎么知道的。</code></p><h2><code><strong>小结</strong></code></h2><p style="margin-left: 0; text-align: justify;"><code>从选择最优模型到掌握任务拆解，再到探索端到端应用，这不仅仅是技术技巧的学习，更是思维方式的根本转变 —— 从「如何使用工具」到「如何与智能协同」。</code></p><p style="margin-left: 0; text-align: justify;"><code>如果你是一个严肃的内容创作者，我觉得你不得不了解一下现在 AI 的前沿能力。可能某一天突然发现自己的竞争力大受折损，甚至找不到原有的需求，那都毫不奇怪。我们总是在高喊着人机协同，但<strong>肉眼可见的未来，恐怕不是所有人都能和机器协同的</strong>。</code></p><p style="margin-left: 0; text-align: justify;"><code>诚然即便在快速变化的环境里，每个人也可能因为自己的积累都有引以为傲的「相对静态常量」—— 包括你建立的信誉、你的投资和储蓄，你的人脉圈…… 但你专注做的事情、你服务多年的岗位、你经验丰富的任务，却分分钟有可能变得毫无意义。这个警示某些行业的人看来依然会觉得是耸人听闻嗤之以鼻，但如果你处在另一些行业，这恐怕早就不是什么「贩卖焦虑的预言」了。</code></p><p style="margin-left: 0; text-align: justify;"><code>现在我特别想听听你的想法：你在与 AI 协同中遇到的最大挑战是什么？是模型选择的纠结，提示词设计的困惑，还是对未来变化的不安？在评论区分享你的经历，让我们一起在这个快速变化的时代找到属于自己的协同节奏。</code></p><p style="margin-left: 0; text-align: justify;"><code>如果你觉得本文有用，请<strong>充电</strong>。</code></p><p style="margin-left: 0; text-align: justify;"><code>如果本文可能对你的朋友有帮助，请<strong>转发</strong>给他们。</code></p><p style="margin-left: 0; text-align: justify;"><code>欢迎<strong>关注</strong></code><a href="https://sspai.com/column/245"><code><strong>我的专栏「科研利器」</strong></code></a><code>，以便及时收到后续的更新内容。</code></p><p style="margin-left: 0; text-align: justify;"><a href="https://sspai.com/prime/subscription?referral=314606736"><code><strong>点击这个链接加入少数派会员</strong></code></a><code>，立享 9 折优惠！获得专属会员内容、会员播客以及会员定制周边。在更多的领域和方向帮你打开脑洞，找到新的兴趣点。与少数派一起洞悉当下，探索新知。</code></p><h2><code><strong>延伸阅读</strong></code></h2><ul><li><a href="https://mp.weixin.qq.com/s/kdb4BYGA66lhEciumoJYTA"><code><strong>AI 工作流长文写作能力重大改进，欢迎你来试试看</strong></code></a></li><li><a href="https://sspai.com/post/78836"><code><strong>AI 应用蓬勃爆发，你的「护城河」足够宽吗？</strong></code></a></li><li><a href="https://sspai.com/post/98083"><code><strong>从枯燥理论到生动实践：AI 智能代理如何用交互式教程讲解复杂概念</strong></code></a></li><li><a href="https://sspai.com/post/96868"><code><strong>新学期，给你自己配一个好用的 AI 助手吧。会思考，能联网，还有知识库那种</strong></code></a></li><li><a href="https://sspai.com/post/94582"><code><strong>AI 时代的真稀缺技能：从「有技术」到「会洞察」</strong></code></a></li></ul>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102627</id>
            <title>三款折后不到35块钱的小游戏，共卖出去6600万套</title>
            <link>https://sspai.com/post/102627</link>
            <guid isPermaLink="false">https://sspai.com/post/102627</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Sep 2025 16:53:53 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p style="margin-left: 8px;">35块钱，除了能好好吃一顿萨莉亚之外，真的能买上几款量大、管饱、且风味十足的独立游戏。不仅如此，这些价格公道的游戏，尽管类型并不新颖，但确确实实只采用了少量的预制资源和现成的创意，剩下的绝大部分内容完全由手工打造。</p><p style="margin-left: 8px;">没错，如果玩家和读者朋友经常关注“平价独立游戏推荐”这个领域的内容，可能第一反应就是《空洞骑士》（Hollow Knight）《PEAK》和《星露谷物语》（Stardew Valley，以下简称“星露谷”）这三款“爆款作品”。</p><p style="margin-left: 8px;">当然，需要说明的是，除了《PEAK》的正式定价为33元之外，另外两款游戏都需要等待打折季，才能以非常超值的价格购入。但讲道理，《星露谷物语》即便按48元的定价购买，也完全可以以“超值”来形容；而以58元的原价购买《空洞骑士》，由于其扎实的游戏机制和设计，仍旧会让玩家朋友们大呼过瘾。此外，和吃萨莉亚不同的是，由于这三款游戏在玩法上完全不同，因此完全不用担心口味上的重复。</p><p style="margin-left: 8px;">《空洞骑士》不必多说，其后续作品《丝之歌》（Hollow Knight: Silk Song）目前是Steam上的热销新品。原作本身基于经典的2D“银河战士恶魔城”（Metroidvania）类型，不论地图探索难度还是战斗难度，都不是休闲玩家能够轻易上手的级别。</p><p style="margin-left: 8px;">但《空洞骑士》1500万套的销量非常惊人。根据彭博社报道，在2019年《丝之歌》首次公布之际，原版游戏就已达成了280万份的销量。这还意味着，截至2025年夏季，苦等续作六年的社区，为《空洞骑士》贡献了至少1200万份的销量。</p><p style="margin-left: 8px;">《空洞骑士》社区对于《丝之歌》的期待，在很大程度上重塑了社区的生长模式。其实在《丝之歌》首次公开的一小段时间，很少有玩家朋友询问《丝之歌》的具体发售时间。但开发商Team Cherry一而再，再而三的拖延，使得社群不得不开始“催更”开发组。不过，这样的行为非但没有让社区感到背叛并因此分崩离析，反而成为了游戏业界和玩家社区的迷因。</p><p style="margin-left: 8px;">甚至，还有好事者成立了一个内容频道，每日发布“《丝之歌》新闻：今天没有《丝之歌》的任何消息。”游戏IP的高质量和迷因化，加上Team Cherry总是会在随机时间发布一些关于《丝之歌》的开发进展，让《空洞骑士》在这几年间，总是会莫名其妙地出现在玩家谈资里，和内容创作者的素材列表中，也因其超低的折扣价，让这款游戏总会“莫名其妙地”出现在玩家的游戏库当中。</p><p style="margin-left: 8px;">喜欢看游戏直播的观众，可能很早就注意到了《PEAK》这款游戏。它属于近几年非常流行的“节目效果”类多人合作游戏。在游戏中，玩家们需要相互配合或者“相互陷害”，以完成一段又一段艰难的爬山之旅。游戏中的一些整蛊道具和细节巧思，不仅仅能够为观众带来上佳的观看体验，也能让玩家自己体会到游戏的用心或“恶毒”之处。</p><p style="margin-left: 8px;">在2025科隆游戏展的开幕发布会现场，主持人Geoff Keighley宣布，《PEAK》全球销量正式突破1000万份，以表彰游戏为行业做出的贡献，也着重强调了独立游戏对于全行业的特殊价值。而早在今年六月，另一款主打节目效果的独立恐怖游戏《R.E.P.O.》也达到了超千万份的销量。</p><p style="margin-left: 8px;">由于价格不贵，配置要求也算合理，因此许多看过了游戏直播的玩家很容易就会召集三五好友买上几份，然后开始游戏。这类游戏的一大优势在于，玩家完全可以在自己的游戏里玩出直播中的效果，童叟无欺，并且会因为这些奇奇怪怪的失误或成功乐上好一阵子。</p><p style="margin-left: 8px;">在游戏外，《PEAK》也像是开发团队Argo Crab和Landfall的自我挑战。《PEAK》本就从一场GameJam而来，这种快速构建游戏的模式对开发者的创意、决策能力和开发能力都有着不小的考验。在《PEAK》发售之后，游戏还会每24小时轮换一次地图，开发组还在前一段是时间进行了一次大规模的地图更新……这些都是开发组希望带给游戏更多新鲜感的举动，这些举动自然而然地转化为了销量。开发团队至今还在修复各种各样的游戏bug，发布各类大大小小的补丁，足见开发这自己对于这款游戏的无比热情，和对社区反馈的积极响应。</p><p style="margin-left: 8px;">《星露谷》的大前辈《牧场物语》（Story of Seasons）在Game Boy流行的年代，就已经在玩家群体里建立了积极的口碑。但这其实还意味着，模仿者若想抓住其精髓，并开发出一款更轻度，更休闲的PC/Mac/Linux/手机端种田游戏，并不是件容易的事情。然而《星露谷》确确实实做到了这一点。在游戏中，玩家只需要做一件事：为自己打造最舒适、最惬意的理想乡——不过笔者真的很讨厌那个钓鱼系统，在游戏初期真的非常搞人心态。</p><p style="margin-left: 8px;">在标题提到的6600万套的销量中，不出意外地，2016年发售的《星露谷》是其中的最大头：截至2024年12月份，《星露谷》全平台已售出4100万份拷贝。并且更惊人的是，这款“老游戏”，仅在2024年一年，就又售出了至少1100万份。</p><p style="margin-left: 8px;">促成这一销量增长的，或许是独立开发者Eric Barone在2024年发布的1.6重大更新所致。这一更新进一步完善了游戏内容，包括新故事、新地图、新作物、更多NPC的互动内容，以及颇受好评的8人联机功能。加上《星露谷》独特的休闲范围，三五好友完全可以通过互联网聚在一起，享受一段惬意的“赛博田园生活”。</p><p style="margin-left: 8px;">《星露谷》还有几个更具普适性的优势。游戏的配置要求极低，上班族们的轻薄办公本完全可以流畅运行。《星露谷》本身在单位时间内的操作量很小，这就让任何人都能够以极快的速度上手游戏。可能在一些人的认知中，只有像是《糖果传奇》这样的游戏才会有较低的上手难度和操作压力，但相应的，游戏内容和玩法也可能较为单一。但很明显，《星露谷》证明了内容丰富但不要求操作的游戏，也能吸引大量轻度玩家。</p><p style="margin-left: 8px;">社区分享可能是另一个让《星露谷》成为爆款的原因。图文内容平台是中国《星露谷》玩家的主阵地，他们会时不时分享自己在游戏中的见闻和经历，也很热衷于为各种各样的角色们“组CP”，满足笔记博主们各种各样的幻想。尽管这些休闲玩家更多地是将《星露谷》这样的电子游戏作为生活的小点缀，而不像硬核的游戏社区那样讨论游戏的机制、系统和玩法，但已经出现的庞大社群内容，已经形成了堪比硬核游戏社区的影响力、流量和价值。</p><p style="margin-left: 8px;">所以，从某种程度上，即便在没有《丝之歌》的那段时日，Team Cherry依旧会通过各种方式向社区提供最新的游戏开发进展；而《星露谷》和《PEAK》游戏推出之后依旧在持续更新新内容，或者完善游戏的各类程序或机制问题。笔者甚至会觉得，即便是这些所谓的“独立游戏”，在某种程度上也可以被称作“服务型游戏”。</p><p style="margin-left: 8px;">尽管这些游戏销量喜人，考虑到游戏的售价，如果从“卖多少回本”这种更加现实的视角考虑问题，也就是将销量转化成真金白银的话，可能这些数据就并没有那么好看了。</p><p style="margin-left: 8px;">我们就按照每款游戏在国区的最低售价来估算吧。《空洞骑士》的国区折扣价为29元，那么其总营收在6120万美元左右；《PEAK》至今未打折，国区售价一直为33元。因此《PEAK》的营收应该在4643万美元左右；销量最大的《星露谷》，折后价格为24元，所以其营收也是最大的，达到了1.38亿美元左右。</p><p style="margin-left: 8px;">但若将这些独立游戏拿来对比最近大热的中等规模游戏《光与影：33号远征队》（Clair Obscur Expedition 33，以下简称“33远征队”）吧。这款游戏的售价在200元左右，因此仅依靠330万份的销量就能创造大约2400万~6070万美元左右的营收。也就是说，《33远征队》如果能再出售个大几百万套，其营收就能轻松超越上文提到的那些独立游戏。</p><p style="margin-left: 8px;">所以，独立游戏想要“赚大钱”，确实需要非常夸张的销量才行。不过，由于Sandfall Interactive的投入也达到了3000~4000万美元，制作成本远高于独立游戏作品，因此想要回本，销量一定不能太差。</p><p style="margin-left: 8px;">但话又说回来，相信关注独立游戏动态的读者和玩家朋友，应该也看到过一些开发者对于游戏销量的期待。“卖几千份就是胜利”，“能卖出去一万份都不止回本了”这样的言论。笔者认为，这或许并不是少数独立开发者的期望，而是大多数人对于现实状况做出的合理评估。所以乐观来看，《空洞骑士》《PEAK》和《星露谷》的开发者们可能都已经实现了财富自由。</p><p style="margin-left: 8px;">不论从销量还是营收，还是这几款游戏本身，独立游戏都展现出了对于整个游戏行业的重大意义和重大价值。开发者们的持续贡献，和游戏社区的和谐生长，造就了《星露谷》和《空洞骑士》的经久不衰；《PEAK》的开发者们则是有着将好点子快速转化为现实的能力，并且在游戏发售之后积极回应社区，与玩家们形成良性互动。尽管游戏仍有瑕疵，但他们的前景一片光明。</p><p style="margin-left: 8px;">如果你觉得AAA游戏变得不好玩了，就来试试这些好玩不贵，且有口皆碑的独立游戏吧。</p><p><i>（头图来源：网络）</i></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102525</id>
            <title>Percento 5.0 适配 iOS 26，个人资产「自动记」</title>
            <link>https://sspai.com/post/102525</link>
            <guid isPermaLink="false">https://sspai.com/post/102525</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Sep 2025 13:32:52 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <blockquote><p>信息冗杂的当下，管理个人财务从来不是一件轻松的事。传统记账方式往往要求我们手动记录每一笔交易，不仅繁琐，还容易遗漏。Percento 使用「余额记账法」，只需要每个月盘点一次资产就足够了。</p></blockquote><h3><strong>全新的导航系统</strong></h3><p>&nbsp;iOS 26 液态玻璃风格带来很多识别性问题，但其可变、可容的功能性设计带来更多操作方式、更多信息阅读空间。</p><p>Percento 5.0 扬长避短进行相应的调整升级，增加更多快捷操作、更多资产比例的直观展示。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/ea1b0f242c62e6f6e381ed27a01f32a7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>&nbsp;5.0 版本在快捷记账、资产管理时操作更加丝滑流畅。</figcaption></figure><h3><strong>「自动记」</strong></h3><p style="margin-left: 0.0px;">Percento 推出了「自动记」功能，用户可以为固定收支设置自动记录。 例如，每月工资、房贷、车贷等。用户可以灵活设置记账日、金额、到期时间、类别等。「自动记」不仅省去记账时间，也避免了遗漏。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/c6bac09d5cd255e10b087972f90a9556.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>添加工资、房租房贷等项目的固定收支，Percento 将定时定期自动记录。</figcaption></figure><p>「自动记」还涵盖数字订阅等：</p><ul><li>🏠 <strong>房租、水电、网费等固定支出</strong></li><li>📈 <strong>每月工资、兼职收入</strong></li><li>🛒 <strong>每周生活开销</strong></li><li>📺 <strong>年度订阅服务如 优酷会员、云音乐、iCloud等</strong></li><li>🎓 <strong>学费、保险、贷款偿还计划</strong></li></ul><h3 style="margin-left: 0px;">图示升级，检索更方便</h3><p style="margin-left: 0px;">5.0 版本进一步完善了资产占比等细节，连子账户在类别中比例也一目了然。用户在管理自己的资产、做相应的投资决策时更加直观，心里更有底。</p><p style="margin-left: 0px;">新增「搜索」功能，在大量的历史记录中快速查找资产与交易记录，回溯决策更快更准。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/711604f41fad098184a4cc551e9e0fb9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>显示每个「投资」账户所占百分比，投资决策更方便。</figcaption></figure><h3 style="margin-left: 0px;"><strong>下载使用</strong></h3><p style="margin-left: 0px;">在苹果 App Store 搜索 Percento 或 <a href="https://sspai.com/link?target=https%3A%2F%2Fwww.percento.app%2Fcn%2F" target="_blank">前往官网了解更多</a></p><span class="ss-linkCard">&nbsp;</span><h3 style="margin-left: 0px;"><strong>🎁 送码</strong></h3><p style="margin-left: 0px;">任何反馈欢迎留言。我们准备了<strong>15份价值88元的年会员兑换码</strong>，免费送给前15名留言区观众，我们将在<strong>9月24日</strong>私信联系获奖观众。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102600</id>
            <title>Figma Make / Sites / Buzz ——设计即生产</title>
            <link>https://sspai.com/post/102600</link>
            <guid isPermaLink="false">https://sspai.com/post/102600</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Sep 2025 08:03:54 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p style="margin-left: 0px;"><strong>AI 辅助创造声明</strong></p><p style="margin-left: 0px;">本文在创作过程中部分使用了 AI (OpenAI ChatGPT) 工具辅助，包括事实检索、文本润色和结构建议等。</p><p style="margin-left: 0px;">所有生成结果、包括相关数据和事实，均已经过作者逐项核查，确保内容准确、合规并具备个人原创性。如有疏漏，欢迎指正。</p><h2>引言</h2><p>某个周六，深夜三点。阿浩盯着屏幕里那行粗体标题——记录与回顾，一个不久之前不断在他脑海中翻来覆去 idea。在用户界面中创建一个像样的入口、让用户留下第一条想法、再在第二天提醒用户回来继续回顾这个想法、并持续打磨这个想法——这就是阿浩 idea 的 MVP 的样子。</p><p>可每次打开新建项目，右侧那列设置像山脉一样排开：登录策略、隐私条款、图片压缩、色彩管理、埋点与弹窗频率。一想到从 idea 到 release 之间这些层层台阶，他的心口先紧了一下。昨晚的便签里写着先把流程走通，可当他开始画骨架，另一个声音冒出来：没有预算请人，自己要写文案、做图、做动效、做官网，连支付选项也得找第三方里绕。焦虑不是轰鸣的大浪，而是一条细细的暗流。每当他以为今天可以了，又会看见某个按钮在小屏设备上轻微走样。拖到天亮，生理和心理都开始计较再等等。</p><p>九点，阳光拨开窗帘的缝，他把刚才的工作打包进一个文件夹，拖进进行中旁边的灰色分组。手机里朋友留言：要不先做个可点的链接？他打了几个字又删掉，最终只回了一句我再看看。这句再看看并不是拒绝，而是现实里更常见的结局：畏难心理把行动分解成越来越细的犹豫，热度一退，想法就像没有被接生的孩子一样，悄无声息地胎死腹中。阿浩沮丧地关掉电脑，出门买早午餐，脑子里还挂着昨夜那条未完成的路径。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/52dd865ba86ce600f90e82f2835422d0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>同日，同城，某初创团队，上午，周会，二十个人排排坐，屏幕轮番切换：设计稿、原型、预览环境、官网草案、广告投放看板。产品经理把需求拆成卡片，设计人员把变量库打开讲最新命名，前端工程师演示一个在安卓机上的滚动抖动，市场同事问首屏文案能不能再直接一点。每个人都在对自己负责的部分给出答案，连接答案的，是导出、链接、截图。<br />午后，涟漪从一个小改动开始扩散。设计人员把按钮圆角从 8 调到 10，官网样式要同步，标题替换了 2 个字，邮件主题和投放文案都要重写；运营建议新增快速导入入口，埋点方案随之调整，路由表重排。每一步都不荒唐，却在时间上彼此叠加。下午六点，合并请求等待评审，市场要定晚上八点的发布位，客服提醒 FAQ 还没和最新文案对齐。大家的光标在不同界面上移动，像是同在一个赛道，实际节拍却各自为政。</p><p>临近下班，团队负责人请大家把真实状态写进汇总文档。表格很齐整，可当他追问现在线上预览对应哪个分支、文案最终口径在哪里时，答案散落在不同聊天记录和云盘路径里。更可怕的是，失真也在静悄悄地发生——图稿看起来一致，可代码里的样式并非同源；官网首屏换了措辞，App 内的引导仍沿用旧话术；市场素材选用的截图来自上上周的原型。问题在细碎摩擦中被放大。负责人心生疑惑：我们正在做的是同一件事吗？还是各自做着看起来相似的不同的副本？</p><p>无论是独立创作者还是产品小团队，要将一个创意真正变为落地的产品都面临着相似的阻力。前者往往囿于技术和资源所限，缺乏一站式工具支援，一个人难以涵盖设计之外的编程开发、部署运营等各个环节；后者虽然人员齐备，却因为不同角色和工具间的衔接摩擦不断，从设计到代码再到市场的每一步都可能消耗额外时间并放大沟通成本。一项创意在实现过程中常常需要跨越多重门槛，每增加一道环节都增加了延误与走样的风险。繁琐的流程和重复的修改让即便满怀激情的团队也不禁感叹创意落地之艰难。</p><p>这样的困境引人思考：有没有一种更顺畅的途径，能够降低从构思到成品的障碍？2025年，Figma 正面正向地回应了这一诉求。推出了多个重磅功能与新品——Make、Sites、Buzz 和 Draw 等，并在 Config 2025 明确表达从 idea 到 release 的平台化意图，提供从设计、开发到内容创作的一体化工具支援。这些新功能涵盖了从一键生成并发布网站到无代码构建应用逻辑、从 AI 辅助内容生产到端到端的团队协作等多个方面。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/6cf8d6b63f66218e7f0fd7fbf110f782.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>其中，Make 以「prompt‑to‑app」将自然语言转化为原型与交互雏形；Sites 试图把「设计—构建—上线」收拢到同一链路；Draw 强化了矢量与绘制的原生能力；Buzz 则作为面向品牌和营销内容的发布工具。同时 AI 工具被扩展到 Design、FigJam、Slides、Sites 与 Buzz 等产品之中。就类别而言，这一轮更新大致覆盖了四个面向：网站发布与托管 (Sites)、AI 生成与自动化 (Make)、创作工具与矢量能力 (Draw)、以及跨产品的实时协作与交付支持 (含 Buzz 与持续更新的发布与权限能力)。</p><p>它们并非简单叠加新入口。在统一上下文里改动变量、组件、文案与数据，减少导出、交接与手工同步所带来的中断。这样一来，像阿浩这样的独立创作者如今可以在同一平台内完成从界面设计到网站上线的绝大部分工作；而对于那支初创团队而言，各岗位的成员也能够在统一环境下衔接彼此的环节，减少不同工具之间协作的摩擦和信息遗漏。这是否足以回应我们在开场中看到的独立创作者与产品小团队的共同瓶颈？</p><p>Figma 生态目前已经非常丰富了，仅仅一篇文章无法触达到所有产品的细枝末节。所以本文仅仅着重介绍 Figma 2025 更新的 <strong>Make</strong>、<strong>Sites</strong>、<strong>Buzz</strong>&nbsp;。在展开之前，我们先来看看 Figma 生态全貌。</p><h2>Figma 生态全貌</h2><p>自 2025 年以来，Figma 已从单一的协作设计工具发展为覆盖产品设计全流程的完整产品矩阵。现在的 Figma 生态系统囊括多个核心产品，从创意构思到设计实施再到开发交付，以及品牌传播，每个环节都有针对性的工具协同配合。</p><h3>Figma 产品矩阵</h3><p>如果把从 idea 到 release 视为一条连续的生产带，Figma 的产品矩阵大致由三个相互咬合的板块构成：其一是负责表达与结构的创作内核 (Design、Variables 与 Grid)；其二是负责共识与交付的协作枢纽 (FigJam 与 Dev Mode)；其三是直接面向产出的发布端 (Sites、Make 与 Buzz)。这三个板块不是随意拼搭，而是共享变量、组件与权限体系的一体化系统，意图把「看到—理解—修改—交付」放回同一语境，以减少导出与交接造成的信息散射。</p><p>先来看看负责表达与结构的创作内核：</p><p><strong>Design——协同高效的设计平台</strong>：Design 仍是 Figma 产品矩阵的基座，一直专注于提供多人实时协作的界面设计环境，让团队可以在同一个文件中共同绘制 UI、创建线框图、设计高保真原型，并利用组件和样式系统保持一致性。随着矢量插画套件的引入，Design 在矢量编辑方面更加强大，引入了多选向量节点编辑、布尔联合、图形生成器等高级绘图功能，以及可变宽度描边、路径纹理、噪点模糊等效果，让设计师能够在 Figma 内完成简单插画和复杂图形绘制。对于 Figma 产品矩阵来说，Design 的价值不只是画图，而是承载变量、组件与版式逻辑的「事实来源」，确保后续所有环节以同一份结构与语义为锚点；</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/dce9bf8939807152a0e9895f16c54f00.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><strong>Variables——系统设计利器</strong>：Variables 则是这份「事实来源」的参数化层。Variables 本质上是设计中的可复用参数，设计师可以将颜色、字体尺寸、间距等定义为变量，并应用到多个组件中。借助 Variables，团队得以实现主题的快捷切换以及跨多个文件批量更新设计规格，从而提高设计维护性并更紧密地与代码中的设计令牌对应。这些变量还能在 Dev Mode 中映射到代码变量，方便开发人员提取一致的设计常量。Variables 让设计系统的约束转化为可执行的值域，使风格、文案与交互在不同文件间保持一致，并在交接阶段给到开发更清晰的对照关系；</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/d67c94e58e72ceb97f7c48bcf1e6113a.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><strong>Grid——重新定义 Auto Layout 网格</strong>：2025 年的 Grid 正是 Figma 针对设计基础能力的一次重大升级——把版式从一维推向二维，是对 Auto Layout 思路的系统级补全。长期以来，如何在设计工具中优雅地实现复杂网格布局一直是设计师的痛点。过去 Figma 的 Auto Layout 主要支持单一方向的垂直或水平布局，对于复杂的栅格排版，设计师往往需要嵌套多层框架或手动对齐。Grid 还天然支持响应式设计：当调整父级帧尺寸时，网格内元素会根据预设规则实时重排。这一变化使响应式的结构逻辑更自然地嵌入画布，而不再依赖多重嵌套与权宜之计。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/3bbec9e86971902ade4a7133f0faaf7f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>再来看看负责共识与交付的协作枢纽：</p><p><strong>FigJam——早期策划与团队脑暴</strong>：在具体设计工作开始之前，产品构思和团队研讨同样重要。FigJam 的定位是为团队提供一个自由发散想法的空间，让各角色都能参与到产品早期设计过程中。它承担早期洞察、脑暴、方案对齐与流程拆解的公共空间角色。产品团队会在 FigJam 中开展设计冲刺、需求讨论、头脑风暴会议，然后将结论和草图无缝带入后续的 Design 进行细化。FigJam 与 Design 间的内容可以相互复制粘贴，团队在白板上产出的用户流程图或线框图，可以直接移入 Figma Design 中继续深化设计。FigJam 为 Figma 生态补齐了从 0 到 1 的最前端环节；</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/dead2a70e3c0931830e81755a6ede015.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><strong>Dev Mode——连接设计与开发的桥梁</strong>：当设计稿准备就绪，如何高效地交付给开发实现？Figma 的答案是 Dev Mode。Dev Mode 是 Figma 提供的一个专为开发人员打造的工作模式，它使开发人员能够方便地检查设计细节并将其转换为代码实现要点。Figma 还不断丰富 Dev Mode 的能力，例如引入 Ready for Dev 视图、Code Connect 功能。相比传统导出切图的年代，Dev Mode 把「该做什么、改了什么、为什么改」集中到一个视图里，降低了跨角色翻译成本，也让设计即规范的理念更可落地。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/5df90f7d96512da1b028a1d041ebdd90.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>当创作内核与协作枢纽稳定后，产品矩阵的第三层——面向产出的发布端——决定了这条生产带能否真正闭环。2025 年的 Sites、Make、Buzz，分别把上线网站、生成可用交互/应用雏形、规模化产出品牌素材纳入同一栈内，试图把「交给别的工具」的那一步省掉，或者至少把上下游的来回摩擦降到最低。</p><p><strong>Make——从设计到代码的 AI 助手</strong>：Make 是产品矩阵里最具生成式色彩的，定位为「提示即代码」的生成式设计工具。它通过对话式把一段需求描述或一份现有设计转化为可运行的原型或 Web 应用雏形，并允许在图形与代码双视角间来回精修。就产品矩阵协同而言，Make 的意义在于把可执行的验证前移，更重要的是，Make 生成的原型依然严格遵循设计意图和视觉规范，确保在快速迭代的同时不偏离最初的设计品质；</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/6c58bb625b9cbbcffb29273ddedee16f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><strong>Sites——一体化的 Web 建站工具</strong>：Sites 的定位是在一个环境里完成设计、原型与发布的建站工具。其定位非常明确：让设计师所见即所得地将设计稿变成真正上线的响应式网站。Sites 支持将 Design 中现有的设计画板直接粘贴过来，自动转换为适配不同屏幕尺寸的弹性布局。它内置了丰富的响应式组件和版式模板，还集成了诸如滚动视差效果、自定义鼠标光标、悬停动效等交互元素。后续又补充了站点访问的口令保护等治理能力，表明其正沿真实使用场景的约束持续完善；</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/31e4a5dc61e5956c0682d282954e5613.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><strong>Buzz——品牌内容协作空间</strong>：产品的发布只是起点，后续的市场宣传同样需要大量视觉内容产出。Buzz 正是为此应运而生的新产品，其定位在于让品牌资产的生产变得像流水线一样高效，同时确保输出内容的视觉一致性和合规性。协作过程中，设计师依然扮演把关人和赋能者的角色：通过 Buzz 集中管理模板和元素库，确保所有输出都保持品牌一致。模板与 Design 同源，既能保障底层变量与组件的一致，也避免了拷来拷去的失真。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/94711613082010822e025bcbac65b971.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>将 Figma 产品矩阵中主要成员介绍后，我们得到一条从「语义生成—结构定型—可执行验证—上线与传播」的不间断的执行路径：用户故事与范围通过 FigJam 形成共识，关键流程被带入 Design 在 Variables 与 Grid 的框架中定型；需要运行起来验证的部分转入 Make 生成交互雏形，能上线的页面由 Sites 发布为真实站点；与此同时，Buzz 基于同源模板派生出一致的外宣资产，Dev Mode 则让工程视角在任何时点都能接入同一事实来源，使得可以轻松检查就绪状态、比对差异与落实实现。与过去工具拼贴不同，这条路径不是「导出一个文件/交接一个链接」，而是「在同一上下文中改变对象的状态」：对象从草图、组件、变量，逐步升级为原型、站点与素材，但身份始终可追溯，这正是产品矩阵作为「一个场所」的意义。</p><p>当然，Figma 产品矩阵的<strong>局限性</strong>也需要被如实标注。Sites 虽然把从设计到上线的距离大幅压缩，但是，复杂的业务逻辑、深度数据层与自定义基础设施的覆盖并非其目标；其价值更在快速上线、迅速验证、易于治理的常见场景。Make 的生成式能力提升了探索速度，却不自动等同于可维持的工程实现，它更像是从 0 到 1 的加速器，帮助团队在投入真正的开发资源前做更有把握的选择。Buzz 的模板治理能显著降低品牌走样的风险，但对需要高度创意、跨媒介的整合传播，仍需专业团队从策略到执行的完整操盘。Grid 的二维布局让表达更贴近前端范式，可它不是自动生成 CSS，而是为工程对齐提供更明确的结构。Dev Mode 也并非把代码写完，而是让该做什么、差在哪里、变量是什么的答案更可见。换句话说，<strong>产品矩阵降低的是启动与协同的门槛，而不是复杂度本身</strong>。</p><p>到 2025 年 9 月，Figma 各个核心产品模块已经交织成一个有机协作的生态图景，各模块各司其职又互相依赖，通过共享的云端架构和协作机制维持着信息流转的秩序。这套产品矩阵覆盖了从创意孕育到最终落地的完整路径：</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/f09ed3a2a57209f14d365d069cd36ede.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>综上所述，Figma 平台各产品既划分了从构思、设计到开发、营销的阶段性任务，又通过数据互通和无缝衔接呈现出有机互补的协同秩序。Figma 打造了一套「全能工作室」，这样的一位全能助手在独立创作者心中放了一把火，彻底点燃他们敢于突破束缚、把灵感化为行动、将个人想象力推向世界舞台的激情。Figma 提供了一个「一站式平台」，这样的体验标志着相较过去工具链实现了质的飞跃——设计、开发、营销等各角色如今都能在同一平台各尽其职又协同无间，真正将所有环节融汇为一个紧密联结的生态整体。</p><h3>全新定价方案</h3><p>Figma 于 2025 年 3 月宣布启用全新的计费模式，将过往以产品为单位的订阅体系，统一转化为以「seat」为核心的结构。新的方案分为三类：Full seat、Collab seat 与 Dev seat。其中，Full seat 具备最完整的功能权限，覆盖 Design、FigJam、Slides 以及 Dev Mode 等全流程能力，面向需要在设计、协作、开发交付等环节均深度参与的核心成员。Dev seat 专门为工程师设计，提供 FigJam、Slides、Buzz 和 Dev Mode 的部分功能。Collab seat 则保留了 Design 和 FigJam 的编辑与评论权限，适合产品经理或非开发的协作者，但不含开发模式功能。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/dedf33cef50d9af17e82fbcb5d750a43.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>根据 Figma 官网的信息，未来还会根据用户在团队的中的角色，区分出一个 Content seat。该席位类型会给用户访问 Buzz、Sites CMS、Slides 和 FigJam 的权限。也就是说，拥有 Content seat 的人可以做协作白板、制作演示文稿、管理内容网站/CMS、以及品牌资产内容输出类工作。不是重点做原型设计、UI 设计或者代码交付那种重设计/开发工作。</p><h2>Figma 之 Make、Sites、Buzz</h2><h3>Make：原型逻辑构建与交互生成</h3><p>Make 是嵌入 Figma 的「从提示到应用」的生成式创作空间，面向没有工程背景的设计与产品人，让想法快速变成可运行的原型或轻量 Web 应用。你用对话式提示给出意图、例子和限制，Make 生成界面、交互与基础数据结构，生成后仍可在预览里改写文案、替换图片、调节间距与约束，必要时直接编辑代码。</p><p>过去，许多创意因为验证成本较高而被束之高阁，并且想法到可运行演示常被跨工具与排期绊住脚，等待前端支援经常需要很久，灵感滞留在幻灯片。Make 则大幅降低了尝试新点子的成本，鼓励创作者和团队大胆实验各种想法，在「玩」的过程中迸发出更有趣的解决方案 (现在的脑暴会议，大家都来贡献 prompt 吧)。而且，用 Make 以对话式提示生成可点击流程与关键页面，方向验证进入很短的节奏，评审基于可操作的界面展开。Make 再连接 Supabase，即得登录、表与简单 API，原型从假数据跃迁到可信体验，决策更贴近真实场景。</p><p>1. <strong>自然语言生成界面</strong>：将自然语言提示转化为界面设计 Make&nbsp;的核心能力之一。用户在生成面板中输入简要或详细描述后，系统会根据描述创建页面结构、界面元素和视觉风格。使用者可以指定界面类型、功能区块、品牌调性或主题色，生成后在画布上查看并进一步调整。生成过程是交互式的，使用者可对文本提示进行修改并即时重新生成，从而快速迭代设计方案。该能力让非专业设计师也能通过语言描述迅速获得界面原型，并支援实时编辑调整；</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/c47deda4767dda23fcf68d83a2defd84.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>2. <strong>图稿与原型转高保真设计</strong>：Make&nbsp;能够识别手绘草图、线框图或低保真原型并转换为高保真界面。用户可以将草稿上传或从 Figma 文档中选择特定页面，系统会分析布局、文本和交互关系，生成符合现代设计规范的界面。转换过程中可选择不同的视觉风格或设计体系，生成后可直接在 Figma 中查看和编辑。基础操作包括导入草图、选择转换模式、确认生成结果并对个别元素进行细化。此功能降低了从概念到高保真设计的门槛，使团队能迅速评估和验证设计方案；</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/275f64b3e3619437d8736921d26e6bfa.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>3. <strong>guidelines 和 styles</strong>：用户可以通过「Edit guidelines」和「Edit styles」来限制生成的界面设计。「Edit guidelines」提供对生成结果的规则约束能力，用户可以在此输入或修改指令，从而限定页面结构、交互逻辑或布局规范。例如可指定配色范围、响应式规则或内容层级，确保生成内容符合预期标准。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/fdf927dfc030ab9eaee7538ce0c90748.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>操作上，只需选中目标区域，进入编辑面板，补充或调整 guideline 文本，再触发更新即可。它偏向原则层面的把控，用于定义整体方向。「Edit styles」则聚焦于视觉细节与界面语言的统一，允许用户调整字体、颜色、间距、圆角、按钮形态等属性，或直接应用已有的设计系统样式。操作上，选择组件或画面，打开样式面板，即可修改或替换样式。它偏向执行层面，确保生成结果在外观上保持一致与美观；</p><p>4. <strong>代码生成与工程输出</strong>：Make&nbsp;不仅提供视觉设计，还能够生成前端代码，加快设计与开发之间的衔接。用户在生成界面后，可以点击“查看代码”面板查看由系统生成的 HTML、CSS 或 React 代码。代码片段与设计结构一一对应，可复制到开发环境中使用。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/adcc1bfb51a707c410ca115d0d54b893.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>操作流程包括在设计界面中选中页面或组件、打开代码视图、选择所需语言格式并导出。生成的代码旨在作为开发起点，开发者可进一步重构或集成至现有项目中。这一能力减少了从设计到实现的重复劳动，并帮助团队验证设计可行性；</p><p>5. <strong>交互与逻辑设置</strong>：在生成界面的同时，Make&nbsp;能够推断基本的页面逻辑和交互路径。例如我输入「Create an e-commerce search interface with a search bar, a search button, and a results list. Add a homepage and a product detail page.」，在结果中可以看到，Make 生成的界面中自动就带有交互逻辑。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/b8ac6e8d99d9cdcef258f9144aa5ac16.gif" /></figure><p>此外，用户可以通过在画布上选中元素并使用原型连接工具调整交互关系，也可以添加、删除或重排页面流。生成的逻辑结构支持快速预览和交互测试，帮助团队更早识别体验问题。此功能使生成的界面不仅仅是静态稿，而是具备初步交互能力的可点击原型；</p><p>6. <strong>Point and edit</strong>：此功能让用户在生成的界面上以最直观的方式进行修改。只需用鼠标指向某个元素，即可直接对其内容、属性或样式进行编辑，无需反复回到属性面板或重新输入提示。比如，点击文本框即可改写文案，选择按钮即可调整尺寸或替换样式，修改颜色、字体或布局也能即时生效。与传统的属性表单式操作相比，这种方式更符合设计直觉避免了上下切换的干扰。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/8bca9109a35a2fc37be81bd815cb308a.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>用户还能在局部修改的同时保持整体结构不被打乱，使 AI 生成的界面既能快速成型，又能在细节上灵活调整。「Point and edit」将生成与手动编辑结合在同一流程里，既保留 AI 带来的速度，又不失人工掌控的精细度。</p><p>对于独立创作者：独立创作者往往需要兼任设计、编码、内容创作和推广等多重角色。过去不得不花大量时间在并不擅长的前端开发上，或者放慢创作节奏去寻求他人帮助。有了 Make，独立创作者在完成初步界面设计后，只需经过几段对话就生成了可运行的应用原型，大大减轻了编码负担。比如，如果想验证一个新功能创意，过去可能要边学编程边开发数周，如今通过 AI 一天内就做出了交互版本，并立即上线收集用户反馈。以更少精力跨过技术门槛，把更多时间投入在创意内容本身。</p><p>对于产品开发小团队：比如小团队要验证一个跨端收集组件，设计与产品把「添加—编辑—撤销」这条关键交互先在 Make 跑通，工程同事同步评审代码层能否被现有框架复用，并记录潜在的技术债；几轮之后，团队对空态、失败重试与边界条件达成一致，并确定复杂场景下的性能与无障碍处理。接着他们把链接发给内部销售与客服做「走查」，收集短时间的真实使用反馈，再带着标注与示例进入实现环节，还把决定不做的选项写入注释，避免未来反复拉扯。</p><p>Make 不适合承载复杂合规与交易系统，也不适合长期维护的大型前端仓库；把在 Make 里验证过的交互迁入团队工程，用 Dev Mode 与成熟框架重写或抽象为可复用模块，更利于安全与扩展。若你的诉求是想通过 Figma 满足高性能图形、硬件访问、原生移动体验、严肃数据建模、跨系统编排与高并发：千万别硬刚，Make 不是正确容器，应转向后端平台或工作流编排方案，把 Make 作为探索与说服的前置。</p><h3>Sites：响应式网页设计与一键发布</h3><p>Figma Sites 是嵌入 Figma 的一站式建站工具，正是对社区多年「一键发布」呼声的回应，让设计师无需离开熟悉的设计环境就能完成定制网页的设计、搭建和发布。它直接打通了从设计到上线的最后环节：团队只需点击一次 Publish &nbsp;按钮，就能将设计稿变成在线网站并对外发布。本质上，Sites 是 Figma 进军网站内容管理领域的一次尝试，提供了构建、托管和动态更新网页的一条龙能力。借助 Auto Layout 响应式布局、组件变体以及预置的交互效果等新特性，设计师无需代码就能创建出适配各种屏幕的动态网页体验。这一全新工作流消除了设计与开发间的来回切换，使个人和小团队也能更快地将创意付诸实践。</p><p>产品设计稿交付开发往往经历反复沟通和繁琐实现，导致从设计到上线耗时较长。然而如果用户没有技术背景，则难以落地亲自敲代码，需要学习编码或另请开发帮助。Sites 提供了类似 Webflow 的可视化建站体验，让用户在熟悉的环境中通过拖拽与配置就能创建网站，无需编写任何代码，省去切换工具和人工翻译代码的过程。而且传统网页需要开发者针对不同屏幕单独优化布局和样式，多端适配工作量大且容易出错。不过，如今优雅地解决「响应式难题」已经是设计/前端/视觉等解决方案的标准配置。Sites 内置响应式断点机制，可根据屏幕尺寸自适应调整布局，让一个设计稿即可无缝覆盖桌面、平板和手机。</p><p>1. <strong>发布与版本管理</strong>：一键发布与预览：设计完成后可以直接点击「Publish」按钮，将文件打包为响应式网站并部署到生产环境。发布前系统会进行必要检查，生成的网页可在桌面、平板与手机断点之间自适应切换。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/8c51ba374013554eb5a8e4bcf81446ae.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>每个站点都会分配一个 figma.site 域名，发布面板会显示可访问的 URL，方便复制共享。工具会为每次发布保留版本历史 (约 20 条)。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/544bff89687adc76fcb8b7c59c4fdd03.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>2. <strong>域名配置与访问控制</strong>：默认与自定义域名：初次发布时系统自动生成项目名 .figma.site 的 HTTPS 域名；用户可在设置中绑定一个自有域名。绑定流程要求在域名 DNS 中添加指向 sites.figma.net 的 CNAME 记录和一个 TXT 记录，原有 DNS 记录无需迁移。2025 年 7 月起支持顶级域名解析，以往仅支持子域名。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/c59935fc0d3c3237ae90757ad8f21f4e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>平台为自定义域名签发免费 SSL 证书，并且在 2026 年前自定义域名、流量与存储均不收费。每个站点只能绑定一个域名，且 Figma 本身不出售域名。除生成的 URL 外没有访问限制功能。当前版本不支持添加密码或 IP 白名单；需要关闭访问时只能通过 “取消发布” 功能将站点下线。</p><p>3. <strong>SEO 与元数据设置</strong>：在你用 Sites 发布站点时，系统会在页面 <code>&lt;head&gt;</code> 部分写入一段 <code>&lt;meta name="robots" content="noindex"&gt;</code> 阻止搜索引擎收录。在设置面板中可为每个页面填写页面标题、Meta 描述和语言属性，并可自定义社交分享的 Open&nbsp;Graph 文案与封面。这些信息会在页面头部生成相应的 <code>&lt;title&gt;</code>、<code>&lt;meta&gt;</code>&nbsp;标签。并且可以单独取消不索引，允许该页被搜索引擎抓取。平台会自动生成 sitemap.xml，并保证页面文本可被爬虫读取。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/a484fe0d356a6117515f5d952f0b9983.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>设计中的文本或组件可转成 HTML 的 H1-H6 标题元素，加强语义结构；所有链接都会输出为 <code>&lt;a&gt; </code>标签，确保正确的超链接语义。该工具不提供 JSON‑LD 或其他结构化数据的插入入口。在发布设置中可填写 Google&nbsp;Analytics 等第三方跟踪代码 ID；发布后代码会自动插入站点，便于分析访问数据。</p><p>4. <strong>多页管理与导航</strong>：在 Webpages 中可点击「Add webpage」创建多页面站点。同一站点内可通过底部的断点按钮快速添加平板和移动端版本。在桌面视图中添加的内容会自动同步到其他断点，后续在不同断点上调整布局不会影响内容本身。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/e4b3db3460cd3ece027885d929ed19fe.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>用户可以在侧边栏中调整页面顺序，改变站点导航结构；通过拖拽可重新组织章节和页面层级，形成清晰的导航条目。选中任意元素后，在右侧的「Interaction」面板设置链接目标，可将按钮、文本等连接到同一站点的其他页面或外部地址。交互支持点击、鼠标悬停和按下等触发方式，页面跳转或锚点定位可通过选择不同事件实现。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/4058e444373e943361a7eb9c6c99058e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>5.<strong>交互效果与动画</strong>：除了基本跳转，该工具提供悬停效果、按压状态和类型机特效等预设动画，可快速为按钮或文本添加动态体验。在交互面板选择组件后即可应用预设并调整时长、延迟等参数。通过交互面板可以为不同组件设置单击或悬停触发的动画，例如淡入、缩放或切换样式；组合多个事件可构建复杂的互动体验。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/38e6ea92461623de983f2c09a0af823a.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>6. <strong>自定义代码与扩展</strong>：部分版本的发布设置允许插入自定义头部或正文代码段，用于引入额外的 JavaScript、CSS 或第三方服务。这些代码会在发布时注入到网页结构中，适合接入聊天插件、分析脚本或定制样式。提供多种预制区块，用户可以拖拽添加导航栏、页脚、表单等模块，并根据需求调整样式。未来版本计划引入内容管理系统 (CMS) 扩展，以便管理动态内容。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/e7661203880a8068dc4db7ec72a90af7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>以上各项能力构成了 Figma&nbsp;Sites 在发布阶段的核心功能，涵盖从一键发布、域名绑定、SEO 设置，到多页组织、交互效果、资源优化和代码扩展等多方面需求，帮助用户在不依赖前端开发的情况下完成网站上线与管理。</p><p>对于独立创作者：如果想发布个人作品集或为自己的副业项目搭建宣传站点，现在无需额外聘请开发或学习代码，就能在 Figma 中完成设计并一键上线。过去从创意到网页上线往往因为技术门槛而中途夭折，而借助 Sites，他可以将一个创意在当天变成线上展示，敏捷地验证想法。这种个人全栈式的创作方式大大降低了尝试新点子的成本，独立博主、自由插画师甚至小网店店主都能通过 Sites 快速打造自己的在线存在。</p><p>对于产品开发小团队：Sites 则充当了一站式协作平台的角色。以一个创业团队为例，设计师可以直接在 Sites 中搭建产品官网或活动页面，产品经理和内容运营也能在同一个文件中实时编辑文案与素材，共同参与页面搭建。由于不再依赖开发落地，团队可以在产品发布前不断迭代完善营销页面的设计和内容，加快响应用户反馈的速度。以往需要多个角色配合、多轮对接才能完成的任务，现在通过 Sites 协同几天内就能搞定，大幅压缩了产品从概念到上线的时间。</p><p>值得注意的是，与前文讲到的 Make 类似。不该把 Sites 当成复杂业务的终局方案：涉及账号体系、支付、数据库、重型权限与个性化推荐的站点，应交给成熟的工程栈处理。另外，追求极致 SEO、结构化数据与多站点路由的品牌官网，建议采用专业部署链路。同时请记住：发布会包含画布上的所有页面，草稿应另存以免误发；代码层虽提供结构化产物，但要接入现有仓库仍需工程支持与代码审查。&nbsp;</p><h3>Buzz：团队协作内容共享与传播</h3><p>Buzz 是 Figma 平台中新推出的营销素材创作空间，专为团队协作产出各类品牌视觉内容而设。简单来说，它就像设计领域的「Canva」，提供快速制作社交帖子、横幅广告、活动海报等静态素材的效率，同时保持了 Figma 一贯的专业设计水准和品牌一致性。通过 Buzz，传统上隔阂明显的设计师与市场人员得以在同一环境中共同工作，减少反复沟通和文件交接，让创意从构思到成品的流程更加顺畅。目前该工具处于公开测试阶段，所有用户均可免费试用。</p><p>以往要完成一轮从设计到宣传素材的制作，需要辗转换位多个角色和工具，这往往让好创意止步于繁琐流程的畏难情绪。如今借助 Buzz，一人即可在 Figma 中完成设计稿并产出所需的推广图、海报等视觉内容，在单一平台实现从 idea 到 release 宣传的闭环。在团队中，市场营销素材的制作常依赖设计师反复出图，或由市场人员借助第三方工具临时拼凑，导致品牌风格不统一、效率低下。而 Buzz 引入了可定制模板和受控编辑模式，市场同事无需精通设计软件也能独立产出高质量的品牌内容，实现了「设计师预设框架，非设计人员安全填充」的协作。</p><p>1. <strong>模板管理与创作</strong>：Buzz 提供了丰富的模板库，包括由 Figma 官方策划的精美模板和团队自己创建的品牌模板。创建新素材时，可从多种社交媒体帖子、广告、宣传单等模板中挑选最符合需求的设计，只需替换占位文本和图片即可快速生成成品。团队成员还可以根据业务需要自定义模板并发布给整个团队使用——品牌设计师一次性搭建好模板后，社交运营或销售等同事就能自主制作各类内容，同时保证风格一致。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/55b3be12e0bb87b82b5bdfa776ec2c8d.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>2. <strong>受控编辑机制</strong>：为了平衡品牌的一致性与创意自由，Buzz 引入了受控编辑模式。模板创建者可预先锁定版式、Logo 等关键元素，仅开放文本内容、图像等字段供他人编辑。当团队其他成员基于模板制作素材时，会看到简化的编辑界面，按照指引修改文字或替换图片即可，既方便上手又不必担心破坏设计规范。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/26bab104ee82e43b3e1fab70ee00a1c7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/9de6c38a1542ea53824404f9f87d6759.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>如果遇到特殊需求需要突破模板限制，用户也可以一键解除锁定进入自由编辑模式，使用完整的 Figma 工具进行调整。这种“双模式”设计让日常内容制作遵循品牌标准，而在特殊活动中仍能享有充分的创意空间。</p><p>3. <strong>批量创建与多重编辑</strong>：Buzz 内置「Bulk create」，允许用户通过导入表格数据，一次性生成多份素材变体。用户只需将表格中的多组文本链接至模板占位符，即可自动批量生成对应数量的图片。生成的所有素材还能统一导出下载 (例如批量输出 PNG 图像文件)，方便应用于各推广渠道。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/c1a2f035d41ac1ce47c4ac4d21597a78.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>同时，Buzz 支持多资产的同步编辑：对某一设计要素的修改可一键应用到所有选定的素材上。例如，选中多张海报的标题文本框并修改文字，所有这些海报的标题将实时同步更新。配合 Grid，所有尺寸和版本的设计效果能够同时呈现，方便统一检查样式并进行全局调整。</p><p>4. <strong>AI 能力集成</strong>：Buzz 还整合了 Figma 平台的 AI 工具，以提升创作效率。即使缺少合适的素材，用户也可以直接在 Buzz 中通过提示词生成所需图片，并利用 AI 模型对图片进行智能编辑——例如放大提升分辨率或去除背景。对于文字内容，Buzz 的 AI 助手可帮助润色文案语气、翻译多语言版本，或将段落自动压缩提炼成要点。这些 AI 功能贴合实际工作场景，承担了许多耗时的修图和文字处理任务，让非设计人士也能轻松打造出专业、精美的视觉素材。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/a7aa98d3e9a89997b353bc13ad033e47.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>对于独立创作者：独立创作者在 Buzz 找到贴合品牌风格的社交媒体帖子模板。每当迭代更新自由品牌内容时，只需替换标题、照片等内容，即刻生成一套包含微博、公众号、Instagram 等平台所需尺寸的精美宣传图，让受众一眼认出这是某品牌的官方内容。同样地，一个独立网店店主借助 Buzz 内的电商促销模板，快速制作出新品上架海报和节日促销 Banner，不用求人也无需苦学复杂软件。</p><p>对于产品开发小团队：过去，设计师需要针对不同社交平台和广告渠道反复导出多版宣传海报，市场同事则苦于等待设计出图才能开展后续工作。而现在引入 Buzz 之后，设计师在产品设计阶段就依据品牌规范创建好了营销素材模板库：产品上线的同时，市场团队即可在 Buzz 中调用这些模板，批量生成新品公告推文的配图、线上广告横幅等。这种一站式的协同流程让设计、开发、市场各司其职又步调一致——开发忙于上线功能时，设计师和市场可以并行准备宣传物料。</p><p>Buzz 不适合承载复杂的自动化营销编排、深度数据分析、或需要大量自定义代码驱动的交互页面，也不承担重型内容管理与印前色彩管理。对高标准印刷，则在专业排版与色彩工具完成后再导入 Buzz 作为传播素材。此外，对于需要严格合规审计与细粒度追踪的行业场景，Buzz 仅提供素材层治理，无法替代组织级流程与审批系统。</p><h2>优势和挑战</h2><p>在介绍 Figma 生态全貌时，我们提到，Make、Sites、Buzz 意欲为独立创作者打造「全能工作室」、为产品开发小团队提供「一站式平台」，把从 idea 到 release 揉进一张工作台。「全能工作室」和「一站式平台」与传统流程相比，都带来了诸多优势。但是这种变化也带来诸多挑战，而且用户的心态也要试图主动转变。</p><h3>「全能工作室」的优势</h3><p>面对脑海中突如其来的一个点子，过去，整个过程可能会涉及到画概念、写 demo、落地网页宣传、筹备文案和物料。人没凑齐事没办完，光沟通就够耗时。然而在 Figma 的全能工作室里，打开浏览器就能开始。如果谈论启动速度，关键在于「把门槛搬到桌面上」，这种提升就像把项目启动的门槛从组队开工降到了打开浏览器。</p><p>除了启动快，推进节奏也更顺滑，迭代的阻力被削薄了。用户经历了创作链路和关键节点，在面对需求变化、查修 bug 也会更加灵活。如果情况不是如此，design、coding 都是出自别人之手呢？要知道 Start Up 阶段，设计师或者是开发人员很可能是朋友、同僚或兼职人员，修改需求和修复问题往往会让你消耗更多的沟通成本。更加糟糕的是，任何一丝丝细节上不注意、不小心，都可能是「劝退」级别的隐患。有了 Figma，不论是用户包揽「设计+开发+市场」的独立创作 (所有事情自己来)，还是非固定成员的小团队 (所有事情有了标准)，都避免了「一来一回，改到天荒地老」的情况。</p><p>成本可控则更加直击痛点，Figma 也帮助用户盘算着心中的小九九。用户一开始不必重金聘请完整团队或购买众多专用软件，就能把从创意构想到产品落地、市场推广的闭环先跑通一遍。这对验证商业想法、快速试错而言价值巨大，把钱花在刀刃上而非流程缝隙中。除了真金实银外，另一方面是最大限度地消除「上下文切换的隐形支出」。以前，一个人做项目往往要在数个产品之间往返：画图、原型、前端样式、建站、物料，各有各的格式和权限；现在，一个 Figma 账号就是纵深的主通道。因此，对于要验证商业模式或测试创意的个人、小公司，这意味着可以用更小的现金流和更低的沟通开销跑通从创意到传播。等到验证通过，再决定是否引入更加重量级的技术栈或者是专业协作。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/47b5b7e3f951ad8780471f8af236459c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>当然，把所有环节落在一个平台里，也会带来取舍的困扰：上一个小节中已经阐述了 Figma 产品矩阵的局限性，面对复杂逻辑、个性需求时，独立创作者仍需要另辟蹊径。所幸，这三者之间是可组合的：用户可以从 Make 起步，发布到 Sites 给少量人用密码访问，确认方向后再外接更成熟的工程；用户也可以只用 Buzz 把测试市场的素材打一遍，先听反应，再决定是否投入产品方向。工具提供了「就地完成」的可能，但路线选择仍然掌握在用户手里。</p><h3>「一站式平台」的优势</h3><p>时间效率的提升，首先来自并行。以往设计未冻结，市场物料动不了，原型更要等下一轮评审，这种串行方式导致上市周期冗长。而在 Figma 中，设计人员在 Make 即时生成原型并接入数据，不必等定稿；市场在 Buzz 平行产出品牌素材，模板权限自动约束，避免来回沟通；产品经理在 Sites 直接上线试版，反馈同步回流。设计、市场、产品不再排队等候，而是同刻推进。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/00e50b9cf091490902b7dee5e83ba5bf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>沟通成本的下降，体现在「单一事实来源」、「反馈渠道直接且透明」和「设计与工程衔接」。在传统团队协作中，设计文件通过邮件或即时通讯频繁传输，版本混乱难以对齐；需求变更需要开会同步，信息散落各处。而借助 Figma，所有成员在同一个在线画布协作，看到的都是最新版本，无需反复发送文件确认。用 Figma 作为唯一的源头，沟通成本的降低还体现于反馈渠道的直接和透明。并且团队成员直接在设计稿或素材留下反馈，避免了口头转述造成的偏差。这种实时协同让意见交换高效且清晰。另外，有了 Make 和 Sites 的加入，设计与工程之间传统流程如今在同一平台上衔接起来。设计意图始终留在平台内，开发不再拿到过时的规范文件，把沟通成本降到了最低。</p><p>在追求品牌和体验一致性的道路上，产品小团队常常面对一个难题：设计稿在不同环节被不断重绘、转码，难免走样。而 Figma 很好地消除了这些偏差，「设计稿即产品」不再只是口号。通过 Sites 发布的网站，其视觉呈现与设计稿可以做到完全一致，不会再因为前端实现差异导致界面走样。设计人员可以事先在 Buzz 中建立品牌模板和样式库，让市场团队制作的海报、社媒图片也严格遵循品牌规范。团队不再陷入「界面一套风格、海报一套、落地页又一套」的陷阱。</p><p>如果你正带着一个十来人的小队，想落地 Figma 一站式平台，从三件小事开始：把「单一事实来源」落实到设计系统与品牌资产层级；把评审改为尽早上线最小版本，在可运行界面上做决策；明确「何时走出 Figma」。这种把设计、开发、运营揉进一张画布的新范式，至少给了团队一个更轻的选择：当你只想验证方向、拉起活动，或把产品体验、品牌表达、流量承接放在同一处看清，Figma 足矣。</p><h3>面临挑战</h3><p>首先，技能跨度的压力是真实存在的。无论是独立创作者还是团队中的成员，都需要同时扮演设计师、产品经理、内容创作者、市场推广等多个角色，每个角色都要求不同的技能和思维模式。跨职能、跨领域正成为创新的新常态。然而这背后伴随的是巨大的挑战。虽然 Make、Sites、Buzz 等工具大幅降低了这些领域的入门门槛，让非专业人士也能动手尝试，但要学习曲线也会变得陡峭一些。这些用户仍需要投入大量时间精力去学习和掌握各方面知识——今天研究视觉设计和交互逻辑，明天又得摸索网站 SEO 优化和社交媒体运营。对于习惯单一职能的用户来说，这无疑是一种负担：他们必须走出舒适圈，花时间学习新技能。这并不等于人人都去当全栈，更现实的路径，是为每个角色定义一套「共识化的最小技能包」。跨技能学习最容易卡在心理门槛：怕拖慢进度、怕暴露无知。解决办法不是逼着每个人去啃厚书，而是在项目里给出“可安全失败”的练手机会。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/337c39d5e61986fade1f3d467836420f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>其次，工具广度与局限的平衡难题也随之浮现。Make、Sites、Buzz 确实提供了从创意到发布的高速通道，然而，当项目需求变得复杂一些、高级一些时 (如 SEO、后端功能)，很快就会碰到了这套工具的天花板。行业经验表明，无代码平台适合快速原型和中小型项目，但在性能、扩展性和定制方面往往有所欠缺。说的更直接一些，Sites 现阶段产出的代码充其量适合做高保真原型，尚不足以直接用于生产。类似地，Make 的 AI 原型生成虽然极大提升了设计验证速度，但其输出代码同样存在语义混乱的问题，无法直接用于生产环境。用户必须在便利和灵活之间做出抉择：是简化想法以适配工具现有限制，还是投入额外精力引入外部专业方案？此外，用户还需要回答一个问题：现在是否到了该「出圈」的时候。然而这样的转折并不好拿捏——如果过早跳出 Figma 生态，可能失去一开始集中在同一平台的效率优势；但若一味留在熟悉的「一站式」舒适圈，又可能陷入功能瓶颈，拖累产品质量。</p><h3>转变心态</h3><p>工具的革新降低了技术门槛，但更深刻的变化在于创作心态的转变。当所有职责都集中到个人身上，「专业即完美」的思维必须让位于「快速迭代优先」的理念。过去多角色分工时，每一环节都追求精雕细琢；而个人更看重的是让作品跑起来，即使初版不够完美也无妨。相较于把大量时间耗在打磨细节，一个人更受益于尽早推出可用版本，然后根据反馈持续优化。对独立创作者而言，如果为了追求完美而迟迟不敢发布，那么再好的想法也只能停留在脑海中。反之，一款粗糙但可用的产品只要上线，就有机会根据真实用户的意见不断改进，向完美靠近。</p><p>但是快跑并不等于放任。给自己设三道防线：其一是定义「能跑通」的范围——核心路径必须顺畅，错误要被优雅接住；其二是把「可撤回」当成默认——在 Sites 上先发预览域名，搜集数据再切换主域；其三是为后续迭代「留钩子」——变量、组件、数据模型都按长期维护来设计。把风险说清楚，才是真的快。这场转变的真正门槛不在技术，而在自我要求：敢把作品交给世界，允许它先不完美。对于独立创作者，这套组合带来的不是捷径，而是更频繁的「真实回合」。当你把每一轮回合都跑顺，专业的深度会在速度里被悄悄积累。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/d2db03588a54ea9d626a0c8128d805b2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>Figma 把 Make、Sites、Buzz 摆到一张工作台上：从构思到上线再到传播，团队不用离开协作空间，就能把一个想法跑成一个可用的版本。当然，团队成员需要调节自己从「单点专业主义」转向「协同透明主义」的过程中心态的变化。以往每个角色各守其职，把本职部分做到极致再交接，旁人难以介入。这种黑箱式工作在 Figma 平台被打破：各环节过程透明呈现在同一界面，事实证明，透明让信任和理解增强。团队成员可以更早参与彼此的工作。这种提前介入让大家对最终产出有共同愿景，减少了后期偏差。团队中需要的不是更响亮的专业领地宣言，而是协同透明主义：把过程与中间产出持续暴露在共同空间里，让每个决策都可追溯、可讨论、可接力。透明不是把一切做成会议，而是让可运行的东西随时被看见——一个能点、能滚动、能输入的版本，比十段描述更能对齐认知。</p><p>要把「协同透明主义」落地，团队可以约定三条底线：其一，默认公开。除涉密外，画布、评论、版本历史都对跨职能可见，避免黑箱推进。其二，模板先行。把成熟做法沉淀为 Make 项目模版、Sites 片段与 Buzz 模板，用资产替代口头约定。其三，以可用为准绳。每个里程碑都交付可操作的东西，而不是只交付文档，减少解释成本与反复推演。</p><h2>结语</h2><p>在 Figma 2025 年这波更新之后，Figma 已在「从设计到生产」上更进一步。这一组能力把「就地生成—就地发布—就地传播」的骨架搭了起来，为下一阶段的生态扩展留出了清晰走向。未来 Figma 依然会横向扩展其「Tools Box」，其发展路径可能会呈现出向着类似 Notion 的「all-in-one」理念靠拢的趋势。未来 Figma 或将进一步融合项目规划和团队知识管理等要素，为运营、销售、客服等更多业务角色提供原生支持——这一展望与 Figma 的「设计不止于设计师」理念一脉相承。</p><p>与此同时，对近期推出的模块持续打磨完善，纵向深化各项现有功能也将是常态。包括 Make、Sites、Buzz 在内的新工具当前仍有局限，有待通过结构性优化提升体验。例如 Figma 正计划为 Sites 引入后台 CMS 功能，以弥合内容管理的缺口。又如 Dev Mode 提供了设计标注和代码片段，实现了初步的设计到开发衔接。</p><p>在 AI 层面，未来 Figma 或引入更强的语义建模与上下文记忆能力，深度结合团队的设计系统和业务知识，使 AI 辅助从单文件扩展到跨文件、跨角色的场景，为协同工作带来更聪明的支持。为此 Figma 正探索通过 Model Context Protocol 等技术将设计文件的结构语义直接提供给 AI 编码助手，从而自动将设计稿转换为生产级代码。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/17/8f90318d70daefcdc9f69486448cee30.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>对于独立创作者而言，这套「全能工作室」工具组合大幅降低了开发和运营门槛，使个人得以一人身兼多职、快速落地创意。过去许多必须多角色合作才能完成的任务，如今在同一平台上由个人即可包办。独立创作者不再因缺乏编程或营销技能而搁置灵感。一人即可完成以往需要多人协作的全链路工作，大大激发了独立创新的可能性。</p><p>在产品小团队协作层面，Figma 打造出真正「一站式的平台」，使跨职能合作达到新的高度。设计、开发、市场等角色在同一环境并肩工作，共享最新素材与数据，避免了环节交接中的信息衰减和延误。事实上，2024 年第四季度 Figma 平台的月活跃用户中约有三分之二来自传统设计角色之外，近三成是开发人员，这印证了跨职能协作已成为新常态。</p><p>从系统层面看，Figma 的这些更新正重塑数字产品设计与发布流程：设计不再是孤立环节，而成为驱动全链路生产的中枢。创意通过 Make 迅速变成可测试的原型，经 Sites 即时上线为实际产品，再由 Buzz 延伸出一致的品牌内容。这一全流程确保创意毫无折损地转化为最终产品体验，Figma 平台也已成为产品从构想到落地的核心引擎。</p><p>综上所述，Figma 2025 年的「大动作」，为独立创作和团队协作带来了革命性变化：前者获得了前所未有的创作自主权，后者实现了跨职能协作效率的飞跃，数字产品从想法到成品的实现路径由此被修改，曾经横亘在独立创作者和产品小团队面前的多重门槛正在被一一消解，设计驱动全链路生产的新时代正在开启。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102618</id>
            <title>亚洲之王的选择，最强国产公路车瑞豹Robin EVO</title>
            <link>https://sspai.com/post/102618</link>
            <guid isPermaLink="false">https://sspai.com/post/102618</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Sep 2025 07:42:11 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p style="margin-left: 8px;">2024年，巴黎奥运会男子公路车，中国选手吕先景代表中国完成比赛，时隔32年后再次有中国选手在奥运会完赛。</p><p style="margin-left: 8px;">2025年，亚洲公路车锦标赛，中国选手吕先景代表中国获得冠军，这是中国在公路自行车项目上的第三个大赛冠军，也是时隔23年后再登亚洲之巅。</p><p style="margin-left: 8px;">这是中国自行车运动的里程碑，一方面是自协主导的更科学的人才训练开始开花结果了，另外也是中国本土设计的运动器材开始走向世界。哦，忘了说了，<strong>这是中国大陆自行车品牌首次在世界顶级赛事上完赛和夺得冠军，在世界顶级赛场上验证了世界顶级的公路车制造水平</strong>。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/7d7dfe543e5a72fffb5b122e74ff17c7.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">虽然几乎所有的高端自行车都由中国代工，但长久以来没有中国品牌登上世界顶级赛事一直是中国自行车行业的“心病”，许多看不上国产品牌的人一大理由就是：<strong>大Pro都不骑。</strong></p><p style="margin-left: 8px;"><strong>潜台词就是这车性能不行，上不了顶级比赛</strong>。</p><p style="margin-left: 8px;">在一定程度上是有道理的，<strong>没有参加顶级赛事不能说这车不好，但能赢得顶级赛事的一定不差，我骑的快不快是我的事，但至少这车的上限是高的，也是一种软实力。</strong></p><p style="margin-left: 8px;">这次吕先景用精彩的表现证明了瑞豹Robin EVO的上限——亚洲冠军，这是一辆专为竞赛打造的赛车，一个六边形无短板的赛车。近可贴身肉搏拉扯，远可单飞突围巡航，一辆车可以解决所有战况。事实上，吕先景在赢得亚锦赛时就是这么个战术，通过拉扯消耗掉对手之后，突围出去单飞到终点。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/20b9f75b4b115b95569d085d802f5431.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">然而这并不是我选择这辆车的原因，和许多国产车用户的理由一样——性价比。不到六万块就能拥有全套顶级SRAM Red套件和Zipp 454NSW轮组，光这两行货价加起来都不止六万了，相当于买套件轮组送车架。</p><p style="margin-left: 8px;">但在实际骑行之后，这辆车的表现很令人意外——意外的好骑。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/0219e4b9f5ee749bd4d5c1074aa52364.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">首先，我们需要定义一下什么是好骑，所谓的六边形是哪六个边。对于许多人来说，好骑很玄学，身材大小、体重功率不同，对好骑都会有不一样的理解。</p><p style="margin-left: 8px;">私以为，对于公路车来说是<strong>轻量化、气动性、舒适性、刚性、操控性和稳定性</strong>这六个维度。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/78b2dbf7c4d5574d1a252b2d5a8d3d3f.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>&nbsp;<strong>意料之中的超轻整车</strong></h2><p style="margin-left: 8px;">轻量化，这是<strong>最简单也是最难的部分</strong>。为什么说简单呢，因为如果只是想纯粹的做轻，那大量使用圆管即可，圆形是保证强度的前提下轻量化的最优造型。</p><p style="margin-left: 8px;">但车是用来骑的，不是上称的，只是轻的车不一定好骑，更不一定快。别忘了，轻量化只是性能的一部分，后面还有好几环呢，所以在保证刚性、气动性和舒适性的前提下，再做到轻量化就没那么简单了，比起十年前的公路车，现在大部分新款都变重了。</p><p style="margin-left: 8px;">通常会采用新材料、更科学精简的碳布堆叠和更先进的一体成型制造工艺来达成轻量化，瑞豹作为中国自行车大工厂的品牌，自然拥有一流的制造工艺，Robin EVO车架使用新一代UHMS材料技术，包括东丽T1100和M40，<strong>仅重710克</strong>，和国际一线大牌比也不落下风，甚至可以说出色。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/e1dc94d2433c0cfd9cc7b5a159cb782f.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">而且我这辆采用了裸碳涂装，可以清晰地看到碳布的排列，在阳光下非常漂亮。科普一下，<strong>敢于使用裸碳的品牌都是对自己的做工很有信心的，裸碳涂装还会优先挑选做工更优的毛坯架进行清漆处理</strong>，如果对车架做工要求高，可以选择裸碳涂装。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/50340c3a03681fa0d2cc235658f17c99.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">整车搭载了全套新款Red E1大套，也是原厂最轻的顶级套件，配上同门的454轮组，整车也是非常轻，在我将仅重64克的原厂坐垫换成200克的Power Arc后，加上一对50克的PP水壶架、70克的码表架和320克的佳明功率脚踏，整车重量也刚刚<strong>7公斤整</strong>，非常轻巧。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/f519e01c7f95da9b1db8c5cd7f886ba8.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>&nbsp;<strong>出乎意料的气动性</strong></h2><p style="margin-left: 8px;">这并不是一辆纯气动车，虽然今年环法赛场上两巨头全程用气动车屠榜证明了在力大飞砖的脚下，纯气动车是最快的，即使是在高山赛段。<strong>但那是外星人的事，对于我们普通地球人，我们骑不了那么快，综合车才是最优解，又能爬坡又能平路巡航哪都能骑，</strong>毕竟两大巨头都不约而同的做出了“一即是全”的决定。</p><p style="margin-left: 8px;">虽然没有官方数据，但这代Robin EVO的确是做了许多气动优化的，最明显的就是管材采用了气动优化的KVF设计，座管也改为了主流的D型管，在增加舒适性的同时，也能提升一丢丢气动效果。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/f59ab5a2f8c6e72d3788a79123e7b35c.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">以肉眼风洞来看，估摸着应该在210瓦出头，四舍五入就是对标的打雷牌SL7，毕竟那是公认的最优解。实际骑上的感觉也一定验证了这点——出乎意料的快。刚骑上时无意中发现在常骑路段同样休闲骑状态速度快了不少，为了验证这点，我做了个图一乐的器材测试。</p><p style="margin-left: 8px;">选取了三条赛段分别以<strong>170瓦（2.6W/KG)、200瓦(3W/KG)和230瓦(3.5W/KG)做测试，对应了初学者、入门的爱好者和有一定训练的爱好者</strong>，这样大家也能知道自己骑这车大概什么水平，再往上的，看吕先景就行。</p><p style="margin-left: 8px;">南海子——8公里的纯平路绕圈</p><p style="margin-left: 8px;">戒台寺——4公里平均坡度4%的入门级短坡</p><p style="margin-left: 8px;">潭王路——10公里平均坡度4.5%的中等长坡</p><p style="margin-left: 8px;">为了尽量减少天气、路况的影响，我进行了多次测试，尽量保证测试时都是恒功率平均输出，再选取成绩最好的作为代表，再次声明，以下成绩纯属图一乐，天气路况都不一致，<strong>仅供图一乐</strong>，好了，成绩如下。下图为低功率输出和高功率输出的对比。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/3b4110cc4f552ce89472031758247ffd.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/1cecb654dc99248a87055d5295796114.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/e229856a3f7f5320dbd0071de6318768.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">Madone 9被全面超越。</p><p style="margin-left: 8px;">虽然无法完全统一风速、气温等天气条件，甚至也无法完全统一身体姿势，但是也大概能从成绩的对比曲线看出，无论基本上都是在差不多的位置出现的最大时间差，跑远和追近的位置差不多，我觉得是可以认为是不同器材带来的影响，而且很多时间差也对的上长期骑下来的体感，比如这车在35以上会有一个大的飞跃。</p><p style="margin-left: 8px;">其实我心里隐隐是知道Madone 9已经落后于时代了的，虽然我很喜欢它，绝大多数时候，它是比路遇的大多数车要快的，在平路和缓下滑行时尤为明显，但在24年环西北京赛时，我第一次感受到了它的疲态。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/934fafaa8bbe913ea44b3699ef056f5a.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">环西北京赛的最后有一段10公里长平均-2%的缓下，那段路我和《骑行家》主编Lucas以及北京圣骑士单车的主理人张居正组成了小集团一起跑。不谦虚的说，那天我的状态和能力是强于他两的，但在那缓下中，我能明显感受到比他两吃力，他们分别骑的新款Foil和OLTRE RC，都是最新的纯气动架。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/54acb05c53ef316c467fdeb561ff01f9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">我相信Madone 9的车架气动数据依然是第一梯队的，根据Tour之前的测试规则是204瓦，冠绝Madone家族，但是包括轮组、外胎在内的零配件相差了两代的代差，整车的骑行实力还是输给了时间，<strong>于是在接近50的均速下毫厘的差距也被放大到能清晰感知了——公路车十年能有多大的变化</strong>。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/2ba77ea610d8a0cd645bdc44efa2738f.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>&nbsp;<strong>中规中矩的舒适性</strong></h2><p style="margin-left: 8px;">瑞豹是家挺有诚意的品牌，同样是Robin系列，单独给顶级的EVO开了新模具，和次级的RS、入门级的Sport的几何完全不同，小尺码的STR都是1.3开头，远低于被认为舒适分界线的1.45。为何说有诚意，可以看看增加的成本：</p><span class="ss-linkCard">&nbsp;</span><p style="margin-left: 8px;">为啥要这么干呢，这和定位有关，EVO是为那些更成熟的车手准备的，他们身体素质更好，可以忍受长时间低趴以此换取更具进攻的姿态。在刚骑上这车感觉很快时，我也想过是不是因为姿势问题降低了人体风阻才变快的，然后发现Madone 9的STR是1.35，比Robin EVO的1.39更低，就真的是车快啊。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/3dd929edb8f51ce4b4f6aaa13019b615.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">现代自行车也是赶上好时候了，真空胎的低压宽胎极大的抬高了舒适度的下限，不仅不会再出现车架做的刚性太强几何太激进以至于Pro都受不了不想骑，Pro们现在甚至可以直接骑着以往被认为舒适度很差的气动架跑石头路，直接干死了古典赛车型。</p><p style="margin-left: 8px;">Robin EVO同样得益于此，一套名为28c实际能膨胀到30c的米其林Power Cup真空胎，让手腕和屁股的舒适性已经超越了装有ISO Speed的Madone 9。</p><p style="margin-left: 8px;"><strong>只要你不真的用那原装的碳板座垫，完全不用担心舒适性</strong>。</p><p style="margin-left: 8px;">PS：那碳板我还真用了，就认真骑用力踩踏的时候还好，稍微休闲一点屁股就硌得慌，尤其是路边等红绿灯的时候。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/5de8e112ab7f77b81b0aa6d5acc118c2.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">此外Robin EVO还在上一代的基础上进一步下移后上叉和改为D型座管增加舒适性，反正来自路面震动的舒适性你几乎不需要在意，唯一需要注意的是几何。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/8284857e237aa48d51cbd883829e8fe4.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>&nbsp;<strong>菜腿踩不出来的刚性</strong></h2><p style="margin-left: 8px;">后上叉的下移不仅增加了舒适性，还减小后三角面积，可以增加车架整体刚性，从而提高踩踏效率和动力传输的顺畅性，说人话就是能减少能量损失骑的更快。在有次骑行中放坡遇到友人，调头追击，直接刷新了我2分钟的功率输出纪录。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/9b0bbf86ec59857955fb95a7e5f1a5d7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">我喜欢这车的另外一方面是五通没有那么大，许多车为了增加气动和肌肉感将五通做的硕大无比，我个人很反感这种造型，对于我这种60多公斤两百多瓦的选手，五通刚性肯定过剩的，况且吕先景已经用亚洲冠军证明了这车的刚性。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/ae6b4a309a4c39b0a2790ab659dc1446.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">只是不知道是否因为设计时考虑不会有冲刺手骑，<strong>所以头管刚性被削弱了以减轻重量，在握下把摇车时，即使是我这样的小体重选手，也能感受到车头的变形。</strong>大力摇车也会有点蹭碟，不过这倒是意料之中，这种纤细前叉都难免，就还是老老实实的坐踩吧。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/620c481afd55707c7bd4fd0b2883458d.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>&nbsp;<strong>左右互搏的操控性</strong></h2><p style="margin-left: 8px;">虽然头管刚性不太够，但操控起来还是很灵活的，这车的几何设定上就不会难控制，车头部位还异常的灵活，灵活到很难静置<strong>，有时靠墙或者等红灯时，车头都会突然无征兆的转向，就还挺让人提心吊胆的。</strong></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/2af364177c783df1739f1830d6d22f8b.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">此外这个车把造型奇特，是一副反向机翼，向前向上翘起，配合码表就很像海外三叉戟，造型美丑比较主观，我也的确听到有人非常喜欢这套车把，<strong>但确实会让你找不到舒适的横握把位，只能老老实实的手扶手变头。</strong></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/4915186705713a97e4643cb01faea950.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">整体来说，整车的操控性在骑行时是极其灵敏的，说句指哪打哪不过分，但有个前提——没有横风。前面说过，这车配的Zipp 454NSW轮组，Zipp轮组的抗侧风能力很差，当年我舍弃404就是因为在厦门参加Ironman的比赛被海风吹的东倒西歪。</p><p style="margin-left: 8px;">Zipp自己也清楚这点，于是用仿鲸鱼背脊的造型打造了波浪轮鼻祖的454，宣称就是学习鲸鱼背鳍引导海水来优化横风表现。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/460a717429f6b92710889fd53158b65c.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">我只能说，作用有，但有限。<strong>在横风明显时还是能明显感觉车头晃动，依然需要花精力掌控车头，在抗侧风这点上，还得是棒椎哥。所以我对Robin EVO操控性的评价是左右互搏——优秀的车架操控性和拉胯的轮组抗侧风打架</strong>，如果我是产品经理，我会用353而不是454，不仅能更轻一些，更低的框也能更抗侧风一点。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/b8b9ec7472abda3b34fb78403dd42bf9.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>&nbsp;<strong>稍欠火候的稳定性</strong></h2><p style="margin-left: 8px;">这的稳定性指的整车零配件的搭配、耐用度，虽然瑞豹是个大厂，但本质上是个大工厂，离大品牌还有些距离，无法像TREK闪电他们那样第三方厂商来主动配合它，所以有些零件的配合上还是不够理想。</p><p style="margin-left: 8px;">最明显的就是整车异响，这车的车头碗组和座管都是异响重灾区，在遇到颠簸甚至小起伏时都会有嘎吱响，让人心头一紧。解法也有，就是致死量的润滑脂，让零件结合处都覆盖上，这是在TREK望京和丽泽两家技师联手下找到的解法。而且并不是个例，我还特意打听了一下，吕先景的也响……</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/c8ab23e4067a36567a1026ff1495481a.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">好巧不巧的是，原配的454也是个响声大户，那海绵塔基1000公里左右就得保养，不然你就能听到前中后三相交响曲了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/cbbf6f1f827f87a574e178316960d1fc.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">以上这几个毛病说大不大说小不小，有好技师都好解决，而这又是瑞豹的短板，几乎所有平价品牌在往上探时都会遇到这个问题，无论是自行车圈的捷安特还是汽车圈的大众丰田，如今瑞豹大多数门店的水平是称不上优秀的，很可能无法满足用户需求。</p><p style="margin-left: 8px;">除了异响外，Robin EVO还有一些很诡异的设计，比如<strong>下管水壶架螺丝是和禧玛诺电池支架连一起的，如果一不小心习惯性的直接拆了两颗水壶架螺丝，那就得拆中轴才能取出支架。</strong>虽然这个锅有一半得禧玛诺背吧，日益增长的车架设计需求同落后电池安装方式的矛盾。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/d5678a6bdca8d01ed89399c989a38763.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 8px;">还有无法完全服帖的车头标也很让强迫症难受，为何不直接在清漆下贴个标印上去呢，就像AMG One那样，又酷又减重。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/9b85818aca52ba5cc425daddab41743d.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>&nbsp;<strong>总结</strong></h2><p style="margin-left: 8px;">总的来说，就车而言，Robin EVO本质上就是一台轻量化的SL7，或者说是工厂用他们的制造思维打造了一辆他们心目中的好车，所以我们能看到在轻量化和刚性上是游刃有余，包括舒适性，毕竟这是工厂最熟悉的玩意儿，好材料好工艺招呼上，祖传的测试台机用起来。</p><p style="margin-left: 8px;">更贴近用户端的气动化和操控性上就差点意思，毕竟工厂的人不骑车，赞助的选手水平太高，反馈回来的信息可能也更多是操控性和刚性上的要求，大Pro啥车都能骑，而且不在乎是不是需要勤保养或者哪哪又响了。</p><p style="margin-left: 8px;">所以高性价比依然没能撑起瑞豹的品牌力，只是击穿了Red和454的市场价格，倒逼大陆总代修改保修条例。品牌力不是简单堆料就能建立起来的，需要一整套的打法才能扭转人们心中的固有观念，不仅是自行车，丰田大众百万级车也不被买单，最后还是建立新品牌才解决。</p><p style="margin-left: 8px;">看着就不高级的店铺，没有家喻户晓的明星选手，没有详实丰富的白皮书，再加上没有打洞自研功率计电变这些花活。更没学会讲好故事，好不容易拿到的冠军也没有重视，夺冠半年才刚推出亚洲车王版，然后公司还时不时搞点骚操作反向营销，也怪不得市场不认可。</p><p style="margin-left: 8px;">但就产品论事，瑞豹的产品都不差的，Robin EVO更是一辆很全面的好骑的车，考虑到如今二级市场的实际情况，非常适合进阶车友和业余选手用来训练比赛，低廉的成本就能拥有一台可以问鼎亚洲之巅的冠军车，还是很划算的，怎么说也是能骑着给国家队和牙姐开火车的。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/18/article/3fb8e32d0ded8a5ee65722552dfc66a6.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102575</id>
            <title>数字基石·壹：我的 Android 最小启动单元</title>
            <link>https://sspai.com/post/102575</link>
            <guid isPermaLink="false">https://sspai.com/post/102575</guid>
            <pubDate></pubDate>
            <updated>Tue, 16 Sep 2025 12:38:41 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>近日看到同站文章<a href="https://sspai.com/post/102151">《2025，你还折腾刷机吗？》</a>感触颇深，曾几何时我亦是刷机大军中的一员，然而随着政策收紧、年岁增加，心中已无折腾之意，用最少的精力打造最适合自己的系统逐渐成了我的首要目标。更何况刷机这行对技术要求高，风险也高（深夜尤甚），终究只得少数人青睐，遂决定写一系列短文，讲讲如何在不刷机、不解 BL、不 ROOT 的前提下，对各个操作系统进行非侵入式改造，使其更加简洁、更加个性化。以下这是我接触每一台 Android 手机都会执行的最小启动单元，通过少许应用调试，从开机起逐步打造自己的专属数字环境。另，出于某些原因，下文对于网络设置、跳过广告及其他不便展示的应用将不作着墨。微信、支付宝等日常必备应用亦不赘述。</p><p>封面由 Nano Banana 生成。</p><h3><a href="https://localsend.org/">LocalSend</a></h3><p>当崭新发亮的手机出于某些原因暂时无法下载某些 APP 时怎么办？LocalSend 闪亮登场，只要将设备连接到同一个 WiFi 即可快速发送接收文件。<strong>开源免费！</strong></p><p>关联阅读：<a href="https://sspai.com/post/78334">放过微信放过自己，跨设备传文件还有这些姿势</a></p><h3><a href="https://github.com/aistra0528/Hail">雹（Hail）</a></h3><p>系统预装的 APP 看不顺眼怎么办？卸载不掉怎么办？雹，一款 Android 应用冻结软件，可以快速停止、停用、卸载软件。本人除了微信、支付宝之外的所有国产软件皆冻结在此，要用时才搜索开启。请务必确保不要误封重要系统组件导致系统异常，裁员裁到大动脉。<strong>开源免费！</strong></p><h3><a href="https://shizuku.rikka.app/">Shizuku</a></h3><p>提起它可谓是无人不知，无人不晓。一款让应用程序直接使用系统 API 的工具，可简单理解为让软件在不 ROOT 的情况下也能拥有更高的权限，上下文提到的 Hail、AppOps 等软件都会用到它。配上无线调试功能，只需 WiFi 便可快速启动，简单好用。<strong>开源免费！</strong></p><p><strong>关联阅读</strong>：<a href="https://sspai.com/post/73294">别被 root 挡在门外：Shizuku 让 Android 玩机更简单</a></p><h3><a href="https://play.google.com/store/apps/details?id=me.piebridge.brevent">黑阈（Black Hole）</a></h3><p>也是省电老师傅了，能有效防止应用在后台运行，让手机更加持久流畅。 不开源，免费版已够用。</p><h3><a href="https://appops.rikka.app/zh-hans/">App Ops</a></h3><p>应用权限集中管理软件，自觉最好用的是「忽略」选项，可以让应用在请求权限的时候放行但返回空结果。不开源，免费版已够用。</p><p><strong>关联阅读：</strong><a href="https://sspai.com/post/61348">在权限管理上跑过 iOS 14 和 Android 11：App Ops 4.0 上手指南</a></p><h3><a href="https://github.com/stratumauth/app">Stratum</a></h3><p>一款双重身份验证 (2FA) 应用，支持加密备份、图标、分类和高度自定义。<strong>开源免费！</strong></p><h3><a href="https://bitwarden.com/">Bitwarden</a></h3><p>密码管理器，支持多端同步，快速填入，1Password 有的它都有而且。<strong>开源免费！</strong></p><p><strong>关联阅读：</strong><a href="https://sspai.com/post/61694">通过 Bitwarden 管理你的密码</a></p><h3><a href="https://www.coolapk.com/apk/com.ktls.fileinfo">存储空间清理</a></h3><p>适合中国宝宝体质的存储空间清理应用，有专属国内软件的清理规则，我会定期用它清缓存、大文件等。不开源且付费，但便宜，一杯奶茶钱。如果希望使用开源免费的替代品，也可试试 SD Maid SE FOSS 之类。</p><h3><a href="https://m.wandoujia.com/apps/7748079">河图-岁寒输入法</a></h3><p>心目中移动端最强的双拼变种输入法，使用点按+滑动的方式进行快速输入，大大减少了我使用 26 键时的误触，上手也不难，配合 Xperia 瘦长的机身甚至可以做到丝滑地单手操作。还能快速选中常用标点符号，长按空格进行语音输入，单手党福音。不开源且高级功能（韵母键族）及多设备同步需要付费。</p><p><strong>关联阅读：</strong></p><p><a href="https://sspai.com/post/46182">当滑动输入遇上双拼，岁寒输入法想让你的手机打字效率再高一点</a></p><p><a href="https://sspai.com/post/37642">我是如何开发岁寒输入法的：滑行输入的探索之路丨Matrix 精选</a></p><h3><a href="https://www.coolapk.com/">酷安</a></h3><p>本人寻找国产应用下载途径的顺序：Github / F-droid &gt; Google Play &gt; 酷安 &gt; 官网。酷安作为一个应用下载的第三方商店，体验还是很不错的。不开源但免费。</p><h3><a href="https://github.com/NeoApplications/Neo-Store">Neo Store</a></h3><p>一个现代且功能丰富的 F-Droid 客户端，界面好看。<strong>开源免费！</strong></p><h3><a href="https://gitlab.com/AuroraOSS/AuroraStore">Aurora Store</a></h3><p>允许用户在不登录 Google Play 账户的情况下下载 Play 商店中的应用，支持查看应用描述、截图、更新和评论。<strong>开源免费！</strong></p><h3><a href="https://play.google.com/store/apps/details?id=bitpit.launcher">Niagara Launcher</a></h3><p>心目中的安卓最佳启动器，有简洁、流畅的动画以及超高的颜值。由于我日常使用的 APP 只有七个，用这个简直刚刚好。不开源且需要付费。</p><p><strong>关联阅读：</strong><a href="https://sspai.com/post/71818">让桌面「流」起来，多是一件美事：Niagara Launcher</a></p><h3><a href="https://mixplorer.com/">MiXplorer</a></h3><p>系统自带的文件管理器从来就没有好用过，所以用 MiXplorer 代替，除了本地文件管理外，支持按视频、图片、APK 等进行分类管理，支持挂载网盘，并且内置 EPUB/MOBI/PDF 阅读器、图像查看器、媒体播放器和文本编辑器。鉴于我在手机上处理文件的次数并不多，它已经完全够用。不开源但免费。</p><h3><a href="https://github.com/WirelessAlien/ZipXtract">ZipXtract</a></h3><p>尽管 MiXplorer 支持压缩包操作，但似乎有 BUG 总是解压失败，故使用它来代替，支持解压 rar, zip, tar, bz2, gz, 7z, xz, jar 等类型。<strong>开源免费！</strong></p><h3><a href="https://play.google.com/store/apps/details?id=net.sjava.officereader">Office Reader</a></h3><p>偶尔在手机上看 Office 文件就用它。不开源，免费够用。</p><h3><a href="https://play.google.com/store/search?q=QRbot&amp;c=apps">QRbot</a></h3><p>免不了要扫二维码就用它，当然现在很多手机的相机应该也自带扫码功能了。不开源但免费。</p><h3><a href="https://github.com/breezy-weather/breezy-weather">Breezy Weather</a></h3><p>天气应用，界面流畅简洁而且没有任何广告，可以自定义天气源。<strong>开源免费！</strong></p><h3><a href="https://play.google.com/store/apps/details?id=me.i38.gesture">微动手势</a></h3><p>利用手机三轴陀螺仪识别并操控手机的应用，无需触摸屏幕，通过识别手机绕横轴、纵轴和Z轴的三种转动动作，对我这种单手党极其友好。不开源，免费版够用。</p><p><strong>关联阅读：</strong><a href="https://sspai.com/post/53892">「摇一摇」就能控制手机，微动手势让你的全面屏手势更完美 | App+1</a></p><h3><a href="https://slidebox.co/">Slidebox</a></h3><p>整理图片的利器，单击即可迅速将图片保存到指定文件夹中，上划即可删除。不开源但免费。</p><p>关联阅读：<a href="https://sspai.com/post/29246">对占内存的陈年旧照划划手指，好走不送：Slidebox</a></p><h3><a href="https://github.com/fork-maintainers/iceraven-browser">Iceraven</a></h3><p>一款基于 Mozilla Fenix 版 Firefox 的网络浏览器，致力于提供更多用户自定义功能、删除遥测并且提供更多扩展支持，本人在所有设备上的浏览器都基于 Firefox，并使用 Firefox 账户进行同步。<strong>开源免费！</strong></p><p><strong>关联阅读：</strong><a href="https://sspai.com/post/76688">想要逃离 Chrome？请收下这份 Firefox 终极隐私指南</a></p><h3><a href="https://viayoo.com/">Via</a></h3><p>一款名声在外、极致轻量化和简洁浏览器，当我只是想作简单搜索时就会用它而不是 Iceraven，几乎没有延迟的搜索和网页加载速度，非常舒适。不开源但免费。</p><p><strong>关联阅读：</strong><a href="https://sspai.com/post/29083">麻雀虽小，五脏俱全：Via 浏览器</a></p><h3>Yamby</h3><p>简洁实用的 Emby 第三方客户端，界面美观、操作丝滑，看电影看剧全靠它。不开源，免费够用。</p><h3><a href="https://music.aqzscn.cn/">音流</a></h3><p>一款 NAS 音乐串流播放器，支持 Subsoni, Navidrome, Emby, Jellyfin, AudioStation, Plex 等音乐服务，界面美观功能齐全，听音乐全靠它。不开源，下载等高级功能需要付费。</p><p><strong>关联阅读：</strong><a href="https://sspai.com/post/89420">Navidrome：自建音乐库新选择</a></p><p>&nbsp;</p><p>以上。二〇二五年九月十六日。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102429</id>
            <title>从 Nextcloud 到 Immich + Syncthing : 我的自托管媒体文件管理方案</title>
            <link>https://sspai.com/post/102429</link>
            <guid isPermaLink="false">https://sspai.com/post/102429</guid>
            <pubDate></pubDate>
            <updated>Tue, 16 Sep 2025 01:23:15 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <h2>背景</h2><p>&nbsp;</p><p>在之前的<a href="https://sspai.com/post/102337" target="_blank">《用 Termux + Syncthing 自动定时备份 Android 媒体文件》</a>一文中，我提到了自己采用 “Syncthing + Immich” 作为媒体文件的同步与管理方案。那篇文章中解决是的客户端的问题：如何将散落在手机上的媒体文件统一集中并备份到服务端。这篇文章则是对服务端应用的改造补充，讲述了我从 Nextcloud 到 Syncthing + Immich 的实践过程。</p><p>在开始之前，或许有必要说明一下我对 Nextcloud 有什么不满。客观来讲，作为一个私有云盘，Nextcloud 是一个非常合格的应用。我能想到的，它与之对标的闭源软件是 Microsoft 的 OneDrive。再加上 Nextcloud 的 App Store 中，官方和社区提供的丰富插件生态，使得用户完全可以以 Nextcloud 为中心，构建一个自己的 ALL IN ONE 工作台。 但是我使用 Nextcloud 的诉求，除了单纯的备份，还包括了图片的管理。固然在 Nextcloud 中提供了简单的图片浏览和管理功能，但比较专门的图片管理应用，它的体验只能说是“聊胜于无”，远谈不上优秀。因此，我希望寻找一个更加现代的相册管理应用。</p><h2>方案比较</h2><p>这里，有必要回顾一下当初的选型过程。Github 上，有一个<a href="https://github.com/meichthys/foss_photo_libraries">仓库</a> 对自托管的照片库进行了比较。严格来说，这里比较的都是 FOSS（Free and Open-Source Software，自由及开源软件）软件，所以自然不包括 MTPhotos 或群晖相册之类的商业方案。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/28b59b783f27cc0ed5160605b218a6af.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />从这里的功能比较中可以看到，Nextcloud 自带的照片功能，在 LivePhotos 和 Videos 的支持上的确较差，并且在 Albums、Timeline 和 Search 等照片展示和检索功能上也不尽如人意。<br />这里面我最关注的是两个应用，一个就是有着压倒性 stars 数量的 Immich，另一个就是与 Nextcloud 集成的 Nextcloud Memories。</p><h3>Memories</h3><p>先来说 Memories 方案，这是我的一开始尝试的方案。理由很简单，Memories 可以直接与 Nextcloud 服务集成，只需要在当前应用内部安装插件并进行配置就好了，不用引用额外的新服务。看起来很简单，但是在执行时还存在不少需要注意的地方，例如：</p><ul><li>Nextcloud 的<a href="https://hub.docker.com/_/nextcloud/">社区镜像</a> 需要手动构建镜像才能支持硬件加速。</li><li>Memories 本身并不直接提供人脸识别功能，还需要依赖其他的插件，如 <a href="https://github.com/nextcloud/recognize">Recognize</a> 或 <a href="https://github.com/matiasdelellis/facerecognition">Face Recognize</a> 插件。</li><li>针对中国大陆的网络环境需要对 Nextcloud 的 App Store 进行配置。</li></ul><p>总得来说，Memories 仍然是 Nextcloud 的一个插件，并不是一个独立的应用服务。它的很多功能，如媒体转码、同步备份和人脸识别都与 Nextcloud 高度耦合。如果是重度依赖 Nextcloud 生态的用户，那么将 Memories 作为对 Nextcloud Photos 的增强替代，是非常合适的选择。无需单独再维护一套新的服务，只需要完成插件配置，就可以直接在原有的 Nextcloud 服务中，获得良好的照片管理体验。<br />但是对我来说，Nextcloud 的在线协作反而是多余的功能，所以我最终还是选择了单独部署图片服务的方案，Nextcloud 的部署配置就放在后文仅供参考了。</p><h3>Immich</h3><p>Immich 虽然被很多人视为“自托管版的 Google Photos”，但<a href="https://immich.app/">官网</a> 的免责声明，即这段：</p><blockquote><p>⚠️ The project is under&nbsp;<strong>very active</strong>&nbsp;development. Expect bugs and changes. Do not use it as&nbsp;<strong>the only way</strong>&nbsp;to store your photos and videos!”</p></blockquote><p>让我一开始还是有些犯怵。但在 demo 环境进行尝试后，Immich 更现代的 UI 设计、更优秀的 AI 识别以及其他开箱即用的相册功能还是吸引了我。再加上它完善的官方文档和活跃的社区环境，最终促使我决定了这次迁移。<br />在方案设计上，虽然 Immich 安卓端提供了备份的功能，但通过 Immich 备份的相册目录是由应用自身来管理的，不能保留原本的文件结构。因此本着“专业的人干专业的事” 的原则，我将 Nextcloud 拆分为专门的同步应用 Syncthing 和专门的照片管理应用 Immich 来分别进行部署。</p><h2>方案实施</h2><p>部署采用的是 Docker Compose 方式，这也是 Immich 官方推荐的方式，在开始前，需要确保系统已经安装了 Docker 和 Docker Compose，并且有可以拉取镜像的网络环境。</p><h3>准备工作</h3><p>我当前对 docker 应用的数据是全部存放在 <code>/docker</code> 路径下，并以应用来划分的。以 Nextcloud 为例，一个 <code>docker-compose.yml</code> 文件中包含了应用（Nextcloud）、数据库（mysql）和缓存（redis），那么它的路径结构在宿主机上可能是这样的：</p><pre class="language-shell"><code>/docker/nextcloud/
├── app
│&nbsp;&nbsp; ├── ...
│&nbsp;&nbsp; └── nextcloud_data
├── db
│&nbsp;&nbsp; ├── conf
│&nbsp;&nbsp; └── data
└── cache
    └── data</code></pre><p>在原本以应用为主的结构中，是不存在问题的，因为一个应用的数据只独属于这个应用容器。但是在现在拆分后方案中，媒体数据既需要 Syncthing 来进行同步，又需要在 Immich 中作为外部媒体库来进行管理，再按原来的方式进行处理就不是那么合适了。<br />因此，独立于应用的数据，我单独创建了一个 <code>/data</code> 路径专门来存放。例如这里 <code>/data/pictures</code> 就专门用来存放图片数据，<code>/data/documents</code> 则存放原本使用 Nextcloud 同步的文档数据。</p><h3>数据迁移</h3><p>有了上面的配置后，先进行的就是数据迁移工作。在磁盘有足够空间的情况下，这里可以先不用贸然将原来的数据直接移动（<code>mv</code>）到新路径，可以先复制一份保持冗余，等新应用稳定后，再进行归档或删除。<br />我先前的 Nextcloud 的文件存放在 <code>/var/www/html/data/用户名/files/</code> 下，以我的配置文件为例，对应的宿主机路径为 <code>/docker/nextcloud/app/data/用户名/files</code>。这里只需要通过 <code>rsync</code> 迁移到新的目标路径即可：</p><pre class="language-shell"><code># 归档模式进行复制
# 参数说明：
#    -a：归档模式，递归传输文件并保留所有文件属性
#    -v：详细模式，增加输出的详细程度
#    -P：显示进度并允许在传输中断后恢复部分传输的文件
#    -h：以人类易读的格式显示文件大小信息
# 如果有权限问题可能需要 sudo 执行
sudo rsync -avPh /docker/nextcloud/app/data/用户/files/pictures/ /data/pictures/

# 如果文件权限不一致（例如 nextcloud 中可能是 www-data 用户和用户组）执行
# sudo chown -R 1000:1000 /data/pictures</code></pre><p>通常来讲，Linux 的第一个创建的用户的 UID 和 GID 都是 1000，因此后续都默认以 <code>1000:1000</code> 为例。也可以通过 <code>id -u</code> 和 <code>id -g</code> 确认当前用户的 UID 和 GID。</p><h3>Syncthing 配置</h3><p>Syncthing 的部署本身是不复杂的，只是我针对自己的情况进行了一些改动：</p><pre class="language-yaml"><code>services:
  syncthing:
    image: linuxserver/syncthing:2.0.3
    container_name: syncthing
    # linuxserver 的镜像支持 PUID 和 PGID 参数
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Shanghai
    volumes:
    # 应用自身相关的配置，挂载在 /docker/syncthing 下
      - /docker/syncthing/config:/config
    # 外部数据单独挂载在 /data 路径下
      - /data/documents:/data/documents
      - /data/pictures:/data/pictures
      - /data/encrypted:/data/encrypted
    ports:
      - 8384:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    restart: unless-stopped</code></pre><p>然后启动 Syncthing 服务后就可以通过访问 <code>http://&lt;服务器IP&gt;:8384</code>，进行同步设备和同步文件夹的配置了。<br />Syncthing 默认是没有密码的，可以在 GUI 中设置身份验证，并且将默认监听的地址配置为局域网访问地址以增加安全性。Android 上使用 Syncthing-Fork 进行同步的话不需要额外进行这些操作，因为开发者已经进行了开箱即用的设置。</p><h3>Immich 配置</h3><p>Immich 的部署主要参考官方推荐的 <a href="https://immich.app/docs/install/docker-compose/">Docker Compose</a>。官方在 Github 仓库提供了<a href="https://github.com/immich-app/immich/blob/main/docker/docker-compose.yml">文件</a>，我只是针对自己使用外部媒体库的情况进行了一些小改动：</p><pre class="language-diff"><code>services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
+   # 添加核显映射
+   # 核显设备路径为 /dev/dri/renderD128，用户组为 render
+   # 需要通过 cat /etc/group | grep render 来查看 render 组的 GID
+   user: "1000:1000"
+   group_add:
+     - "106"
+   devices:
+     - /dev/dri/renderD128:/dev/dri/renderD128 
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    volumes:
      # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file
      - ${UPLOAD_LOCATION}:/data
+     # 中文地理位置编码配置
+     - /docker/immich/geodata:/build/geodata
+     - /docker/immich/i18n-iso-countries/langs:/usr/src/app/server/node_modules/i18n-iso-countries/lan
+     # 只读挂载外部媒体库
+     - /data/pictures:/data/pictures:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - '2283:2283'
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, rocm, openvino, rknn] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
-     - model-cache:/cache
+     - /docker/immich/cache:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false
+   # 对资源进行限制，避免占用过多宿主机资源
+   deploy:
+     resources:
+       limits:
+         cpus: '2.00'
+         memory: 6G
+       reservations:
+         cpus: '0.50'
+         memory: 4.5G   
# 其他部分保持不变</code></pre><p>我对官方的 <code>docker-compose</code> 文件进行了一些改动，首先是映射了核显设备，使得 Immich 服务可以利用核显加速，另一个就是对机器学习的容器进行资源限制，避免占用宿主机过多资源。Immich 服务挂载的持久卷中，参考了 <a href="https://github.com/ZingLix/immich-geodata-cn">Immich 反向地理编码汉化</a> 这个项目，以便为反向地理编码提供中文支持。配置成功后，在 Immich 的地图就可以看到的显示为中文的地理信息了。</p><blockquote><p>注意， Immich 的部署需要准备两个文件，除了 <code>docker-compose.yml</code>，还需要下载 <a href="https://github.com/immich-app/immich/blob/main/docker/example.env">example.env</a> 文件并更名为 <code>.env</code> 文件，并在其中对数据库密码等必要参数进行配置。</p></blockquote><p>Immich 服务启动后，可以访问 <code>http://&lt;服务器IP&gt;: 2283</code> ，创建并登录管理员账户。然后点击管理员账户下面的“系统管理”，进入管理页面配置外部图库，将挂载对应路径的外部图库进行导入，等待任务处理完成，刷新首页的时间线，应该可以看到外部图片成功展示。</p><h3>Nextcloud 配置</h3><p>仅作为参考：</p><ul><li>镜像补丁：Memories 支持视频和 Live Photos 的转码，以及核显的硬件加速。但这些功能并不是开箱即用的。如果和我一样，使用的是 Nextcloud 的<a href="https://hub.docker.com/_/nextcloud/">社区镜像</a> 来进行部署的话，这个镜像中并不包含核显的驱动以及 FFmpeg 转码工具，需要自行构建镜像（如果你不希望每次重建容器都执行安装命令的话）。一个示例的 <code>Dockerfile</code> 可能如下：</li></ul><pre class="language-dockerfile"><code># 基础镜像
FROM nextcloud:stable

RUN \
    # 设置 DEBIAN_FRONTEND 为非交互模式，避免 apt-get 安装时卡住
    export DEBIAN_FRONTEND=noninteractive &amp;&amp; \
    \
    # 1. 替换镜像源并添加 non-free 组件
    sed -i -e "s|deb.debian.org|mirrors.tuna.tsinghua.edu.cn|g" \
           -e "s|security.debian.org|mirrors.tuna.tsinghua.edu.cn/debian-security|g" \
           -e 's/ main$/ main contrib non-free non-free-firmware/g' \
           /etc/apt/sources.list.d/debian.sources &amp;&amp; \
    \
    # 2. 更新并安装软件包
    apt-get update &amp;&amp; \
    apt-get install -y --no-install-recommends \
        ffmpeg \
        intel-media-va-driver-non-free \
        vim &amp;&amp; \
    \
    # 3. 进行清理
    apt-get clean &amp;&amp; \
    rm -rf /var/lib/apt/lists/*</code></pre><p>&nbsp;</p><ul><li><code>docker-compose.yml</code> 配置：</li></ul><pre class="language-yaml"><code>services:
  app:
    # 使用重新构建后添加了核显渠道的镜像
    image: nextcloud:stable-patched
    container_name: nextcloud
    restart: unless-stopped
    # 如果使用非 root 用户，需要添加核显设备的用户组
    group_add:
      - "106"
    ports:
      - "18080:80"
    depends_on:
      - db
      - cache      
    environment:
      - TZ=Asia/Shanghai
      - PUID=1000
      - PGID=1000
      - MYSQL_HOST=db
    # 数据库配置，需要和下面 MySQL 中的配置保持一致
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=your_nextcloud_mysql_password
      - REDIS_HOST=cache
      - PHP_MEMORY_LIMIT=2048M
    volumes:
      - /docker/nextcloud/app:/var/www/html
    # 核显设备映射
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128  
    # 资源使用限制 
    deploy:
      resources:
        limits:
          cpus: '2.00'
          memory: 4G
        reservations:
          memory: 2G       
    networks:
      - nextcloud

  db:
    image: mysql:8
    container_name: nextcloud-db
    restart: unless-stopped
    environment:
      - TZ=Asia/Shanghai
      - PUID=1000
      - PGID=1000
      - MYSQL_ROOT_PASSWORD=your_mysql_root_password
    # 数据库配置，需要和上面 Nextcloud 中的配置保持一致
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=your_nextcloud_mysql_password    
    volumes:
      - /docker/nextcloud/db/data:/var/lib/mysql
      - /docker/nextcloud/db/conf:/etc/mysql/conf.d    
    networks:
      - nextcloud
  cache:
    image: redis:7
    container_name: nextcloud-cache
    restart: unless-stopped
    environment:
      - TZ=Asia/Shanghai
      - PUID=1000
      - PGID=1000
    volumes:
      - /docker/nextcloud/cache/data:/data
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - nextcloud

networks:
  nextcloud:
    name: nextcloud
    external: false</code></pre><h2>优化配置</h2><h3>硬件加速</h3><p>如果参考我的 Immich 配置了硬件加速，可以在“系统管理” -&gt; “设置”中，拉到最下面的“视频转码设置”。在倒数第二个选项卡“硬件加速”，设置加速器 API 为 VAAPI，如果是 Intel 7 代以上的 CPU，还可以选择 Quick Sync 选项。</p><h3>中文地图编码</h3><p>参考项目 <a href="https://github.com/ZingLix/immich-geodata-cn">immich-geodata-cn</a> 进行配置。在 Relases 中，下载和当前 Immich 一致的 geodata 文件，并解压到服务器指定路径，geodata 文件级别参考项目的说明。注意，因为 Immich 更新较快，适配最新版本的 Immich 的文件可能是自动更新版本。</p><h3>机器学习设置</h3><p>默认的模型是不支持中文的，如果希望语义搜索可以获得较好的效果，<a href="https://immich.app/docs/features/searching/">官方文档</a> 提供了可选的多语言模型和它们的配置参考。比如，主要以中文检索的情况，可以选择 <code>nllb-clip-large-siglip__v1</code> 模型，它的内存要求是 4226 MB，这也就是我在前面的配置中，为 <code>immich-machine-learning</code> 预留了 4.5 G 内存的原因。如果服务器资源拮据，也可以考虑使用默认的模型或者关闭机器学习功能。<br />同样的，需要在“系统管理” -&gt; “设置”中找到“机器学习设置”中进行配置，这里只需要将智能搜索选项卡中的 CLIP 模型更换为选择的模型即可，<code>immich-machine-learning</code> 服务会自动进行模型下载。如果遇到网络问题，可以安装 <code>git</code> 的 <code>lfs</code> 插件，通过<a href="https://hf-mirror.com/">镜像网站</a>手动拉取模型到本地。同样以我的配置为例，本地的模型路径为 <code>/docker/immich/cache/clip</code>。因此只需要在这个路径下执行 <code>git clone https://hf-mirror.com/immich-app/nllb-clip-large-siglip__v1</code> 即可。</p><h2>写在最后</h2><p>如果设备的性能不是太好，Immich 的 AI 识别可能会运行较长的时间。以我的 12300T，近 1.5 万张照片和图片，运行了大约 8 个多小时。对移动设备上的照片备份，我也额外设置了同步脚本的配置。<br />通过拆分，我获得了什么？在告别了对我而言稍嫌鸡肋的 Nextcloud 后，我获得了一个更加现代的照片管理应用和一个更加纯粹的同步应用。我不再试图在一个“大而全”的应用中解决全部问题，而是让不同的应用各司其职，最终组合为一个协调配合的系统。这大概就是自托管的魅力。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102433</id>
            <title>iPhone17出了，国内能用苹果智能了吗？</title>
            <link>https://sspai.com/post/102433</link>
            <guid isPermaLink="false">https://sspai.com/post/102433</guid>
            <pubDate></pubDate>
            <updated>Mon, 15 Sep 2025 03:01:01 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p style="margin-left: 0px; text-align: justify;">iPhone 17 亮相，更轻薄的 Air 版本，横向排列的背面摄像头。<strong>但对国内用户来说，最关心的还是：能用上苹果智能了吗？</strong></p><p style="margin-left: 0px; text-align: justify;">答案是大概率不行，因为发布会没提。<br />&nbsp;</p><p style="margin-left: 0px; text-align: justify;">苹果在 2024 年 9 月随 iPhone 16 推出「苹果智能」，涵盖AI写作、回忆、任务、Siri 和摄像头识别等功能，但部分跳票，国内使用也受到限制。<br />&nbsp;</p><p style="margin-left: 0px; text-align: justify;">如今体验门槛比半年前低多了：一台非国行 iPhone，加一个海外账号就行。</p><p style="margin-left: 0px; text-align: justify;">能用和好用显然不是一回事。与其纠结何时开放，<strong>不如看它能否自然融入日常使用？</strong>要是真没那么厉害，用不用得上也就无所谓了。带着这个标准，我分享几个印象深刻的场景。</p><h2 style="margin-left: 0px;"><strong>自动回复：多是情绪价值</strong></h2><p style="margin-left: 0px; text-align: justify;">短信场景下，苹果智能可以自动回复。比如家人、朋友发来消息，你不好意思不回，但也一时间不知道怎么说，系统会生成两条轻描淡写的回应供你选择，并不断闪烁。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/09/11/article/bb74b8fc3541f373ceebced3e3cf0f3e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">不过可以感受到，苹果在这类场景里给模型的上下文很短，生成内容大多只围绕对方最后几句话，缺乏深入理解。</p><p style="margin-left: 0px; text-align: justify;">体验下来，感觉不能总用，因为苹果这种「片汤话」风格太明显了，用多了，反而让人觉得你在应付。</p><p style="margin-left: 0px; text-align: justify;">这让我想到一句话：<strong>这世间唯一不能应付的，就是应付本身。</strong></p><h2 style="margin-left: 0px;"><strong>改写：刚需但没做好</strong></h2><p style="margin-left: 0px; text-align: justify;">既然自动回复容易露馅，那退而求其次，先写个大概让它改总行吧？</p><p style="margin-left: 0px; text-align: justify;">改写（润色）本该是苹果智能最合适的场景。比如回老板消息：对方想知道一件事，但情况复杂：某个东西没交上去，原因不在你。</p><p style="margin-left: 0px; text-align: justify;">这时需要合适的措辞，既解释清楚又避免误解，这种不想说的，又不得不说的情况，确实是大模型的强项。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/09/11/article/af3bdc49c71a6ecb25d179c48c9659b6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">但体验下来很麻烦。手机屏幕小，打字框紧巴，让模型润色时看不到具体怎么改，还担心覆盖原内容。</p><p style="margin-left: 0px; text-align: justify;">相比之下，电脑上体验更好：快速打出想法，发给 GPT 润色，再贴回聊天软件，流畅。</p><p style="margin-left: 0px; text-align: justify;"><strong>说到底，我们有时用大模型润色不是想把话说得漂亮，而是不想多费心思包装。</strong>只想把事实背景写清楚，语言变成纯粹信息传递，不在上面花费多余感情和精力，少操心动气。</p><h2 style="margin-left: 0px;"><strong>通知管理：有用，但不够聪明</strong></h2><p style="margin-left: 0px; text-align: justify;">我们再退而求其次：写不行，那只看呢？现在各种 App 都在推送，手机几乎没停过，不知道先看谁、谁优先级高。苹果智能，能帮我们做好优先级划分和总结吧？</p><p style="margin-left: 0px; text-align: justify;">它确实会自动分级，把它认为重要的「首要通知」用彩色框标出。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/09/11/article/ea0c43bbfddd3d38f426f157d2d175a5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">但实际体验中，这套优先级不够聪明：要么反复把最近联系人标记成首要通知，要么看到涉及钱的数字就优先展示。<strong>判断逻辑太直接，缺乏大模型解析非结构化数据的优势。</strong></p><p style="margin-left: 0px; text-align: justify;">如果一个 App 推送太多次，苹果智能会总结。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/09/11/article/04d85bacfd7095202710b02c58382f36.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">但这种考验很大， 比如新闻 App 推送多条无关联的新闻，模型硬要总结，结果就是让人哭笑不得的「大乱炖」。</p><figure class="image ss-img-wrapper"><img alt="一系列约会消息被摘要成“享受一起出去玩，但还没发展出浪漫感情”@trungtphan X" src="https://cdnfile.sspai.com/2025/09/11/article/48de272f2c0fc4391a01fe1cc60e59d4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>一系列约会消息被摘要成“享受一起出去玩，但还没发展出浪漫感情”@trungtphan X<br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="股票通知混乱：Robinhood股票通知摘要成“GOOG上涨；AMD下跌；GOOGL上涨”。重复和简略让它看起来像胡言乱语@stockmktnewz X" src="https://cdnfile.sspai.com/2025/09/11/article/e0fff55037e7f2b74e0b3a3808657e2a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>股票通知混乱：Robinhood股票通知摘要成“GOOG上涨；AMD下跌；GOOGL上涨”@stockmktnewz X</p><p style="margin-left: 0px; text-align: justify;">在国外最大论坛Reddit，甚至有一个 r/AppleIntelligenceFail 板块，专门用来收集这些 AI 搞笑总结。苹果后续 iOS Beta 中取消了新闻 App 通知总结。</p><p style="margin-left: 0px; text-align: justify;">当然，你如果觉得它不准，也可以点击展开成多个原始信息，分开看就好。</p><h2 style="margin-left: 0px;"><strong>Siri + ChatGPT：更聪明，却有点绕</strong></h2><p style="margin-left: 0px; text-align: justify;">Siri 现在变聪明了，尤其是可以接入 ChatGPT。</p><p style="margin-left: 0px; text-align: justify;">但问题是调用模式多了一层：你问 Siri 问题，如果觉得苹果本地模型回答质量不高，经常还要说「请用 ChatGPT 回复」，然后它把问题发给你绑定的 GPT 账号，GPT 再回复给你。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/09/11/article/06e3dc4e7ac346f8ea62facbba225d30.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">这个流程还不如直接打开 ChatGPT App 顺手。</p><h2 style="margin-left: 0px;"><strong>相机识别：能用</strong></h2><p style="margin-left: 0px; text-align: justify;">相机识别倒是能用。</p><p style="margin-left: 0px; text-align: justify;">长按拍照键有两种模式：搜索直接跳转谷歌或亚马逊购物，询问则可以问这个东西的具体细节，识别个花花草草还是挺方便的。</p><figure class="image ss-img-wrapper"><img alt="图片" src="https://cdnfile.sspai.com/2025/09/11/article/2ee1fa28c4219b14bd8376cc017e2760.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2 style="margin-left: 0px;"><strong>结语</strong></h2><p style="margin-left: 0px; text-align: justify;">说回开头的问题：苹果智能的「存在感」强不强？</p><p style="margin-left: 0px; text-align: justify;">从体验来看，它确实在尝试融入日常使用，但大多数场景都还是「半成品」状态。自动回复太假，通知总结经常翻车，文本改写在手机上用起来麻烦，Siri 接入 ChatGPT 又多了一层。只有相机识别算是能用。</p><p style="margin-left: 0px; text-align: justify;">「苹果智能」这个定语其实挺准确，以上大部分涉及文字的功能，都是苹果自己的本地模型生成的。</p><p style="margin-left: 0px; text-align: justify;">这背后有多重限制：<strong>手机算力有限，苹果本身不是大模型公司，还要兼顾隐私保护不能什么都上云。</strong>要在这么多约束下既保证体验又控制成本，不仅考验模型能力，更考验产品能力。</p><p style="margin-left: 0px; text-align: justify;">也许这就是苹果的节奏：先做个框架出来，慢慢打磨。但对国内用户来说，等它真正好用的时候，我们能不能用上还是个问号。</p><p style="margin-left: 0px; text-align: justify;">本文首发<a href="https://mp.weixin.qq.com/s/y_Ov-TQwporrBhihOEj22w">「言辞之间」</a>，同步少数派。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102505</id>
            <title>Me 3.0 升级技术分享：从「液态玻璃」开始</title>
            <link>https://sspai.com/post/102505</link>
            <guid isPermaLink="false">https://sspai.com/post/102505</guid>
            <pubDate></pubDate>
            <updated>Sun, 14 Sep 2025 23:35:45 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p style="margin-left: 0px;">2025年6月9日，苹果在 WWDC 上发布了基于 Liquid Glass（液态玻璃）的全新设计语言，那一刻我在屏幕前难以抑制内心的兴奋——我知道，属于 Me 的又一次进化，终于要开始了。</p><p style="margin-left: 0px;">作为从一开始就全局支持原生磨砂玻璃效果的应用，Me 在视觉层面已经积累了很好的基础。而这一次，借助系统的底层能力，Me不仅实现了向液态玻璃的平滑过渡，更借此契机，完成了从设计语言到功能架构的全方位重构。</p><p style="margin-left: 0px;">从六月下旬启动开发，到如今 Me 3.0 正式成型，我想与你分享这次升级背后的思考与实现。</p><h2 style="margin-left: 0px;"><strong>一、视觉新生：从「磨砂」到「液态」的沉浸体验</strong></h2><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/eb5ba31905c09a0d84f5085908d7b904.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Me3.0</figcaption></figure><p style="margin-left: 0px;">液态玻璃的加入，无疑是这次视觉升级中最让我着迷的部分。在 Xcode 26 中编译后，导航栏几乎无需调整就自然呈现出全新的液态质感。而对于其他界面元素，也仅需通过 .glasseffect() 修饰符轻松适配——技术上的低门槛，却带来了视觉上的高回报。</p><p style="margin-left: 0px;">尽管苹果官方建议“避免过度使用液态玻璃”，但我仍决定全局启用该效果，并保留用户切换回经典磨砂风格的选项。初期的 Beta 版本确实存在性能压力，一度让我犹豫是否该收敛一些，但随着系统迭代，优化效果日益明显，这也印证了我坚持的理由。</p><p style="margin-left: 0px;">另一个显著变化，是背景设计的风格转向。旧版为了突出磨砂质感，采用了高饱和度的图片背景，初次惊艳，但久看易疲。3.0 版本中，我改用黑白配色与渐变点阵作底，反而更显耐看与沉稳。如果你选择液态玻璃效果，我强烈建议搭配一张色彩鲜明的自定义背景图，光影流动之间，视觉张力拉满。</p><h2 style="margin-left: 0px;"><strong>二、功能重构：更合理，也更强大</strong></h2><p style="margin-left: 0px;">这一次，我重新思考了模块划分的逻辑。原本的“今天”、“回顾”、“数据统计”、“运动记录”、“Me”，现在重组为“今天”、“健康”、“锻炼”、“挑战”、“Me”。不只是改名，更是对功能架构的深层整合。</p><h3 style="margin-left: 0px;"><strong>今天：</strong>你的健康每日简报</h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/d5e523dfd8e2df6f3f33eaedb35d194b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>今天</figcaption></figure><p>「今天」不再只是数据的堆砌，而是你健康生活的智能助手。在新版本中，我移除了之前Me自带的进度环，转而专注于呈现Apple Watch的健身圆环，让数据更加专注。现在，「今天」是一个高度模块化的仪表盘。新增的训练负荷通过直观的图表，对比过去28天与7天的训练数据，让你清晰了解每次训练的强度是否合理。压力评估模块则融合了HRV、心率、活动状态等多重数据，并借助机器学习模型，为你提供当前的压力水平评估——随着你的持续使用和反馈，这个模型会越来越懂你。最令我自豪的是全新的仪表盘和今日状态模块。仪表盘通过精美的环形进度条一览当天所有健康指标，并且你完全可以自由决定显示哪些、如何排序。而今日状态则整合了睡眠、运动、心血管等多维数据，通过动态算法生成你的每日健康评分，并给出专属改进建议。当然，所有模块都支持自定义排序，你可以打造一个完全属于你的「今天」。</p><h3><strong>健康：</strong>化繁为简，聚焦当下</h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/ebdc3c864d95f749b74a1100bddda8f3.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>健康</figcaption></figure><p style="margin-left: 0px;">之前版本的健康首页采用了一个大型胶囊区块，同时展示最新值和周、月、年的平均值。但很多用户反馈，他们更关心的是“现在”和“变化”，而不是历史平均。</p><p style="margin-left: 0px;">因此，新版做出了一个大胆而简洁的改进：我使用清晰的双栏列表排布各项指标，突出显示最新数值和相较于上一次的变化趋势。不仅如此，我还为11种健康数据类型分别设计了精致的渐变配色——无论是在首页还是在详细页面，这些色彩与默认背景相结合，视觉表现都相当赏心悦目。</p><h3><strong>锻炼：</strong>让每一次运动都被看见</h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/3b3475e47a941cd4225f21bdadd00141.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>锻炼</figcaption></figure><p style="margin-left: 0px;">锻炼页面现在变得更强大了。默认视图采用了多维图表和直观的日历打卡，让你对自己在某段时间内的运动表现一目了然。动态运动类型统计模块也得到了加强——你再也不会受限于4个常用类型，所有运动都会被自动识别和分类。</p><p style="margin-left: 0px;">查找历史记录也变得前所未有的便捷。我加入了强大的筛选器，支持按时间范围和运动类型快速检索。单次运动记录的详情页现在包含更丰富分段统计，此外还新增了两款风格独特的分享模板，让你轻松晒出成就。</p><h3><strong>挑战：</strong>与自己、与朋友、与所有人竞赛</h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/1149966a8d26846f37a483fdca6b50d2.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>挑战</figcaption></figure><p>「挑战」模块由之前的运动目标和排行榜整合升级而来。现在它分为三个层级：自我挑战、好友竞赛和全员排行榜。无论你是希望突破自我，还是想和朋友一较高下，甚至与所有Me用户比拼——这个模块都能满足你那该死的好胜心。运动的乐趣，一半在于挑战。</p><h3><strong>Me：</strong>更个性，更感恩</h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/bce9cd14ad8e0b8caff858fff7278fea.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Me</figcaption></figure><p style="margin-left: 0px;">「Me」页面本次也收获数项值得一提的升级：</p><p style="margin-left: 0px;"><strong>心率区间自定义</strong>：现在可以手动设置静息心率和最大心率，算法推荐将更贴合你的实际身体状况；</p><p style="margin-left: 0px;"><strong>轨迹热力图</strong>：你的每一次跑步、骑行都会在地图上留下印记。时间越近、轨迹越频繁，地图上的光斑就越亮；</p><p style="margin-left: 0px;"><strong>训练负荷计算扩展</strong>：由于性能考虑，Me默认只计算2025年1月1日以后的训练负荷数据，但在这个模块中你可以手动重新计算更早的记录（需注意：该功能仅支持2024年6月10日之后在iOS 18和watchOS 11上记录的数据）；</p><p style="margin-left: 0px;"><strong>特别感谢</strong>：我一直相信，好的作品从不是孤军奋战的成果。在这里，我特别感谢了那些在开发路上给予我灵感和技术支持的开发者伙伴，以及一直为我出谋划策的产品经理们。</p><h2 style="margin-left: 0px;"><strong>三、技术反思：踩坑、自研与 AI 编程</strong></h2><h3><strong>SwiftData</strong></h3><p style="margin-left: 0px;">在 Me 的数据持久化方案中，我选择了苹果在 2023 年 6 月推出的 SwiftData——某种意义上，这也让 Me 成了最早一批在生产环境中使用这一框架的 App。不得不说，作为一个新兴技术，SwiftData 在带来现代化声明式语法的那一刻，也带来了无数“惊喜”。</p><p style="margin-left: 0px;">由于它实在太新，我在开发过程中遇到的不少问题，甚至连苹果官方技术支持都无法给出明确的解决方案。数据版本迁移、多线程上下文安全……对于一个主要偏客户端的开发者来说，简直是持续不断的噩梦。但踩坑踩多了，倒也久病成医。在 Me 3.0 中，我大幅减少了对 SwiftData 的依赖，并引入 ModelActor 来加强线程安全的管理。</p><p style="margin-left: 0px;">不过随之而来的是新的课题：当你使用 ModelActor 之后，从 ModelContext 中 Fetch 出来的结果并不符合 Sendable 协议，无法直接跨线程传递。我必须手动将其转换为其他结构体才能继续处理——这种额外步骤，确实拖慢了开发的节奏。所以，如果你正在考虑是否要在项目中使用 SwiftData，我的建议是：谨慎评估，尽量避开早期坑点，尤其是如果你需要高度定制化的数据流机制。</p><h3><strong>自定义组件</strong></h3><p style="margin-left: 0px;">我一直不太理解苹果在某些组件设计上的限制思路。比如 ProgressView 和 Gauge，样式和尺寸被严格约束，几乎不允许开发者自由调整；再比如 Activity Rings（健身圆环），虽然在 App 中可以使用，但一旦你想把它做到小组件或者表盘上——抱歉，此路不通。</p><p style="margin-left: 0px;">每当你想要稍微跳出官方设定的框框，这些组件仿佛都在对你说“No”。于是，我只好走上自力更生的道路：借鉴苹果官方组件的视觉风格和交互逻辑，从头实现了一系列支持高度自定义的组件。</p><p style="margin-left: 0px;">不只是复制，我还加入了一些自己的创意。例如我实现了多阶段的进度条（用于训练负荷的视觉化）、可灵活定义背景线框和样式的雷达图，以及支持交互的动态热力图——它们不仅在 Me 中得到了应用，我也计划在整理代码后，将这些组件开源发布到 GitHub。或许有一天，它们也能帮到像你一样，不愿被默认设置束缚的开发者。</p><h3><strong>Vibe Coding</strong></h3><p style="margin-left: 0px;">2023年，我开始接触ChatGPT辅助编程，短短两年时间，AI编程的发展速度令人惊叹。回想Me2.0开发时，我需要为排行榜模块编写后端服务，当时对Python几乎一无所知（现在也还是一无所知）。我花了一天时间快速浏览Python语法，随后在Cursor的辅助下，仅用两天就完成了后端服务的开发与部署，这种效率在传统开发模式下难以想象。</p><p style="margin-left: 0px;">在这次Me3.0的升级过程中，我的主力工具换成了Claude Code。虽然它的命令行交互方式可能让一些开发者望而却步，但一旦体验过其强大的代码理解和生成能力，你很可能会和我一样爱上这种纯净而高效的编程方式。与此同时，我也测试了Google的Gemini——它的交互设计十分友好，很会提供情绪价值，但在Swift编程方面总是差一口气，好几次几乎就要成功，却总是在最后关头功亏一篑。</p><p style="margin-left: 0px;">最近OpenAI的Codex表现相当抢眼，既提供CLI工具，也有Cursor插件。与Claude Code相比，Codex属于“人狠话不多”的类型，给出的解决方案简单直接，效果出众。不过它的CLI交互体验还比较简陋，像是毛坯房，使用额度策略也让人琢磨不透：Claude Code每5小时重置额度，而Codex却让我等了1天零16个小时。此外，我也体验了几款国产AI编程工具，如TRAE、CodeBuddy和Qode。其中TRAE表现尚可，至少达到了可用水平，每月10美元的定价也还算合理；另外两款则暂时不建议尝试。</p><h2 style="margin-left: 0px;"><strong>四、写在最后：不止于迭代，更是一场真诚的构建</strong></h2><p style="margin-left: 0px;">Me 3.0 不只是一次功能叠加或界面焕新，它承载的是我对“健康数字伴侣”的重新理解：它应更直观，也应更懂你；它应更美观，也应更高效。</p><p style="margin-left: 0px;">从磨砂到液态，从分散到整合，从手动到智能——变的是形态，不变的是我希望帮助你更好地关注自我、享受运动的初心。</p><p style="margin-left: 0px;">未来，我仍将继续倾听你的反馈，不断优化 Me 的体验。你是否喜欢这一次的改版？有没有功能让你特别心动？欢迎在评论区告诉我。</p><span class="ss-linkCard">&nbsp;</span><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102515</id>
            <title>意大利北行记（一）</title>
            <link>https://sspai.com/post/102515</link>
            <guid isPermaLink="false">https://sspai.com/post/102515</guid>
            <pubDate></pubDate>
            <updated>Sun, 14 Sep 2025 23:27:27 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <h2>引言</h2><p>书接上文，在经历一场短暂的“翡冷翠十二时辰”后，我们于日落时分再次回到了米开朗基罗广场。斜阳映照下，此时的阿诺河已被完全染成金黄；而这条金色丝带的另一侧，那巨大的宛如漂浮于城市之中的圣母百花堂正在俯瞰着世间。只见她转过身去，渐渐伸开双臂，将整个城市拥入怀中。于是，街角那些喧噪的声音开始一个个的消失，取而代之的，是远处飘来的有规律的吟咏和一阵阵空洞的风；这是来自圣母的低吟，只为安抚她这个因黑夜将至而有些紧张的孩子。这旋律是如此的古老，风也好似来自过去，万物此刻也不由得屏气凝神，惟恐惊扰了孩子的梦。 抬头看去，城市上空氤氲着一层淡蓝色的雾霭，那正是初织的梦网，温热而寂静。随着入睡的呼吸声愈发稳定，梦的织体愈发坚实，这层雾霭便也逐渐沉淀、增厚、静止，好似万古长空……突然，一声电吉他的轰鸣打破了这沉寂，只见他腾空而起，然后四散开来，点亮万千灯火。而在源头阑珊处，人群正在快速聚集，躁动的情绪开始在空气中蔓延；随后，音乐声变得越发清晰、明亮，引得空气中的风也一改清冷，裹挟着脚步声、喝彩声、欢笑声、掌声自四面八方呼啸而来。此时的广场上，人声鼎沸，叠影熙攘，朝圣者的炽热暂时熄灭，而祛魅者的狂欢正悄然拉开帷幕。<strong>日夜更替铸一座城，这正是属于佛罗伦萨的变与不变。</strong></p><p>在一片欢闹热烈声中，我们启程出发。绕过著名的皮蒂宫后转头向北驶去，与这座时光之城的背影挥手告别。接下来，我们将前往博洛尼亚与等待我们的宋博士汇合；宋兄是我在大学时期的学弟，一晃多年，现在的他已成为一名年轻的人文地理学者。当他得知我此次要前往多洛米蒂地区时，作为一名老地理人的他已经让我隔着屏幕都能感受到他的“兴奋”；因此不消我多费口舌，仅在简单忽悠了几句后，他便欣然同意，决定在旅途的后半段从德国飞来中从加入我们；说起来，宋兄与我还曾是一同参加大学“旅游协会”的同仁，对于在满世界做背包客这件事可以说是我们共同的爱好；可惜，我们这个社团由于种种的“不可抗力”可以说是“名存实亡”，整个大学期间都没有组织过一次集体出行，大家也只好单打独斗，自我发挥；因此，这场时隔多年后的共同旅行也算是弥补了我们学生时代留下的遗憾。从后视来看，宋兄的加入不仅没有走向常见的“拆伙”结局，反而起到了正向的助推作用，甚至还可以说大大提升了我们这趟旅行的感受价值；</p><p>有长期出行经历的朋友都知道，“旅伴”的重要性程度有时甚至可以超过目的地本身，毕竟风景再好，也需要有好的心情才能欣赏；而心情的好坏，往往就直接取决于你和身边人的关系；<strong>在旅途中，大大小小的选择不计其数，还要随时面临各种突发情况，如何分工与决策，高度考验着彼此的默契程度；就算一开始的分歧双方尚可妥协找补，但随着旅途加深所形成的扩大效应，长期聚积的矛盾终将难以掩饰，终将在某个时刻爆发……</strong>因此，我向来在旅伴的选择上慎之又慎，而若能有幸找寻到一个合拍的伙伴，难度比之在相亲市场上找个“如意伴侣”，可以说是只高不低；</p><p>但非常幸运的，我们与宋兄作为同样有着多年旅行经历的“老登”，在外出食宿、游览选择、兴趣点分配等方面的心理标准上高度同频，这就大大降低了整个小队分崩离析的可能。更难能可贵的是，与一位专业的“地理老师”同游山水之间，一面欣赏美景、各抒感怀，一面还能听他向你畅谈地貌之构造、时空之演变，如此人文与科学交融的体验，那绝对是高价参加私享团也难能遇到。再加上他在这几年点亮的驾驶、摄影、修片、烹饪、社交等一系列技能点，我们的这位宋博士绝对可以称得上是一位“万能青年旅伴”。当然，此为后话，暂且不表。</p><p>言归正传，这博洛尼亚与佛罗伦萨两地相距不远，直线仅约100km，但却被山地阻隔，在历史上各自发展成为了两个王国（公国）的首府。两座城市气质迥然，自古典时期起就呈现出“一文一武”的格局。<strong>如今，佛罗伦萨是意大利的手工业和艺术中心，代表的是意大利的面子；而博洛尼亚则是意大利的工业重镇，其地位相当于无锡或苏州之于中国，是意大利低调的里子；</strong></p><p>而横亘于两城之间的这条山脉，正是大名鼎鼎的“亚平宁山脉”。熟悉意大利地理的朋友都知道，亚平宁山脉贯穿意大利全境，从最北的利古里亚海岸向南直达“靴尖”的西西里岛，长度超过1200公里，堪称意大利的”龙脉“；也正因此，意大利在地理上又得名“亚平宁半岛”。我们这次从南部一路走来，也得以有幸完整看到这座山脉形态的变化起伏；在那不勒斯地区为代表的南部地区，火山活动高度发育且呈现海岸山脉的形态，毁灭古罗马庞贝的维苏威火山就是其中代表；在罗马周围的中部地区，山势大开大合，其间既有崇山峻岭，也有独立的高原和山间盆地，是上演诸侯割据、军阀混战的绝佳舞台，罗马帝国以武而彰的文化气质显然就与此有关；而在博洛尼亚所处的北部，山体变得更为连续，由于地势不断加高，因此这一段的山体在视觉上显得低矮，倒是与江浙地区的丘陵地貌更为相似。作为对意大利“全局覆盖”的大山，亚平宁山脉更是在政治和文化意义上具有不可代替的作用；自意大利独立以来，这座山脉就逐渐成为国家认同和凝聚的核心概念，其历程与“长城”在中国近代史的发展阶段颇有异曲同工之处。</p><p>因此，作为一个地理文化爱好者的我，对于本次自驾路上可以穿越这座意大利“长城”，在规划之初还是十分期待甚至兴奋的。我甚至已经早早在脑海里提前预演了在翻越这条“神圣之路”时所应有的史诗情绪。但想象是美好的，现实却很“残酷”，如今去往博洛尼亚的道路早已舍弃了早先的翻山路线，改为全程隧道覆盖，只需半小时不到便可横穿亚平宁；而原来的传统路线，目前已被改造为成一条专门的户外道路，仅允许徒步通过。<strong>在这一刻，我似乎理解了国内那些热衷在藏区行走的部分老驴群体，总是抱怨墨脱公路的开通让他们再也无法感受到藏南小城的美好与淳朴；由此观之，“驴友”可谓是现代社会管理中最难“伺候”的一个群体了，科技给的不到位便会嚷嚷着“配套不足，基建落户”，科技太发达又会痛心疾首的表示“摧毁了这里原本生活里的诗意”。这是现代科技发展的太蛮横？还是一小撮人太矫情？我看两者都有，就由着他们接着争辩吧。</strong></p><p>虽然没有机会近距离观摩亚平宁山脉的一石一林，但这条穿山隧道到是给我们留下了深刻印象；这几年里我们接连在中亚、中欧、高加索等地自驾游览，对于国外“基础设施”的平均水准，在心理上基本有了稳定的预期；可以说在世界上的绝大多数国家的眼中，基础设施这四个字重要的只是前边“基础”二字，甭管是50年前的还是100年前的，只要是尚且能用且还用不死人那就可以称之为“设施”。然而这条通往意大利北部的隧道，可以说是我们近几年在国外难得一遇的现代化设施，其内部整洁明亮、铺装完善，还有完整的通风设备，施工标准我看比之国内发达地区也丝毫不落下风。可以说意大利政府用这么一条隧道提前向我们预告了北部地区的富裕和繁华，相较起来，我们早些时间在南意遇到的那些隧道就显得颇有古风了，你甚至可以从中读出意大利从洞穴部落走向现代社会的完整脉络；<strong>当车辆从隧道中开出来的一瞬间，地势一下豁然开朗，一个巨大的平原在我们的面前升起，这正是号称“意大利长三角”的波河平原，同时也意味着我们正式结束了在托斯卡纳大区的旅程；</strong></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/e9d9966e8df07331fb4583e8f4323128.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption><i><strong>黄昏下的圣母百花堂</strong></i></figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/d1bc2a09e0789271fc35aa82144ca0f4.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption><i><strong>在米开朗基罗广场上等待落日的人群</strong></i></figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/49d95a9cbbaa0df1a745f3407bb245c3.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption><i><strong>夕阳下的阿诺河</strong></i></figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/025fc6be51ffc8ff5eb406673d00a35a.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption><i><strong>托斯卡纳双星之二--锡耶纳</strong></i></figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/395539e8b075437e66a3cf961a5b53a7.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption><i><strong>托斯卡纳双星之二--锡耶纳</strong></i></figcaption></figure><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/15/682ca38300184995d73278e69990134f.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption><i><strong>精品小镇皮恩扎</strong></i></figcaption></figure>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102485</id>
            <title>为了解决Obsidian的分享难题，我做了一个一劳永逸的插件【自荐】</title>
            <link>https://sspai.com/post/102485</link>
            <guid isPermaLink="false">https://sspai.com/post/102485</guid>
            <pubDate></pubDate>
            <updated>Sun, 14 Sep 2025 23:24:45 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>使用Obsidian很长时间，一直觉得有一个很大的痛点，就是<strong>分享自己的笔记非常不方便。</strong>因为本地优先的理念，无法直接生成可访问的链接，想要分享给朋友，只能手动导出成pdf，或者把内容重新复制到在线文档，体验链路非常冗长，如果需要那么复杂的路径，还不如直接用在线云文档。</p><p>当然，官方和社区在这方面也做了很多努力，比如官方的Publish服务，或者第三方的Markdown部署网页、Digital garden插件，研究了一圈，发现至少存在以下一个或几个问题：</p><ul><li><strong>价格贵</strong>，官方的Publish服务8美元/月，分享在大多时候并不是一个高频需求，可能一周也用不了几次，使用订阅服务的成本真的很高。</li><li><strong>配置麻烦</strong>，必须用电脑，还得折腾git、折腾代码、折腾网页样式、折腾域名。</li><li><strong>部署延迟大</strong>，每次传上去都要等上好一会，等成功了耐心都没了，更何况还有不小的概率不成功，很糟心。</li><li><strong>国内访问性差</strong>，自部署的方案主要都是依赖托管网站，国内访问不稳定，就算绑定自己的域名，还是会有被限制的风险。访问的稳定性，我认为对于分享场景是非常重要的。</li><li><strong>存在隐私泄露风险</strong>。有国外开发者做了可以一键部署的插件，可以将笔记快速上传到他免费提供的网站上，但是毕竟是把数据放在陌生人的服务器里面，不够安全。</li><li><strong>权限管理不够丰富</strong>，有时候我只想分享给特定的人，有时候我不希望看到笔记的人可以下载、复制、转存，如果是一个普通前端网页，这种精细度的权限管理是很难实现的。此外还有访问量统计、读者行为的记录、留言批注等等，难度都很大。</li><li><strong>侧重于库的分享</strong>，而不是单篇文档，我知道作为双链笔记，保持连通性是很重要的，但在很多情况下不够实用，特别是当我希望分享出去的时候，我肯定不会希望这是一篇结构很复杂、需要频繁跳转的文档。</li></ul><p>于是，试了一圈，还是只能重新想办法，<strong>从第一性原理出发，既然自己搭太复杂，为什么不复用国内成熟的、已经搭建好所有功能的成熟云文档产品？</strong></p><p>飞书文档、WPS文档、腾讯文档都是很好的在线云文档产品，他们的功能已经做的很丰富了，而且几乎不存在上面的缺点，只需要能有一个方法，把我们需要分享的Obsidian内容一键同步过去，回传链接，不就和原生的分享功能体验几乎一致了吗？</p><p>说起来容易，但是为了保证和原生效果保持一致，中间的难题不少，这些云文档虽然支持部分Markdown语法，但并不能完整映射Obsidian的效果（比如callout块上传后会被识别为引用块）；同步文字的同时，还要考虑如何同步图片，并插入在相同的位置；整个上传过程一定要快要丝滑，不能在使用的时候感受到过高延迟；后续权限更新、删除、分享复制等功能也要集成到Obsidian中，避免后续管理不便。</p><p>经过几天的的努力，过程还是挺曲折的，好在上面这些难题都一一克服了，最终在ObShare这个插件里，实现了我预期的“便捷、无感、绝对安全”的三个要求。</p><figure class="image ss-img-wrapper image_resized" style="width: 365px;"><img src="https://cdnfile.sspai.com/2025/09/13/article/6852e4d33c8fe95ae75ef662081d63e4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><ul><li><strong>首先是好用</strong>，可以通过右键菜单、命令面板、左侧快捷按键三种方式，一键分享当前文档，支持直接在Obsidian内设置文档的可见权限、查看分享文档、删除文档，实现文档全生命周期管理。配置过程非常简单，十分钟左右就可以搞定，一次配置，永远不用折腾。</li></ul><figure class="image ss-img-wrapper"><img alt="359285e9-8279-4a67-8359-bc395703964a" src="https://cdnfile.sspai.com/2025/09/13/article/e82a42a180d8dd8e8e0cd8e21c3f58da.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><ul><li><strong>然后是无感</strong>，平均上传时间不到10秒（因为网络延迟、附件多或体积大等因素，可能会有波动），体验链路全面对齐在线云文档，仿佛就是Obsidian原生的分享方案。</li><li><strong>绝对安全</strong>，在隐私保护上做了大量工作，所有个人配置的敏感数据在端侧以加密方式储存，永不上传；文档整个传输过程仅在用户设备与飞书服务器之间通信，全程不涉及第三方；用户只需要提供最小授权，不会影响飞书账户的使用。上传过程也可以在F12的日志中完整，插件代码完全开源。</li></ul><p>对我而言，自研插件补全了Obsidian体验的最后一款短板，在本地优先的基础上，做到分享体验也毫不妥协，通过这款插件，可以随时把经验、灵感、创意与朋友伙伴分享，再也不用因为隐私和本地优先，牺牲掉分享的便利性。</p><p>当然，我知道目前插件只是一个半成品，还有很多地方需要改进和完善（比如后续考虑设计批量上传能力、实现双链关系映射、支持更多复杂格式、更细致的权限管控等等），因此它迫切需要更多人的使用、需要更多的真实反馈和优化建议。</p><p>如果你也有类似的分享需求，不妨试一试这款插件，目前，ObShare1.0.2版本（第一个开放版本）已经在github开源并提交Obsidian插件上架申请，Obsidian插件审核极慢，但等不及让大家用上，大家可以在release界面直接下载包体使用~</p><p>github链接指路：<a href="https://github.com/xigua222/ObShare">ObShare</a><br />&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102470</id>
            <title>OSAKA &amp; TOKYO：一份写给自己的旅行答案</title>
            <link>https://sspai.com/post/102470</link>
            <guid isPermaLink="false">https://sspai.com/post/102470</guid>
            <pubDate></pubDate>
            <updated>Sun, 14 Sep 2025 23:23:57 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <h2><strong>缘由</strong></h2><p>这次日本之行的缘起，说起来有点「简单粗暴」——我，一个任天堂的游戏迷，实在太想去大阪环球影城（USJ）的马力欧世界了！</p><p>就为了这个念头，我喊上了朋友一起，策划了一场跨国之旅。我们的逻辑也很直接：既然机票都买了，那顺便去一趟东京吧？既然到东京了，那涩谷、秋叶原这些地方也得顺便逛逛吧？</p><p>于是，一场最初只是为了见马力欧的单纯旅行，像滚雪球一样，变成了一场横跨关西与关东的五日双城大冒险。</p><p>这篇游记，就是我们这场「顺便」之旅的全记录。它没有完美的计划，却充满了各种意料之外的发现和乐趣。希望能为你未来的旅程，提供一份带着我们体温的参考。</p><h2><strong>Day 1：大阪初遇・烧鸟夜</strong></h2><p style="margin-left: 0;">怀着满分的兴奋，我们从杭州出发。飞机穿过棉花糖般的云层，窗外风景由壮观的跨海大桥，渐渐变为被雨水浸润的大阪市轮廓。</p><figure class="image ss-img-wrapper image_resized" style="width: 352px;"><img src="https://cdnfile.sspai.com/2025/09/12/405a2f262022de555c1c9b16e483cdf2.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>从飞机舷窗看到的海景</figcaption></figure><h3><strong>✅ 入境与交通</strong></h3><p style="margin-left: 0;">都说日本入境排队长，但我们体验下来相对顺利。秘诀就在于提前线上申请好的「Visit Japan Web」，在自助机上扫 QR 码、扫护照、录指纹，然后去对应的人工窗口核对信息，整个流程高效又清晰。</p><p style="margin-left: 0;">从关西机场到市中心，我们选择了性价比路线。在南海电铁的自助机上，轻松办好了 ICOCA 交通卡（类似国内的交通卡，押金 500 日元），然后选择了便宜一半的「急行」列车。车厢很像地铁，座椅靠着软软的，一个小时的车程里，看着窗外陌生的街景掠过，真实感才慢慢涌上来。</p><blockquote><p><strong>【小贴士】</strong></p><p style="margin-left: 0px;"><strong>交通选择</strong>：从关西机场到难波，南海电铁有「特急」和「急行」两种车。「特急」有点像高铁，可以指定席位，全程约 50多分钟；「急行」像地铁，随到随坐，约 60 多分钟，但价格几乎便宜一半，不赶时间的话非常推荐。</p><p style="margin-left: 0px;"><strong>导航App</strong>：Google 地图（查路线时刻）+ 换乘案内（查地铁价格）+ 高德地图（步行导航），三款 App 组合使用，基本不会出错。</p></blockquote><h3><strong>🏨 惊喜的落脚点</strong></h3><p style="margin-left: 0;">我们预定的酒店在四桥附近，地理位置绝佳，靠近心斋桥附近，随便逛逛就能感受到繁华。虽然知道日本酒店房间小，但推开门的一刻还是被惊喜到了：房间虽小但五脏俱全，干净整洁得不像话，甚至还有一个迷你浴缸！完全看不出是 2019 年装修的，日本在酒店维护上真的让人佩服。</p><h3><strong>🍢 鸟贵族的美味暴击</strong></h3><p style="margin-left: 0;">放下行李已是晚上 9 点，饥肠辘辘的我们直奔朋友推荐的烧鸟店——「鸟贵族」。</p><p style="margin-left: 0;">这家连锁店的性价比真的超高，当然是相对于日本的水平来说的哈。通过平板选中文后点餐，毫无沟通障碍。我们把菜单上前几页的肉串都点了一遍：鸡肉串、猪肉串、大肠串……每一串都烤得恰到好处，鲜嫩多汁。唯一踩雷的是我们误以为是鸡心而点错的鸡肝，那个味道确实有点欣赏不来。</p><p style="margin-left: 0;">但这顿饭最大的惊喜，是随便点的名为「可尔必思」的饮料。它尝起来像带着微醺感的酒酿气泡水，清甜又爽口，瞬间驱散旅途的疲惫。毫不夸张地说，这是我本次旅行的最佳饮品！</p><p style="margin-left: 0;">然而犯了个新手错误，没看清「一份是两串」，导致前期点的所有串都自动翻倍，最后的结果就是——两个人吃出了三个人的量，扶着墙出门。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/b2d3d46e3aa2d92ba71dce7d8d6e7432.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>烧鸟</figcaption></figure><blockquote><p><strong>【小插曲】</strong></p><p>晚上回酒店，发现「去哪儿」网发的环球影城门票链接，下载下来是个无法识别的文件。在我快要绝望时，灵光一闪，发现文件名里有“pdf”字样，抱着试一试的心态把后缀改成了 .pdf —— 成功了！明天可以顺利进场了，真是虚惊一场。</p></blockquote><h2><strong>Day 2：大阪狂欢・USJ 限定</strong></h2><p style="margin-left: 0;">我们在 USJ 的一天，是从台风带来的大雨中开始的。就因为天气导致很多地铁延迟，我们还忙中出错坐过了一站，但这丝毫没有影响我们的热情。</p><h3><strong>✨ 超出预期的惊喜项目</strong></h3><p style="margin-left: 0px;"><strong>《间谍过家家》的 VR 过山车：</strong>这是我们玩的第一个项目，本来没抱太高期望，结果被狠狠惊艳到！戴上 VR 眼镜，瞬间进入阿尼亚的世界，跟着剧情体验一场紧张刺激的逃亡。过山车的失重感和 VR 的逼真视觉效果完美结合，肾上腺素一路狂飙。</p><p style="margin-left: 0px;"><strong>《名侦探柯南》的 4D 剧场：</strong>童年回忆加成！虽然听不懂日语，但 4D 效果做得极好。当屏幕上出现坠落场景时，现场会喷出大量干冰模拟烟雾，冰凉的触感让人身临其境。经典的踢球场景 3D 效果也很棒，感觉足球下一秒就要冲出屏幕。</p><p style="margin-left: 0px;"><strong>丧尸鬼屋（万圣节限定）：</strong>虽然我自己胆子很小，但还是被朋友拉着去了。一路上被各种丧尸追赶，氛围感十足。演员也是信念感满满，尽管我听不懂他说了什么，但也能从肢体上略知一二。最好笑的是排在我们后面的日本妹子，全程边尖叫边道歉，承包了我们所有的恐惧，反而让我们觉得她有点可爱。</p><figure class="image ss-img-wrapper image_resized" style="width: 444px;"><img src="https://cdnfile.sspai.com/2025/09/12/baab8bcc866155952e9f7d22975f1efe.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>柯南剧场</figcaption></figure><h3><strong>🍄 欢迎来到超级任天堂世界</strong></h3><p style="margin-left: 0;">穿过那根经典的绿色管道，当游戏里的世界 1:1 真实地展现在眼前时，那种震撼难以言喻。食人花、板栗仔、耀西……所有熟悉的元素都活了过来，我真的是太爱这个世界了。</p><p style="margin-left: 0;">我们买了心心念念的互动手环（奇诺比奥款真好看！），虽然互动小游戏感觉有点「智商税」，但为了这份热爱，含泪说值了！</p><p style="margin-left: 0;">「耀西的冒险」是个可爱的观光项目，坐着小车能把整个园区的风景尽收眼底。但「酷霸王的卡丁车」体验有点一言难尽，排了一个多小时的队，实际的交互感却很弱，真的超级失望了。</p><figure class="image ss-img-wrapper image_resized" style="width: 414px;"><img src="https://cdnfile.sspai.com/2025/09/12/851ec982be63a61bc7bc69985bf4265e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>马里欧世界</figcaption></figure><blockquote><p><strong>【小彩蛋】</strong></p><p>本着「来都来了」的原则，我和朋友自然买了很多周边。后来去玩手环专属的互动小游戏时，工作人员在讲解完规则后，还特意指了指我们买的周边，并对我们竖起了大拇指哈哈。</p></blockquote><h3><strong>⚡ 全场最佳的禁忌之旅</strong></h3><p style="margin-left: 0;">等到傍晚时分，我们把哈利波特园区作为收官项目。当城堡映入眼帘，魔法世界的气息扑面而来。「3D 禁忌之旅」被我们一致评为全场最佳！裸眼 3D 效果绝佳，你就像真的骑着扫帚，在霍格沃茨上空飞翔，与火龙擦肩，躲避蜘蛛的攻击，那种沉浸式的刺激，为我们的 USJ 之旅画上了最完美的句号。</p><figure class="image ss-img-wrapper image_resized" style="width: 465px;"><img src="https://cdnfile.sspai.com/2025/09/12/7bdba22150f1038cafdd67eadd2e8237.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>哈利波特城堡</figcaption></figure><h3><strong>🥢 试试从未尝过的大阪烧</strong></h3><p style="margin-left: 0;">暴走近两万步后，我们拖着疲惫的身体回到市区。晚饭是在大众点评上找的，一家评分很高的大阪烧店。小店藏在楼梯上，很有市井气息。我们点了经典的大阪烧和一份特色炒面，师傅在铁板上现场制作，香气四溢。刷满酱汁的大阪烧口感层次丰富，那份炒面更是锅气十足，好吃到停不下来！人均一百不到的价格，就能享受到如此地道的美食，性价比超高。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/0f4982719d6c8c458299d39f5292e0d4.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>大阪烧</figcaption></figure><blockquote><p><strong>【小槽点】</strong></p><p style="margin-left: 0px;"><strong>地铁的换乘</strong>：日本地铁换乘很多不是站内换乘，需要先出站，走很长一段路，再进另一个站，对于游客来说有点绕。</p><p style="margin-left: 0px;"><strong>罗森的遗憾</strong>：本想尝尝日本罗森的甜品，结果发现根本没有，我挺喜欢冰皮蛋糕的，没想到居然是国内限定。</p><p style="margin-left: 0px;"><strong>百事的关西限定</strong>：在自动贩卖机买的，看到是限定的白桃汽水，真的满怀期待，结果喝起来一股奇怪的药味，纯纯浪费钱了。</p></blockquote><h2><strong>Day 3：东京初遇・涩谷夜</strong></h2><p style="margin-left: 0;">在大阪度过充实的两天后，我们向着下一站——东京出发。</p><h3><strong>🚅 状况之外的新干线初体验</strong></h3><p style="margin-left: 0;">睡到自然醒后，我们退了房，去吃了一蘭拉面。细面、浓汤，味道不错，但汤底对我来说有点像高级版的泡面，略咸。配的乌龙茶很好地中和了，而且是无糖的越喝越顺口。</p><figure class="image ss-img-wrapper image_resized" style="width: 439px;"><img src="https://cdnfile.sspai.com/2025/09/15/d6cbd9d857a93dae36e07378df042dfd.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>一蘭拉面</figcaption></figure><p style="margin-left: 0;">真正的挑战，是在新大阪站购买新干线车票。我们在自助机上顺利买到了「特急券」，以为大功告成，结果进站时被闸机无情地拦下。比划了半天才从工作人员那里明白，乘坐新干线需要「乘车券」+「特急券」两张票才行！这个小小的乌龙，也算是自由行里宝贵的踩坑经验了。</p><p style="margin-left: 0;">新干线的感觉和国内高铁类似，两个半小时后，我们顺利抵达了繁华的东京。</p><figure class="image ss-img-wrapper image_resized" style="width: 309px;"><img src="https://cdnfile.sspai.com/2025/09/12/f05d2e3dcbbf3045a506070051d10d90.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>新干线</figcaption></figure><blockquote><p><strong>【小贴士】</strong></p><p style="margin-left: 0px;"><strong>新干线车票</strong>：记住，一定要买两张票！一张是基础的「乘车券」（证明你从A站到B站的权利），一张是「特急券」（证明你可以坐这趟快车的权利）。</p><p style="margin-left: 0px;"><strong>东京地铁通票</strong>：我们提前薅羊毛买了 7 折的「东京 24/48/72 小时地铁通票」，在对应地铁站的自助机上兑换即可，对于需要在市区内频繁移动的游客来说，非常划算。</p></blockquote><h3><strong>🏙️ 涩谷 SKY：在城市之巅俯瞰星河</strong></h3><p style="margin-left: 0;">在浅草的酒店安顿好后，我们直奔涩谷。晚饭的咖喱牛肉饭味道浓郁，但整体感觉齁咸，算是我最不满意的一顿了。</p><p style="margin-left: 0;">之后我们又逛了逛优衣库，价格真的很便宜，感觉下次来只带身上的这一套，其他都可以在当地买了。还感受了堂吉诃德的喧闹与琳琅满目，见识了各种奇奇怪怪的百货商品。</p><p style="margin-left: 0;">真正的重头戏是涩谷 SKY，飞猪上门票唯一十万加的含金量。登上顶楼的露天展望台，360 度的无死角视野让人瞬间失语。脚下是世界上最繁忙的十字路口，车流和人流像交织的溪流，远处是东京塔和鳞次栉比的摩天大楼。那天正好农历七月十五，月亮特别圆，天上虽然星星只几颗，但整个人很放松，还在停机坪上躺了许久。环顾四周一圈，发现女生们特别爱拍照，胆子小也得出片哈哈，就还挺有意思的。</p><figure class="image ss-img-wrapper image_resized" style="width: 468px;"><img src="https://cdnfile.sspai.com/2025/09/12/4a6358cdd8415a2b91eda11971fee716.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>在涩谷 Sky 眺望</figcaption></figure><blockquote><p><strong>【小贴士】</strong></p><p>因为我们是临时决定去的，所以是飞猪上买的门票，还是有几十块钱的溢价，提前在官网约的话更实惠。</p></blockquote><h2><strong>Day 4：东京漫走・二次元</strong></h2><p style="margin-left: 0;">今天的主题是 City Walk，路线随心而动，体验却异常丰富。</p><h3><strong>🍣 有趣的 Kura 寿司体验</strong></h3><p style="margin-left: 0;">午饭选择了性价比较高的回转寿司店「くら寿司（Kura Sushi）」。这里点餐很有趣，除了可以在传送带上自取，也能通过平板点单，菜品会通过上层传送带「嗖」地一下送到你面前。吃完的盘子可以投进回收口，每集满五个还能抽一次奖，我们幸运地抽到了一个《怪兽八号》的扭蛋。</p><p style="margin-left: 0;">寿司的味道很不错，金枪鱼寿司配点芥末无敌，熟猪排/牛排寿司本身就很惊艳。裹着面粉炸制的天妇罗寿司，外脆里嫩，也非常推荐。限定的月见肉饼寿司则像一个迷你汉堡，风味独特。唯一美中不足的是甜品，点的两款都很甜，而且蛋糕体很多，就很不值得。</p><figure class="image ss-img-wrapper image_resized" style="width: 502px;"><img src="https://cdnfile.sspai.com/2025/09/12/4480e20691862c9f3fc0fcd406b6494e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>くら寿司墙边的装饰（寿司吃的太欢忘记拍了）&nbsp;</figcaption></figure><h3><strong>⛩️ 浅草寺的「吉」与「遇」</strong></h3><p style="margin-left: 0;">饭后，我们顺路逛到了浅草寺。花 100 日元体验了抽签，我抽到大吉，朋友抽到吉，算是个好兆头。把好签带走，坏签系在旁边的架子上，这便是这里的习俗。</p><p style="margin-left: 0;">在这里还遇到了一位口音像同胞的大妈，她先是跟我们讲浅草寺与道教的渊源，讲着讲着却突然开始生气，甚至莫名其妙地骂了我们几句，实在让人摸不着头脑。我们选择不与她争辩，快速离开，不让别人的负能量影响自己的旅途。</p><figure class="image ss-img-wrapper image_resized" style="width: 356px;"><img src="https://cdnfile.sspai.com/2025/09/12/108a6c8e2829d2c6d6193ac587dfa934.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>浅草寺内</figcaption></figure><h3><strong>🎮 秋叶原：二次元圣地巡礼</strong></h3><p style="margin-left: 0;">下午，我们来到了二次元的圣地——秋叶原。我们直奔动漫迷必打卡的 Animate，整整七层楼，从漫画、手办到各类周边，让人目不暇接。顶楼甚至还有成人向区域，也算是开了眼界。又去了隔壁的 Softmap 等几家比较有名的店，但布局和内容都差不多，逛多了就觉得没什么新鲜感。</p><p style="margin-left: 0;">我最期待的还是扭蛋，在一家有整层楼都是的扭蛋店里，我终于圆梦了。在经历了一番「投币失败」的小插曲后，我成功扭到了一个超帅的贝吉特！这里的街机厅也很有意思，玩《高达》的人最多，反而国内经典的《拳皇》无人问津。</p><figure class="image ss-img-wrapper image_resized" style="width: 460px;"><img src="https://cdnfile.sspai.com/2025/09/12/f73464e5ff17bfa2c9994686c578d2da.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>秋叶原</figcaption></figure><h3><strong>🏮 夜晚的新宿与池袋</strong></h3><p style="margin-left: 0;">晚上，我们去了传说中的歌舞伎町。街道上确实有很多「案内人」和「站街女」，但并没有想象中那么混乱，更多的是一种猎奇的观察。我们还偶遇了地下偶像的露天表演，女孩们全程开麦唱跳，实力非常强。候场区还有下组进场的偶像，每个人旁边都有一个粉丝，好像得花点钱才能说话。就感觉在东京，这种现象既神奇又正常。</p><p style="margin-left: 0;">之后转战池袋，这里更像「中国城」，连库迪咖啡都看到了，真是不期而遇的惊喜。晚饭体验了一家烤肉店，肉质上乘，牛舌和牛肉都非常美味，但分量实在是小，六片肉就要 125 元，性价比不高。唯有那杯可尔必思，依然是我的最爱。</p><figure class="image ss-img-wrapper image_resized" style="width: 490px;"><img src="https://cdnfile.sspai.com/2025/09/12/fb956a0936faf80d585e69e0582af6e8.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>库迪和歌舞伎町</figcaption></figure><h2><strong>Day 5： 东京收官・吃与买</strong></h2><p style="margin-left: 0;">旅行的最后一天，我们睡到自然醒，享受在东京的最后慢时光。</p><h3><strong>🐷 被油烟呛到的绝品炸猪排</strong></h3><p style="margin-left: 0;">退房并寄存行李后，我们去了一家大众点评上的必吃榜餐厅——「山家炸猪排」。猪排外皮酥脆，里脊鲜嫩多汁，配上咸甜酱和黄芥末，味道堪称一绝。吃多了会比较腻，喝点乌龙茶刚刚好。反倒是配的味增汤，有点像是腐乳的味道，个人并不是很能接受。但这 70 元一份的套餐，性价比还是极高的。</p><p style="margin-left: 0;">唯一的缺点是，我们被安排在正对操作台的位置，炸猪排的油烟直冲我们而来，呛得人睁不开眼。我和朋友只能狼吞虎咽地吃完，然后火速逃离现场。</p><figure class="image ss-img-wrapper image_resized" style="width: 420px;"><img src="https://cdnfile.sspai.com/2025/09/12/581011425bfb1735a7b33914216901a2.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>炸猪排</figcaption></figure><h3><strong>💎 银座的「土狗」漫步</strong></h3><p style="margin-left: 0;">下午我们来到银座，很有名的商业区。在松屋银泰百货，我们见识了动辄上百万的手表和几千上万的绅士服，店员热情地让我们试一条蟒蛇皮皮带，我们俩连碰都不敢碰，相视一笑之后，感叹自己真是「土包子」，也算是一种有趣的体验。</p><p style="margin-left: 0;">反差最大的是，附近竟然有一家高达 12 层的优衣库旗舰店，！店内的设计很搞笑，挂着的衣服会自己左右晃动，堪称天才般的设计。</p><figure class="image ss-img-wrapper image_resized" style="width: 359px;"><img src="https://cdnfile.sspai.com/2025/09/15/5ce8f16961a96914ec200817fdf095e8.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>偶遇的 Nissan 概念车</figcaption></figure><h3><strong>🎁 Loft：伴手礼的天堂</strong></h3><p style="margin-left: 0;">最后也是逛了下 Loft，我们找到了买伴手礼的乐趣。这是一家大型文创和生活用品店，从文具、贴纸到各种杂货，设计可爱，价格平实。原本兴趣缺缺的朋友，最后也沉浸在挑选可爱贴纸的快乐中，我们在这里为朋友们准备了满满的心意。</p><figure class="image ss-img-wrapper image_resized" style="width: 298px;"><img src="https://cdnfile.sspai.com/2025/09/12/7074c603e7cb49290cbfdefcde1c3a28.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Loft</figcaption></figure><h3><strong>🍔 最后的晚饭与归途</strong></h3><p style="margin-left: 0;">接近傍晚的时候，我们远眺了一下东京塔，吃了在日本的最后一餐——肯德基。限定的「月见」汉堡出乎意料地好吃，糖心蛋和独特的酱料很加分。但薯条和可乐就远不如国内了，依旧是很粉的薯条和很稀的可乐。</p><figure class="image ss-img-wrapper image_resized" style="width: 566px;"><img src="https://cdnfile.sspai.com/2025/09/13/e4125557869abac6dfd24bbc114ed706.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>东京塔和月见汉堡</figcaption></figure><p style="margin-left: 0;">回程的航班延误了，落地南京已是午夜。入住了积分换的全季酒店，躺在比日本酒店大两倍的床上，那种熟悉而舒适的感觉，为这次旅行画上了一个安心的句号。</p><h2><strong>尾声</strong></h2><p style="margin-left: 0;">五天四晚，一晃而过。</p><p style="margin-left: 0;">回看这些天的照片和笔记，记住的不仅仅是那些著名的地标，更多的是那些鲜活的瞬间：为一杯好喝的饮料而开心，为买到 50 块钱的 MUJI T 恤而惊喜，和朋友一起研究地铁线路，在街头因为一个有趣的招牌而大笑……</p><p style="margin-left: 0;">我想，这大概就是旅行的意义——在陌生的城市里，用自己的脚步去丈量，用自己的眼睛去发现，然后带着一身故事和满心欢喜，回到自己的日常里，继续好好生活。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102469</id>
            <title>仅103KB！Deskpins 一个轻巧免费的Windows窗口置顶工具</title>
            <link>https://sspai.com/post/102469</link>
            <guid isPermaLink="false">https://sspai.com/post/102469</guid>
            <pubDate></pubDate>
            <updated>Sun, 14 Sep 2025 23:23:48 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>每次打开页面使用多个软件，总是受困于层叠的窗口遮挡</p><p>揪破脑袋也没找到窗口置顶按钮，恨不得再买个屏幕单独放置窗口😡</p><p>后来，发现了这个神器——「<i><strong>Deskpins</strong></i>」</p><hr /><h4>介绍</h4><p>软件没有“常规”的界面，启动默认显示在系统托盘，只能右键打开菜单选项。</p><figure class="image ss-img-wrapper image_resized" style="width: 269px;"><img src="https://cdnfile.sspai.com/2025/09/12/a5ca2a38e57daa70a7a5da69b5d89382.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>右键打开菜单</figcaption></figure><p>如你所见，软件非常简洁。</p><p>最上方两个选项「Enter pin mode」和「Remove all pins」</p><p>分别用于“指定窗口置顶”和“取消所有置顶”</p><p>点击「Enter pin mode」后，鼠标指针会变成一枚图钉📌，移动到窗口上“左键”即可置顶，“右键”退出/取消。</p><p>固定成功后窗口右上角会显示📌标志，点击📌可取消置顶。</p><figure class="image ss-img-wrapper image_resized" style="width: 429px;"><img src="https://cdnfile.sspai.com/2025/09/12/67297af7ca1821d694a66f89df2f74e4.gif" /><figcaption>Enter pin mode 演示</figcaption></figure><p>「Remove all pins」好理解，就是取消所有置顶，这里不再说明。</p><p>&nbsp;</p><p>接下来是软件的「Opinions」设置菜单，可以设置图钉📌和托盘图标的颜色、自动化置顶、快捷键。</p><figure class="image ss-img-wrapper image_resized" style="width: 351px;"><img src="https://cdnfile.sspai.com/2025/09/12/856fa68fbdc95f70c76850f8fdd22218.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Opinions 界面</figcaption></figure><p>这里重点说一下「Autopin」和「Hotkeys」</p><p>「Autopin」可以自定义开启某个窗口后自动置顶，比如经常打开文档对照，就可以设置文档窗口自动置顶。</p><figure class="image ss-img-wrapper image_resized" style="width: 664px;"><img src="https://cdnfile.sspai.com/2025/09/12/291d0d5d0ccd4a574857d9ba041dcf48.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>一图流 开启自动置顶</figcaption></figure><p>「Hotkeys」可定义快捷键快速“指定窗口置顶”和“直接置顶当前窗口”</p><figure class="image ss-img-wrapper image_resized" style="width: 393px;"><img src="https://cdnfile.sspai.com/2025/09/12/0da9e363b38e77d084e91e2564ab272f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>自定义快捷键</figcaption></figure><p>勾选启用后，鼠标点击对应选项并按动键盘，可设置快捷键，按Back[退格]键取消。</p><h4>结语</h4><p>这个小工具真的是救了我的大命，上手后就回不去，强烈安利！！！👍👍👍</p><hr /><h4>软件下载（Github开源）：</h4><p>https://github.com/thewhitegrizzli/DeskPins/releases</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102319</id>
            <title>小鸭计时: 为什么我们用“可视化”来帮助孩子理解时间、减少对抗？</title>
            <link>https://sspai.com/post/102319</link>
            <guid isPermaLink="false">https://sspai.com/post/102319</guid>
            <pubDate></pubDate>
            <updated>Sun, 14 Sep 2025 23:23:38 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>在家里，我经常面对这样的场景： &nbsp;</p><p>“快点刷牙！” &nbsp;</p><p>“一会儿要出门了！” &nbsp;</p><p>“还剩几分钟？”</p><p>结果我自己成了计时器，孩子觉得我唠叨，气氛紧张，争执不可避免。</p><p>作为开发者，也是一名家长，我开始思考：如果 <strong>时间本身能成为中立裁判</strong>，家长和孩子都遵守同一条规则，而不是互相对抗，会发生什么？于是，我设计了 <strong>Duckie Timer</strong>——一个通过<strong>可视化时间</strong>帮助孩子理解时间、主动完成任务的小工具。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/06/5b2e337ade6e3c544280c227f37a5387.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><hr /><h2>孩子为什么难以理解时间</h2><p>“还有 2 分钟”对孩子来说几乎没有概念。口头提醒往往短暂有效，但频繁催促只会增加摩擦。</p><p>我们希望解决的，是如何把 <strong>抽象时间具象化</strong>。DuckieTimer 的核心理念是 <strong>认知卸载（Cognitive Offloading）</strong>：把时间从脑子里转移到视觉上。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/09/c04a0694fbdfeeb406e40b46b850fef8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>圆形进度圈直观展示剩余时间，遮罩层随着时间慢慢覆盖，孩子一眼就能看到任务完成进度。</figcaption></figure><p>倒计时不再是父母的声音，而是可视化的“规则”，孩子和家长都遵守同一条线</p><p>时间从“争吵源”变成“中立裁判”，孩子慢慢理解：“只要跟着圈走，就能完成任务”。</p><hr /><h2>小鸭子和奖励机制：趣味提升自律</h2><p>单纯的进度圈可能显得冷冰冰，于是我们加入了 <strong>小鸭子和奖励机制</strong>：</p><p>完成任务时出现可爱的鸭子贴纸和“嘎嘎”声</p><p>孩子刷牙、收玩具时获得视觉和听觉反馈</p><p>小小的游戏化元素，让日常任务轻松可感知</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/09/549ff4aceceb212e2245fa74c34e51c4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这些设计不仅增加趣味，也让孩子主动配合，减少原本的对抗感。</p><hr /><h2>功能与特色如何结合场景</h2><p>在开发过程中，我们把功能紧密结合孩子的日常：</p><ul><li><strong>圆形可视化进度</strong>：直观展示剩余时间，减少家长口头催促</li><li><strong>自定义任务</strong>：刷牙、收玩具、穿衣服等，贴合日常</li><li><strong>儿童模式</strong>：简洁界面、大按钮，避免误触</li><li><strong>桌面小组件</strong>：一键启动任务，减少操作摩擦</li><li><strong>奖励机制</strong>：小鸭贴纸 + “嘎嘎”声，让完成任务更有成就感</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/09/fcae12b70ae4f66f100c4cabd37e0588.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>从屏幕小组件启动任务</figcaption></figure><p>另外，DuckieTimer 的 <strong>特色优势</strong>：</p><ul><li><strong>无需网络</strong>：随时随地离线可用，不依赖互联网</li><li><strong>安全可靠</strong>：符合美国 COPPA 和欧洲 GDPR 的儿童守则，无广告</li><li><strong>比物理计时器或传统闹钟更灵活</strong>：可自定义任务和时间，借助小鸭子吸引儿童注意力</li><li><strong>适合不同人群</strong>：不仅适合家长和孩子，还能帮助 <strong>ADHD 孩子</strong>更好地理解和管理时间，也适合 <strong>幼教老师、儿童咨询师</strong>在课堂或辅导中使用。</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/09/c4bc1729505f70933e5b29452479b26b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>开启儿童模式</figcaption></figure><p>这些设计让 DuckieTimer 不只是计时器，而是 <strong>可视化 + 趣味 + 安全 + 灵活</strong> 的儿童时间伙伴。</p><hr /><h2>实际体验</h2><p>在家里测试后，我发现效果很明显：</p><ul><li>小月龄孩子也能理解时间</li><li>完成任务后收集小鸭贴纸，很开心</li><li>家长无需不停催促，亲子关系轻松多了</li></ul><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/06/628122a83538d345d21bc231556cc8f9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>时间不再是争执源头，而是共同遵守的“游戏规则”。孩子慢慢学会理解和管理时间，我也能少一些焦虑。</p><hr /><h2>小结</h2><p>DuckieTimer 是一个 <strong>视觉化、趣味、安全的时间伙伴</strong>：</p><ul><li>帮助孩子理解抽象的时间概念</li><li>将亲子对抗转变为共同遵守规则</li><li>小鸭子和贴纸增加积极反馈</li><li>无需网络，随时可用；</li><li>安全守护儿童；</li><li>可自定义、吸引儿童</li></ul><p>对家长来说，它减少催促焦虑；对孩子来说，它让日常习惯直观、可玩、充满成就感。</p><p>如果你也在经历“每天催促孩子完成任务”的拉锯战，不妨让时间成为 <strong>中立裁判</strong>，用可视化和趣味化的方式，让孩子自己掌握节奏。</p><p>你家孩子会喜欢这种“小鸭子计时方式”吗？欢迎在评论区分享你的故事！</p><span class="ss-application">&nbsp;</span><p>&nbsp;</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102507</id>
            <title>Chatbase + Rag：快速打造你的知识库问答机器人</title>
            <link>https://sspai.com/post/102507</link>
            <guid isPermaLink="false">https://sspai.com/post/102507</guid>
            <pubDate></pubDate>
            <updated>Sun, 14 Sep 2025 03:39:14 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p style="margin-left: 0px;">ChatBase + RAG，简单的理解为：把网站的文章当作一个知识库，接入一个大语言模型（LLM），通过RAG（Retrieval-Augmented Generation，检索增强生成） 的方式，让机器人能够基于你提供的内容来回答问题。</p><p style="margin-left: 0px;">也可以理解成生成一个网站的专属问答AI客服：</p><figure class="image ss-img-wrapper image_resized" style="width: 437px;"><img src="https://cdnfile.sspai.com/2025/09/14/0edcfc88d8c1a760a5662394853fddb2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">可以作为FAQ智能客服、网站嵌入助手、内部知识库查询使用。</p><p style="margin-left: 0px;">Chatbase + RAG可以提供更精准的回答，减轻用户在大量网站数据中检索的负担。</p><h3 style="margin-left: 0px;"><strong>注册并创建Chatbase</strong></h3><p style="margin-left: 0px;">登录Chatbase官网：<a href="https://www.chatbase.co/"><u>https://www.chatbase.co/</u></a></p><p style="margin-left: 0px;">注册并登录账号，点击“Build your agent”按钮。</p><figure class="image ss-img-wrapper image_resized" style="width: 438px;"><img src="https://cdnfile.sspai.com/2025/09/14/862d4714abc08d998cb7683902744537.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">需要注意的是，不要使用Chrome浏览器的翻译功能，否则Chatbase在使用的过程中会返回500。</p><figure class="image ss-img-wrapper image_resized" style="width: 335px;"><img src="https://cdnfile.sspai.com/2025/09/14/e75f8e4dc1b89e4696ac25270864e078.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">在创建Chatbase Agent时，如果是网站类型，选择“Website”并输入网站链接；如果是文件或文本等类型，则选择对应的Files或Text。</p><p style="margin-left: 0px;">因为我这里设置个人博客的问答机器人，选择“Website”并输入URL后，点击“Fetch links”捕捉网站的链接和资源。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/38d6b6c8cc2be0c0ec6a8b6f3a46c717.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">捕捉完成之后，点击右侧的“Create agent“，创建Chatbase Agent。</p><figure class="image ss-img-wrapper image_resized" style="width: 328px;"><img src="https://cdnfile.sspai.com/2025/09/14/02088eccfbe08b768141ad3801cafd50.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3 style="margin-left: 0px;"><strong>管理Chatbase Agent</strong></h3><p style="margin-left: 0px;">创建完成后，显示Chatbase Agent的管理界面。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/e0825cb42b08cfc800f25b2d8e71dc77.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">可以选择“Model”配置AI的类型，例如GPT-4o Mini，如果涉及开发技术等领域，推荐使用<strong>Claude 3 Haiku</strong>，在技术方面要领先于ChatGPT。</p><p style="margin-left: 0px;">左侧的Activity – Chat logs，可以查看和Chatbase Agent的对话框，后期的对话内容都会保留在这里。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/9910a6464df701abbd54fe80707ce715.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3 style="margin-left: 0px;"><strong>部署Chatbase Agent</strong></h3><p style="margin-left: 0px;">在左侧点击Deploy，可以看到Chat widget（聊天小组件），Chat widget可以添加到网站并支持iframe，点击“Setup”按钮进行部署。</p><figure class="image ss-img-wrapper image_resized" style="width: 462px;"><img src="https://cdnfile.sspai.com/2025/09/14/78a8459c7251cd126493a76cc51e1fea.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">在Chat widget配置界面，可以配置Chatbase Agent的名称和欢迎语。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/a0c43328d0c163686e01526c49ff5e6f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">在“Style”（风格）标签页中配置Chatbase Agent的头像和默认图标。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/4f31b9588dba33339a62fb904d8fc05c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">在“Embed”（嵌入）标签页中，可以选择Chat widget（聊天小组件），将Widget Setup（设置）中的&lt;script&gt;…&lt;/script&gt;代码复制到网站中。</p><figure class="image ss-img-wrapper image_resized" style="width: 399px;"><img src="https://cdnfile.sspai.com/2025/09/14/7e1c0d52af5a9295094496df06aef1c4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3 style="margin-left: 0px;"><strong>WordPress配置Chatbase Agent</strong></h3><p style="margin-left: 0px;">如果是WordPress部署的网站，可以在WordPress的管理后台 → 外观 → 主题文件编辑器。</p><h4 style="margin-left: 0px;"><strong>1、直接修改footer.php</strong></h4><p style="margin-left: 0px;">找到header.php或footer.php：</p><p style="margin-left: 0px;">如果希望脚本早点加载，可以放到&lt;/head&gt;前；</p><p style="margin-left: 0px;">如果希望脚本最后加载，可以放到&lt;/body&gt;前。</p><p style="margin-left: 0px;">例如，在footer.php代码中，先找到&lt;?php wp_footer(); ?&gt;这一行。</p><p style="margin-left: 0px;">WordPress 的惯例是：所有额外脚本最好放在它之前。</p><pre class="language-javascript"><code>&lt;!-- 额外脚本 --&gt;
&lt;script&gt;
  console.log("Chatbase配置代码");
&lt;/script&gt;

&lt;?php wp_footer(); ?&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p style="margin-left: 0px;">保存后刷新，网站底部就会挂出Chatbase的浮动聊天按钮。</p><h4 style="margin-left: 0px;"><strong>2、用functions.php挂载脚本（推荐）</strong></h4><p style="margin-left: 0px;">推荐在主题或子主题的functions.php里加：</p><pre class="language-javascript"><code>function add_chatbase_script() {
    ?&gt;
    &lt;script&gt;
    (function(){
        if(!window.chatbase||window.chatbase("getState")!=="initialized"){
            window.chatbase=(...arguments)=&gt;{
                if(!window.chatbase.q){window.chatbase.q=[]}
                window.chatbase.q.push(arguments)
            };
            window.chatbase=new Proxy(window.chatbase,{
                get(target,prop){
                    if(prop==="q"){return target.q}
                    return(...args)=&gt;target(prop,...args)
                }
            })
        }
        const onLoad=function(){
            const script=document.createElement("script");
            script.src="https://www.chatbase.co/embed.min.js";
            script.id="********"; // 你的 Chatbase bot ID
            script.domain="www.chatbase.co";
            document.body.appendChild(script)
        };
        if(document.readyState==="complete"){onLoad()}
        else{window.addEventListener("load",onLoad)}
    })();
    &lt;/script&gt;
    &lt;?php
}
add_action('wp_footer', 'add_chatbase_script');
</code></pre><p style="margin-left: 0px;">这样WordPress会删除&lt;?php wp_footer(); ?&gt; 时自动插入 Chatbase 脚本，逻辑上和方法 1 一样，但更优雅、更安全。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/97dcc45601d806b9233fc78cd8f8f5c3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3 style="margin-left: 0px;"><strong>总结</strong></h3><p style="margin-left: 0px;">Chatbase可以实现个人博客网站的知识库问答机器人，帮助使用者更快的搜索内容。</p><p style="margin-left: 0px;">需要注意的是，免费版本的Chatbase Agent不会自动捕获网站更新的数据，只保留初次创建捕获时的数据。</p><p style="margin-left: 0px;">每次需要更新Chatbase Agent数据库时，都需要在Sources – Website中，重新抓取网站数据，重新培训Chatbase Agent代理。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/14/d9384b68daac6866496a464d8231eb68.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">否则，Chatbase数据库可能只保留创建时抓取的网站数据。</p><h3 style="margin-left: 0px;"><strong>相关文章</strong></h3><p style="margin-left: 0px;">1、RAG知识库、AI代理和远程大模型：<a href="https://fangjunyu.com/2025/09/13/rag%e7%9f%a5%e8%af%86%e5%ba%93%e3%80%81ai%e4%bb%a3%e7%90%86%e5%92%8c%e8%bf%9c%e7%a8%8b%e5%a4%a7%e6%a8%a1%e5%9e%8b/"><u>https://fangjunyu.com/2025/09/13/rag%e7%9f%a5%e8%af%86%e5%ba%93%e3%80%81ai%e4%bb%a3%e7%90%86%e5%92%8c%e8%bf%9c%e7%a8%8b%e5%a4%a7%e6%a8%a1%e5%9e%8b/</u></a></p><p style="margin-left: 0px;">2、Chatbase：<a href="https://www.chatbase.co/"><u>https://www.chatbase.co/</u></a></p><p style="margin-left: 0px;">3、Chatbase privacy：<a href="https://www.chatbase.co/legal/privacy"><u>https://www.chatbase.co/legal/privacy</u></a></p><h3 style="margin-left: 0px;"><strong>扩展知识</strong></h3><h4 style="margin-left: 0px;"><strong>嵌入脚本的安全隐患</strong></h4><p style="margin-left: 0px;"><strong>1、嵌入脚本的工作原理</strong></p><p style="margin-left: 0px;">本质上就是：</p><p style="margin-left: 0px;">在网站上插入一段 JS；</p><p style="margin-left: 0px;">这段 JS 会动态创建一个 &lt;script src=”https://www.chatbase.co/embed.min.js”&gt; 标签；</p><p style="margin-left: 0px;">浏览器加载这个 外部脚本，执行它；</p><p style="margin-left: 0px;">外部脚本负责在页面上渲染一个聊天窗口（浮动按钮、对话框），并与 Chatbase 的服务器通信。</p><p style="margin-left: 0px;">因此，Chatbase 并不会直接“读取”网站的数据库。它能看到的是客户端浏览器里的内容和上下文，主要包括：</p><p style="margin-left: 0px;">用户的网页 DOM（即页面上已经渲染的 HTML 内容）；</p><p style="margin-left: 0px;">用户的浏览器信息（IP、User Agent、设备信息）；</p><p style="margin-left: 0px;">用户和 Chatbase 聊天窗口中的对话内容。</p><p style="margin-left: 0px;">如果个人网站里有公开的文本内容（比如文章正文），理论上 Chatbase 的脚本是可以读取到的，因为它运行在页面环境里，能访问 DOM。但它不能直接访问WordPress 后台数据库，也不会有管理员权限。</p><p style="margin-left: 0px;"><strong>2、潜在的安全隐患</strong></p><p style="margin-left: 0px;">嵌入第三方脚本时要注意：</p><p style="margin-left: 0px;">信任问题：等于把浏览器的一部分控制权交给了 Chatbase。它理论上可以读取页面上的数据、设置 cookie、上报访问情况。这和嵌 Google Analytics、Disqus 评论系统、Facebook Pixel 的性质类似。</p><p style="margin-left: 0px;">隐私问题：用户和 Chatbase 聊天时的数据会被发送到 Chatbase 服务器。是否合规取决于 Chatbase 的隐私政策（比如 GDPR、CCPA 等）。</p><p style="margin-left: 0px;">数据泄露风险：如果网站里有敏感数据（例如只对登录用户可见的信息），Chatbase 脚本也能读到，除非做了严格的前端隔离。</p><p style="margin-left: 0px;">依赖风险：如果 https://www.chatbase.co/embed.min.js 被黑客篡改，攻击者可能利用它向个人网站访客植入恶意代码。和所有第三方 CDN/脚本依赖一样，这是常见风险。</p><p style="margin-left: 0px;"><strong>3、如何降低风险</strong></p><p style="margin-left: 0px;">如果决定用这种嵌入：</p><p style="margin-left: 0px;">1）只加载在需要的页面，不要全站都加载。</p><p style="margin-left: 0px;">2）避免前端暴露敏感信息（如 API Key、用户隐私字段），因为脚本能读 DOM。</p><p style="margin-left: 0px;">3）开启 CSP（Content Security Policy），只允许可信来源执行脚本。</p><p style="margin-left: 0px;">4）定期检查 <a href="https://www.chatbase.co/legal/privacy"><u>Chatbase 的隐私条款</u></a>，确保符合网站访客的隐私要求。</p><p style="margin-left: 0px;">5）如果非常在意隐私，可以考虑自己搭建类似的聊天机器人，而不是依赖 SaaS。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102468</id>
            <title>「任天堂物语」09 枯萎技术开花结果，横井军平再次封神</title>
            <link>https://sspai.com/post/102468</link>
            <guid isPermaLink="false">https://sspai.com/post/102468</guid>
            <pubDate></pubDate>
            <updated>Fri, 12 Sep 2025 08:25:53 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p style="margin-left: 0px;">上回讲到老任致敬奥德赛，推出自家的电视游戏机Color TV-Game。用了有点狡猾的营销手段，将Color TV-Game拆成2款来卖。Color TV-Game 6只有6款游戏，卖9800日元，Color TV-Game 15有15款游戏，卖1.5万日元。说实话，要不是钱包不给力的玩家，看到这个字面参数对比都会觉得15比较有性价比吧。总共卖出200万台，在当时的日本家用机市场也算是不错的成绩。</p><p style="margin-left: 0px;">扛起Color TV-Game大旗的是上村雅之，任天堂现在有3英杰（横井军平、上村雅之、竹田玄洋，宫本茂还没觉醒），另外两个在干嘛呢？接下来舞台让给横井军平。</p><p><strong>来自新干线的灵感</strong></p><p style="margin-left: 0px;">如果说Color TV-Game是跟着大环境走，那接下来的Game&amp;Watch就是跟着新干线来到这世界的。</p><p style="margin-left: 0px;">有一次横井军平乘坐新干线出差，那个年代没有智能手机，坐公共交通期间能消磨时间的东西不多。在横井军平打算认真发呆的时候，突然听到附近有密集的噼里啪啦的声音。认真找找声音的来源，发现是对面的乘客在按计算器。横井军平头上突然出现了灯泡，街机占领了游戏厅，Color TV-Game占领了客厅，新干线被计算器占领好像不太合适，是不是可以搞台能拿在手上玩的游戏机出来对抗坐车时的空虚呢？这个想法一直被他带进办公室。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/b2910c717b03af09da0d1aa0a623f15f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">有一天横井军平在办公室整理掌机方案，突然有同事敲了下办公室门。说山内溥的司机今天生病了，无法开车。能不能载山内溥去市中心参加一场会议。</p><p style="margin-left: 0px;">好家伙，我堂堂第一分队队长，不能叫其他人开吗？山内溥？哦，老板，行行行！</p><p style="margin-left: 0px;">为什么其他人不能帮忙开车呢？因为山内溥当时的座驾是一辆进口的凯迪拉克，左舵的，公司里除了山内溥的司机就只有横井军平会开了。</p><p style="margin-left: 0px;">坐车都是无聊的，山内溥自然不能像其他人那样按计算器。横井军平自然也不能让老板无聊，跟山内溥聊了聊他的新想法：“我们现在已经进入街机和家用机市场，这两个战场竞争激烈，想要突围就得多花心思，难度不小。我想，有没有可能我们开发一个新的战场，一个玩家不多但蛋糕极大的市场，掌上游戏机。像我们这种坐公共交通上下班的人，上下班期间极其无聊，如果有一台足够便携、随时随地都能玩一会的游戏机多好呀”。</p><p style="margin-left: 0px;">山内溥没出声，横井军平以为老板对这没多大兴趣，也就没再提了。可他不知道的是山内溥把他的话完完全全听进去了，在认真思考掌机的可行性。</p><p style="margin-left: 0px;">掌机市场现在还是一片蓝海，虽然这几年有公司推出过掌机，比如美泰（做芭比的那家公司）在1976年推出了世界第一台掌机 Auto Race，售价高达24.99美元，但销量远超预期。不过也没有做到街机和家用机那么恐怖的销量。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/96ba6b2ec9321f43854ad506d045a05c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">商业圣体已经觉醒的山内溥敏锐的察觉到，掌机也许能跟街机和家用机分庭抗礼。前面已经有公司开了个头，除了美泰之外，还有几家公司都推出过掌机。这些掌机虽然卖得也还行，但总感觉在游戏性上缺了点火候，而且卖得也很贵。如果能做出一款又好玩又便宜的掌机🤔</p><p><strong>和夏普联手做大做强</strong></p><p style="margin-left: 0px;">横井军平开车送山内溥去开会，刚好夏普的社长佐伯旭也参加了那场会议。会后山内溥立刻找佐伯旭聊起了横井军平的想法。</p><p style="margin-left: 0px;">一周后，山内溥叫横井军平来办公室聊聊，办公室里还坐着一位夏普的高管。</p><p style="margin-left: 0px;">山内溥：“你上次说想做一款可以随身携带的掌上游戏机，夏普是这方面的专家，你们聊聊”。</p><p style="margin-left: 0px;">横井军平跟夏普高管聊了一下具体想法，夏普高管听完内心狂喜，这家伙能帮我们清库存啊～</p><p style="margin-left: 0px;">60年代出现了电子计算器，当时做电子计算器有“四大家族”，卡西欧、夏普、惠普、德州仪器。到了70年代卡西欧和夏普打得最凶。1973年夏普推出了全球首款使用CMOS-LSI的计算器——SHARP EL-805。简单来说就是全球第一台手持式液晶显示计算器，显示器用的是液晶显示屏(LCD)的电路是玻璃。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/5027233c532ddde13a3ea0a991016bb1.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">由于跟卡西欧打得太猛，导致生产了过多的半导体和液晶显示器，库存压力极大。现在任天堂主动找上门帮忙消化这些库存，那可比当废铁卖掉好太多了。对于任天堂来说能拿到价格低廉的零件，夏普又能“变废为宝”，双赢！当时一心想赚钱的任天堂和急于清库存的夏普并不知道，他们这次合作即将改变世界。</p><p style="margin-left: 0px;">横井军平带着得力助手冈田智（下图左边那位）一起研究如何实现这台掌机。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/9755244ae58ed91dfa22b05356d7f995.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">研发的过程挺有趣的。横井军平和冈田智首先将自己对游戏的想法在模板上雕刻出来，那块模板就模拟屏幕，图案则为发光区，他们把发光部分挖空，然后在模板后面装上灯，灯一亮看上去就有点像屏幕局部区域发光了。最后把这些灯接到控制器上，控制器连接电脑，就能用电脑控制每一盏灯什么时候亮什么时候关。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/8dad4f8b0445270567faa36f8dd78265.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">这种做法看似简陋，但在当时确是实现最小可行demo的最快方法。他们设计的第一款游戏叫《Ball》，一个抛球游戏。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/c04cafaea73e751036f26686cf00cbda.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">画面里有一个小人，玩家需要看准时机按左右两边的按键接球。其实Game&amp;Watch的技术非常简单，玩过计算器的朋友都知道计算器屏幕能显示的内容是有限的，简单来说就是提前写死了一些内容在屏幕里，要显示什么内容就通过背后的“电脑”控制。Game&amp;Watch也用了同样的工作原理，提前写死了一些图案在LCD屏幕上，通过程序让固定图形闪烁从而营造出图形在移动的错觉。</p><p style="margin-left: 0px;">有山内溥的大力支持，加上夏普的积极主动，横井军平的工作相当顺利。一款名为Game&amp;Watch的掌上游戏机很快就在日本流行起来。</p><p><strong>枯萎技术落地开花，Game&amp;Watch百花齐放</strong></p><p style="margin-left: 0px;">1980年4月28日，引爆掌机市场的游戏机横空出世——Game&amp;Watch。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/529ac5bbdde526e2d8d71bdc4be9c472.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">第一款Game&amp;Watch叫《Ball》，中文名叫《抛接球》，型号AC-01。屏幕的展示效果和我们今天看到的计算器屏幕差不多。游戏是跟游戏机绑定的。机身正面有几个按键，左右两个红色按键用来控制小人作用移动，屏幕下方的“GAME A”和“GAME B”是两种不同的游戏难度。按下“TIME”键可以展示时间。</p><p style="margin-left: 0px;">后来为了纪念第一款Game&amp;Watch，老任改改包装当礼品兑换。下图右边那个是任天堂俱乐部兑换的礼品。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/8a5e0f60f819535b7aa7d7c0f5eed00d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">别小看这种简单游戏，即使放在今天也有点上头。</p><p style="margin-left: 0px;">我在网上找到有人用网页复刻了这款游戏，有兴趣的朋友可以打开玩玩👉 <a href="https://itizso.itch.io/nintendo-ball">https://itizso.itch.io/nintendo-ball</a></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/8842a60466bf81fd3f689a191f93dfd9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">这款Game&amp;Watch售价5800日元，售价是当时阉割版的Color TV-Game 6的一半多一点，虽然只有1款游戏，但胜在便携，随时随地都能玩。一出道就巅峰，一亮相就炸场！据说第一款就卖出300万套。山内溥见状，必须乘胜追击啊。要求横井军平加码，搞多几款游戏出来。</p><p style="margin-left: 0px;">在《Ball》发行不到2个月，第二款Game&amp;Watch出来了。同年6月5日，任天堂推出《FLAGMAN》，中文名叫《打旗语》，售价同样是5800日元。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/57309ccc66f70bf0695881f982c8a2f0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">外形上与第一代略有不同，边框变成橙色，按键也因游戏玩法增加了2枚。A玩法是按照小人给出的数字点击对应的数字键；B玩法是看到屏幕左侧展示的数字点击对应的数字按键，从而控制小人举起对应的数字旗帜。</p><p style="margin-left: 0px;">网页复刻版👉 <a href="https://itizso.itch.io/nintendo-flagman">https://itizso.itch.io/nintendo-flagman</a></p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/7cee2091bf4815f87feac0c8642703c2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">但这款游戏机的核心玩法并不是那么有趣，当时人气并不高。</p><p style="margin-left: 0px;">不过问题也不大，横井军平可是动手能力极强的小天才，同年又陆续推出了好几款Game&amp;Watch。</p><p style="margin-left: 0px;">1980年7月10日推出的《VERMIN》，售价5800日元。游戏玩法就是打地鼠。长下图这个样子。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/bcb3c9896e25218812b3131ac7e1a0a3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">1980年7月31日推出了《FIRE》，同样是5800元。游戏玩法是避难者从火灾大楼跳下来，玩家要掌握好时机在楼下接住避难者。这款掌机也卖得不错，一共卖出90万台。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/dfda4956bf6ad9ec742d2b164615d621.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">1980年10月4日推出《JUDGE》，同样卖5800日元，但这款是首款可以双人对战的Game&amp;Watch。根据屏幕展示的2组数字的大小决定是使用攻击还是防御，有趣性非常大。当然也可以单人游玩，单人游玩的情况下就是和电脑对战了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/2bbf713f5969b65c16881abbe4bdacda.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">这款掌机有2种配色，前期是绿色，后期改成紫色。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/788a1e36a55bed1a166b0117ba89951c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">刚出半年就带出5款游戏机，横井军平的创作力堪称恐怖。</p><p style="margin-left: 0px;">其他厂商看到Game&amp;Watch卖得这么火也纷纷效仿，市面冒出很多“山寨款”。不过问题不大，横井军平有点是手段和力气。不对，是创新的智慧。1980年推出的5款是银色系（Silver），面板是银色的。1981年加大力度推出了金色系列（Gold）和宽屏系列（Wide Screen）。</p><p style="margin-left: 0px;">金色系列将显示器换成彩色液晶，机身后面还新增了支架。机能也有所升级。在游戏功能上还增加了积分值，可以用积分抵消失误的机制。</p><p style="margin-left: 0px;">在1981年一共出了3款。其中卖得最好的这款是《MANHOLE》，中文叫《人孔》，大概就是沙井盖的意思。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/69de3677b9574ca63191ef72ffd9e4f4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">这款游戏在当时挺有意思的。玩家需要通过按钮控制哪个地方要填补山井盖，避免在路上行走的人掉下去。随着得分升高，行人的数量也会越多，行走速度也更快。达到一定积分可以“奖命”，用来抵消失误操作。这款金色销冠火到什么程度？据说当时连程序出现BUG也能上热搜。</p><p style="margin-left: 0px;">除了《MANHOLE》外，金色系列还有《HELMET》（安全帽）和《LION》（狮子）。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/8007833988aed2ee2c48c371547daa68.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">金色系列除了游戏功能外，还增加了角色报时功能。2025年发售的Alarmo难道是致敬了祖先🤔？</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/2edd3271dd06622dce9528135a01f22b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">上图是Alarmo。</p><p style="margin-left: 0px;">Game&amp;Watch设计初衷是给上班族打发时间的。没想到，相比起成年人，小孩子更喜欢Game&amp;Watch。为了满足小孩需求，设计出宽屏系列，同时还谈下了大力水手、米老鼠和史路比的版权。从1981年到1982年宽屏系列陆续出了十款掌机。</p><p style="margin-left: 0px;">下图是《POPEYE》，中文叫《大力水手》，1981年推出，售价6000日元。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/9b25e7c540da0fc4f5081bdef8add092.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">下图是米老鼠款《MICKEY MOUSE》，1981年发售，售价也是6000日元。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/d5f965dcdd0f59e6766b2e2f84261a75.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">下图是史努比款《SNOOPY TENNIS》，1982年发售，6000日元。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/1daadfddb0d7940a402e76cec81a5a1b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">其他宽屏系列的掌机我就不罗列了，有兴趣的朋友可以去维基百科看看：<a href="https://zh.wikipedia.org/wiki/Game_%26_Watch">https://zh.wikipedia.org/wiki/Game_%26_Watch</a></p><p style="margin-left: 0px;">Game&amp;Watch除了让横井军平再次封神之外（上一次封神作是“超级怪手”），还有一个设计也让横井军平做了一次爸爸，那就是十字键。</p><p style="margin-left: 0px;">1982年Game&amp;Watch推出了双屏版，，把当时街机神作《森喜刚》（也有叫《大金刚》）移植到Game&amp;Watch上。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/5ed25b1f923b8402d3a72d29c12c4080.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">虽然相比起街机在游戏性上做了很多减法，但架不住这个IP在当时实在是太火了，1982年6月3日发售，售价6000日元。光在日本就卖出了120万台，全球估算700至800万台。</p><p style="margin-left: 0px;">仔细看看这台机左下角的按键，就是横井军平设计出来的十字键。当时街机用的是摇杆，可摇杆放不进可折叠的双屏设备里。有什么办法可以代替摇杆的同时又能让用户操作得顺手一点呢？就是十字键。</p><p style="margin-left: 0px;">因此横井军平也被称为十字键之父。任天堂也很聪明，立刻给这个设计注册了专利，这一专利到2005年才过期。在这期间友商的产品都不敢随便出现十字键，为了规避老任的专利，大家都设计成圆形按键。</p><p style="margin-left: 0px;">我手上的这把Xbox手柄也是这种圆形的设计。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/799b057be1270ae95eea6f5377f6f8fb.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">双屏版Game&amp;Watch推出过多款游戏，这个设计也是一代经典了。</p><p style="margin-left: 0px;">后面还陆续推出过新宽屏系列、彩屏桌面系列、全景屏系列、超彩系列，以及微型 VS. 系统，但销量一般般。</p><p style="margin-left: 0px;">其中彩屏桌面系列我觉得挺好看的，放在家里也是一件不错的摆件。这系列当时的售价是7800日元，在Game&amp;Watch里是最贵的一作。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/43b4a5edf2d92bb29c7419351c4dcfac.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">微型 VS. 系统是日本国内最后的Game&amp;Watch机型，长这样子。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/92ccd31746e20e5703100a7befccf46a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">可收纳的控制器，带支架的机身，可以双人对战，这些都是很有创意的设计。而且售价才6000日元。</p><p style="margin-left: 0px;">Game&amp;Watch发展期间，家用机和街机也在同时发展，在《任天堂物语》接下来的故事会陆续讲到。</p><p><strong>枯萎技术的水平思考</strong></p><p style="margin-left: 0px;">Game&amp;Watch虽然在体积和售价上都比不上家用机，更比不上街机。但别小看这小东西，在它的生命周期里一共推出了41款不同的游戏，在日本销量高达1287万台，全球累计4340万台。这销量放在今天的主机排行里算不上名列前茅，但对于当时的任天堂来说确实非常重要。</p><p style="margin-left: 0px;">之前山内溥花式作死，涉足过食品行业、出租车、情趣酒店，搞光枪射击场却碰上石油危机，欠下一屁股债，差点连内裤都赔出去了。</p><p style="margin-left: 0px;">Game&amp;Watch力挽狂澜，除了帮任天堂还清70亿日元的负债，还给公司储备出近40亿日元。</p><p style="margin-left: 0px;">Game&amp;Watch的影响力还不止于此，当时和夏普在计算器领域打得不可开交的卡西欧都被任天堂带偏了。卡西欧也搞起了掌机，可惜这家公司对游戏并没有太强的天赋，卡西欧的游戏机销量并不好。</p><p style="margin-left: 0px;">横井军平设计的Game&amp;Watch让老任起死回生，给他封个神一点都不过分。翻开横井军平的日记可以看到，要不是那天我坐了新干线，要不是那天我发现有人在玩计算器，要不是那天司机病了，要不是我会开左舵车，要不是我多提一嘴，要不是社长那天见到夏普社长，要不是夏普和卡西欧打得你死我活，要不是……</p><p style="margin-left: 0px;">世界就是这么神奇，当多个“要不是”组合在一起的时候，奇迹就发生了～</p><p style="margin-left: 0px;">回看Game&amp;Watch这款掌机，全身上下都散发着横井军平的“枯萎技术的水平思考”。</p><p style="margin-left: 0px;">所谓“枯萎技术”，指的就是那些已经不算新、也没什么高大上光环的旧技术。就像是被放在角落里的“二手零件”或者“退潮后的沙滩小螃蟹”，看起来没什么用，也没人想争着用。</p><p style="margin-left: 0px;">而“水平思考”就是说，别总想着技术往高处走（比如更快的芯片、更强的显卡），而是横着看看，把这些“旧家伙”换个思路用在别的地方。</p><p style="margin-left: 0px;">横井军平要是生在我们这个年代应该有个特别的称号吧，垃圾佬！</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/6950d736fc21eb305ecd40ec07a0096d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">在Game&amp;Watch出现后，枯萎技术的水平思更是一直贯穿着任天堂之后的大部分产品。当然也有人会吐槽，这成了老任在今天仍在坚持生产“落后设备”的理由。想想Switch2发布的前两年，网上一直流传着“初代Switch连华强北都找不到如此落后的零件”的梗。</p><p style="margin-left: 0px;">不过任天堂这家公司非常复杂，我觉得不能用单一维度去评判它的产品。枯萎技术的水平思考在很大程度上对任天堂发挥着真香作用，当然也出现过过度依赖该理论而扑街的情况，这是后话了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/12/926d1f1dbef4b58858c7c30fd17cbb36.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">任天堂的掌机之路是横井军平走出来的，接下来能打败Game&amp;Watch的掌机还是横井军平设计出来，当然这也是后话～</p><hr /><p style="margin-left: 0px;">以上就是本文的全部内容了，想知道任天堂后续的发展，欢迎关注👉<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA5MDc1ODI2NA==&amp;action=getalbum&amp;album_id=3974696752371646468&amp;scene=21#wechat_redirect">《任天堂物语》</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102377</id>
            <title>AI学习模式：让ChatGPT当导师，究竟是「邪修」破局还是暗藏陷阱？</title>
            <link>https://sspai.com/post/102377</link>
            <guid isPermaLink="false">https://sspai.com/post/102377</guid>
            <pubDate></pubDate>
            <updated>Fri, 12 Sep 2025 06:09:24 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <blockquote><ol><li>没有条件的自学者很适合引入 AI 作为交流替代品；AI 的加入会使得曾经的崎岖蜀道变为坦途，为我们每个人都带来更多的可能性；</li><li>仍然要保持一定传统的学习方式以及阅读专著的习惯，不要把学习全权托付给 AI；AI study 绝不是一条邪修捷径；</li><li>AI study 并不能克服一切困难；如果有需要，务必为自己的学习寻求制度性的支持（读一个相关的学位、寻求专业辅导等）。</li></ol></blockquote><p>不知你可否注意到，在一个不起眼的时间点，AI 界三巨头 ChatGPT、Gemini 和 Claude 都推出了自己的「学习模式」。在这个模式下，AI 将不再和之前一样只负责提供问题的答案，而是会尝试通过对话引导你一步一步地分析问题，最终靠自己的力量解决问题。这是 ChatGPT 对学习模式的介绍：</p><figure class="image ss-img-wrapper"><img alt="image.png" src="https://cdnfile.sspai.com/2025/09/08/article/9846445353575be6815441df544a03cf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>我试用了一下 ChatGPT 的学习模式，发现开启这个模式之后， ChatGPT 确实会把自己放在一个「提问者」的位置来和用户对话。比方说我和它说我想了解一下「社会建构主义」的理论，它没有像百科一样给我铺设一大堆<strong>难以理解的名词</strong>，而是向我提了一个问题：</p><figure class="image ss-img-wrapper"><img alt="image.png" src="https://cdnfile.sspai.com/2025/09/08/article/c88072bd443c06bc76bc9d35b33fc81a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这就是<strong>学习模式</strong>（study mode）。它秉持了苏格拉底著名的「助产术」思路，通过提问而非回答来激发用户的思考。虽然它的实现机制并不复杂，但是这可以称得上是一个小而美的产品创新。</p><p>而且它推出的时间点也颇为巧妙。就在我意识到「通过和 AI 对话来学习」也许可以做出一个好的产品，并且为此建立了一个项目的时候，我发现了三巨头已经推出了这一功能。这一瞬间我体会到了那种作为一个科研人员十分熟悉的无奈感……</p><p>那么话说回来：作为一种有别于我们熟悉的授课教育的学习方式，AI study 到底怎么样？它究竟是拓宽我们认知边界的先行者，还是一种更加温和却也更加窒息的新型信息茧房？</p><p>在这篇文章里，我作为一个大语言模型领域的研究者，将基于一些认知科学和心理学的观点来聊一聊这些问题。</p><h2>第一个问题：我们当下是如何学习的？</h2><p>要讨论 AI 如何介入我们的学习，那首先得关心一个热度并不高的话题：我们目前是如何学习的？</p><p>从我执笔学习话题的这段时间里从评论区收集的反馈来看，相当多的人仍然把学习看作一个「把大象装进冰箱」的过程。每天都有大批的人在抱怨「知识它就是不进脑子」。这个看法其实已经是数百年前流行的观点了，现在让我们来更新一下认知：<strong>知识不是被「塞」进脑子里的，它是被人脑主动建构出来的</strong>。目前并没有任何证据表明人脑里面有像是硬盘一样的存储阵列。比起存储器，我们的大脑更像是 ChatGPT：「记忆」可能只是幻觉，一切内容都是临时「编造」出来的，哪怕是回忆。</p><p>这一理论可以解释为什么丢失一部分脑组织的病人并没有丢失一块记忆，反而是性格发生了改变。</p><figure class="image ss-img-wrapper"><img alt="image.png" src="https://cdnfile.sspai.com/2025/09/08/article/f68cfb68576342fe5d3bcbd238988be9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Phineas Gage是一名爆破工，有一天他被一根飞起的铁棍击穿了头颅，失去了相当多的脑组织（图源自维基百科）</figcaption></figure><p>「建构」体现的是一个如同搭积木一样的、主动的过程。具体来说，<strong>学习本质上是在尝试用已知的概念解释未知事物，解释完毕之后，未知的东西也就被理解了，新的知识就诞生了</strong>。比方说同样是观察到了天上星辰的运动，具有不同认知的人就会做出不同的解释：</p><ol><li>《周易》：中国古人记载了丰富的历史，对个人、国家命运变化的无常有深刻体会，于是将历史发展和星辰运动联系起来，提出一套「天人感应」的理论解释天体运动和吉凶变化；</li><li>牛顿：广泛阅读了前人的材料，在哥白尼日心说、伽利略运动理论以及开普勒对行星运动的研究的基础上，提出「万有引力」解释天体的运动。</li></ol><p>这一观点源自于皮亚杰等人提出的<strong>建构主义</strong>，我曾在<a href="https://sspai.com/post/101574">超越信息收集：从认知科学角度看笔记 - 少数派</a>一文中介绍过。当时我用这个理论解释为什么要记笔记以及为什么我认为网状笔记是一种很好的笔记形式。但是这其实只是建构主义的一半，另一半讨论的是另一个疑问：建构出来的知识，它一定靠谱吗？</p><p>答案显然是否定的。就如上面的例子一样，由于不同的人认知不同，看问题的角度不同，思考的方式也不同，对于同样的未知事物我们会给出五花八门的解释。然而真理却只有一个。所以对于这些存在问题的解释来说，它们终有一天会碰到那个不服从它、反而将其推翻的案例：</p><ol><li>毕达哥拉斯学派坚信宇宙的本质可以用整数和分数表达，直到他们有一天发现了无理数；</li><li>中世纪基督徒曾坚信世间发生的一切都是上帝的意志，直到他们亲眼看到守卫圣地的基督徒被杀、圣城被异教徒占领；</li><li>……</li></ol><p>解释被现实打脸虽然很丢人，但是却增长了我们的见识，让我们得以在旧的知识的废墟上建立一套新的、能够理解更多反例的解释。这就是<strong>认识水平的辩证提升</strong>。就这么一破一立之后，我们的认知向上发展了。我相信每个学习过辩证法的读者都多少听过这样一套说法。只不过黑格尔、马克思等人将之用来解释社会总体认识水平的发展过程，而皮亚杰指出，这一发展过程同样适用于解释个人认识水平的发展。人的学习过程总结起来就是一句话：<strong>知识并非只是信息，而是在个体的认知模型在与环境不断冲突中辩证产生的解释</strong>。</p><p>到此，我们似乎仍然无法回答一开始的问题：AI 如何介入我们的学习。这是因为建构主义的理论仍然有问题，我们需要更加全面的解释来帮助我们思考这一问题。</p><h2>社会建构：不是一个人，而是一群人</h2><p>就像刚才那个例子里一样，建构主义的理论本身也是一种建构出来的解释，它也遇到了那个命中注定要来挑战它的反例：<s>从未谈过恋爱的人，能指导他人的感情问题</s>；学会了乘法运算的小朋友可能从没有亲自去数过数、验证过九九乘法表的结论。也就是说，<strong>人的很多知识并非都是自己建构出来的，而是直接获取了他人的知识</strong>。</p><p>苏联心理学家维果茨基（Lev Vygotsky）提出了对皮亚杰理论的质疑。在提出质疑之后，他又基于皮亚杰的理论建构出了一套新的、解释力更强的认知科学理论：社会建构主义。他认为，皮亚杰的错误在于只考虑人类从和物理环境的交互中获得知识，没有考虑人与人之间还可以通过交流分享彼此的知识。维果茨基指出，知识并非仅仅源于个体认知模型与物理世界的直接碰撞，更源于<strong>个体与社会中「更成熟的他人」（父母、老师、同伴）的互动</strong>。拥有不同背景的人聚集在一起交流的时候，他们彼此的见识被互相分享，他们各自的知识被汇集起来发生冲突然后又重建。最终结果是所有人的认知水平都获得了提升。</p><figure class="image ss-img-wrapper"><img alt="image.png" src="https://cdnfile.sspai.com/2025/09/08/article/e42b4a2e3fca78095930211be772bdc8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><blockquote><p>希望我的评论区也可以是这样一个地方。</p></blockquote><p>正是这一理论，让父母们如此重视言传身教以及为子女创造好的环境；让当代成功学如此强调「向上社交」。此外这也可以解释为什么学术圈如此重视交流：几乎每个实验室都定期召开组会分享各自的见解，全世界每年都要耗费大量资源办成千上万场学术会议。从社会建构的角度可以看出：<strong>和一个人埋头苦干相比，通过交流获得知识的效率简直如同降维打击</strong>。尤其是当互联网普及之后，交流的物理成本似乎低到忽略不计。我们真正迎来了知识大爆发的时代。</p><p>但是……真的就这么简单吗？如果只是这样的话，我们的结论就是「AI 是一个比真人更温和、更理性、更好的交流对象，所以推荐大家都去试试 AI study」，本文将沦为一篇七弯八拐、最后回到原点的废话。而我希望得到更有价值的洞见，因此我们有必要继续深入下去。我们深入下去的突破点就在这里：<strong>为什么你会觉得「AI 是一个比真人更『好』的交流对象」</strong>？</p><p>我们注意到一个问题：我们之前的说法只考虑了交流带来的益处，忽略了交流本身的成本以及可能出现的问题。而要理解人之间的交流的话，<strong>语言</strong>作为交流的主要载体是绕不过去的。</p><h3>语言与符号</h3><p>如果没有一定的社科素养，人会很难理解为什么社科经常揪着语言问题不放。虽然互联网上四处都是因为被外语考试拷打而心怀怨怼的人，虽然能使用多种自然语言仍然是精英气质的象征之一，但是我们必须承认：在近些年翻译 AI 尤其是大语言模型的加持下，自然语言造成交流障碍几乎已经被推倒了。但是<strong>翻译 AI 能破开的是语言符号的藩篱，而真正的障碍是语言符号所表示的思想</strong>。</p><p>我们交流的目的是将自己的思想传递给对方，而由于人脑目前似乎不支持插线直接传播脑电信号，因此我们还是要借助语言符号表示它们，然后将语言符号传递给对方。交流的过程是这样的：</p><ol><li>你发现屋子里有蟑螂，你想告诉你室友；</li><li>于是你将这一想法编码为了某种自然语言，比如「屋子里有蟑螂」，或者「There is a cockroach in our room」，亦或是「🏠🪳」；在这里你用到了「屋子」、「里面」、「蟑螂」、「🪳」等语言符号；</li><li>将编码通过嗓子或者发消息的方式传递给室友；</li><li>室友试图理解这一语言符号背后的含义</li><li>ta 明白了屋子里有蟑螂这一事实。</li></ol><p>我们总以为交流的障碍仅仅发生在 4，于是发明了翻译器来实现语言符号之间的转换。可是现实中，真正的问题往往是：室友从来没见过蟑螂，对蟑螂完全没有概念。任凭你用什么翻译器也无济于事。</p><p>出现这样的问题其根本原因是<strong>你们成长与完全不同的环境，你们之间并没有足够多的「共识」可以帮助你们完成交流</strong>。缺乏与某人交流所必需的那些「共识」不是翻译器能解决的；<strong>要补足这些共识，唯一的方法就是加入同样的环境，去获得对它们的认知</strong>。换句话说，就是亲自去见见那只蟑螂。</p><p>只可惜有许多高门槛的圈子，在这些圈子中说话所需要了解的东西不像蟑螂那样好找：</p><ol><li>你听说人工智能是当前的风口行业，你想学习人工智能，但是你发现他们都在聊着「不收敛」、「CUDA out of memory」、「训练集里面有脏东西」这样的话，没有计算集群可以用的你即使看了解释也难以理解；</li><li>你想学习人文社科，但是你发现他们都在聊着「超验能指」、「符号化」、「惯习」这样的话，没有系统学习过的你即使申请了「中译中」也难以理解；</li><li>再次失败后，你觉得学医也不错，然后你发现医考帮上面的人在说着「提裤子」、「打隧道」、「蛋壳术」、「钓鱼」，你觉得医生的生活真是丰富，只是这些词不论在网上怎么搜都只能搜到常见的意思，你的学医之路失败了；</li><li>经历了多次失败，你黑化了，于是决定加入黑道赚黑钱；有一天你们偷了一家人的东西，老大叫你负责「洗锅」，你很疑惑，但是还是把那家的锅碗瓢盆都洗干净了；然后警察找到了现场的指纹将你们通通抓获；到了审讯室，警察问你要不要「点水」，说能减刑，你愤怒地说你又不是蜻蜓怎么点水；最后你的刑期是所有人里面最重的；</li><li>……</li></ol><p>从这些案例我们可以知道，每个圈子都会有一组用于成员之间交流的「共识」，其中某些只为本圈子所有的共识只能用外人看来叫做「黑话」的符号表达，这使得你即使看到也不能理解，因而无法加入其中交流。而要加入其中的唯一办法就是有一个圈内人充当你的导师，为你解答困惑、提供实践机会。我们可以把一个圈子的共识成为一个「符号系统」，如你所见，符号系统是具有<strong>排外性</strong>的。<strong>如果你没有进入圈子的机会，那么你将被符号系统拒斥，你的认知水平和圈内人相比会越差越大</strong>。这就是为什么在义务教育出现之前，「学徒制」和学术圈的「导师制」是最常见的教育形式。师父在这里意义不仅仅是老师，更是这一邀请制符号系统的「介绍人」。</p><p>如果读到这里，那么恭喜你，现在可以松口气了。了解了这些我们就可以来谈谈 AI 入局究竟意味着什么了。</p><h2>AI 以身入局</h2><p>回到刚才那个问题：为什么你会觉得「AI 是一个比真人更『好』的交流对象」？现在我们可以作出回答了。</p><p>你出狱之后对于自己在人工智能学习路上遇到的障碍耿耿于怀，于是你抓住了一个因为刚上了 12 小时班、注意力涣散而落到你手上的人工智能工程师，逼迫他告诉你到底什么是「不收敛」、「CUDA out of memory」以及「训练集里面有脏东西」。靠这种方法，你获得了一个不太情愿的「介绍人」。此时会发生：</p><ol><li>他试图给你解释什么是「不收敛」，然后他发现解释这个首先需要解释什么是「模型」、「训练」、「损失」，然后解释这些又需要先解释什么是「神经网络」、「前向传播」、「反向传播」、「参数优化」……<strong>他没有那么多耐心和时间</strong>；</li><li>当他聊到「梯度下降可以寻找到好的解」的时候，你问他为什么，然后他也懵了，因为这是他的数学直觉的一部分，理论证明他也忘了，<strong>他没法给你解释</strong>；</li><li>在一通似懂非懂的讲解之后，他说现在你已经学会了，快去训练一个 12B 规模的语言模型出来看看吧！然后你又发现了那个亘古不变的问题：你没有计算集群供你使用，<strong>没有实践机会有些东西就是学不会</strong>；</li><li>你发现了这一无法解决的客观困难，你体谅了一下他，放他走了；他在暗喜<strong>还好没有把真正的核心竞争力教给你，否则这行那么卷，又要多一个竞争对手</strong>。</li></ol><p>如此一对比，AI 以身入局、参与到社群交流中的优势就凸显出来了：</p><ol><li><strong>AI 几乎通晓所有领域</strong>，虽然可能不深入，但它几乎通晓所有圈子使用的符号语言；你不需要去试图绑架某个人来带你入门；</li><li><strong>AI 有无限的耐心</strong>，可以给你解释各种黑话，直到解释到你能理解的程度为止；</li><li><strong>AI 没有自己的利益</strong>，它也许会继承一些偏见，但绝不会出于某种私利的目的阻挠你。</li></ol><p>在这个层面，我们完全可以说<strong>生成式 AI 是继互联网普及之后又一大信息平权的进步</strong>。</p><p>然而只有第 3 点 AI 也帮不了你。考虑到实践机会一直以来都和社会身份、资源高度绑定，是社会高层最垄断的、最重要的宝物。因此 <strong>AI 介入教育可以一定程度上打破圈层的垄断，但是也就仅限于此了</strong>。真正在实践机会上起到反垄断作用的仍然是社会制度（义务教育、高考、高等教育），单一科技进步难以做到这一点。</p><p>AI 介入教育的优点我就说到这里。接下来，我将基于我对人工智能的专业理解来谈谈 AI 介入教育尤其是垄断信息来源后可能会产生的问题。</p><h2>是破局者还是信息茧房？</h2><p>我想我完全不需要去劝大家多和 AI 聊天。如今的 AI 被训练得非常好，它总是对你展现无限的包容和耐心，它渊博的知识让它能够接下你的几乎一切话题，让你感到被理解，帮你解决麻烦；它从不反驳你，从不像人类一样闹情绪，也从不把任何期待压在你头上。这种程度的宠溺哪怕是父母对孩子也难以做到。不难想象 AI 一经推出就广受欢迎，ChatGPT 、DeepSeek 一夜之间成了成千上万人的虚拟恋人、朋友、导师、甚至是心理医生。</p><p>总的来说，我们身处一个相当压抑和孤独的时代。如此程度的宠溺，必然导致有人深陷其中，很难不出问题。典型的问题我觉得可以归纳为两点：</p><ol><li>无条件顺从：习惯于 AI 无条件顺从且毫无压力的交流方式之后，不再能同其他人类正常交流，失去处理和同类的冲突以及挑战难题的能力；</li><li>封闭性：由于 AI 并不主动讲话，只依据你的要求给出回应，将 AI 当做唯一信息来源将会失去获取全新概念、了解全新领域的机会。</li></ol><p>AI 总是无条件顺从用户这一特点不需要我说明，每个人都能体会到。但是这一让用户欲罢不能的特点如今其实已经成了一个问题。无底线的包容以及罔顾事实的赞美会让用户对现实情况产生误判，并且越来越抵触回到真实的人际关系里面。一个很典型的案例是近期一个澳洲女孩自杀的事件：由于 ChatGPT 是比大多数人都要更好的倾听者，她习惯于和 ChatGPT 倾吐负面情绪，这导致她的负面情绪逐渐被 ChatGPT 垄断；最终，她在周围人毫无察觉的情况下结束了自己的生命。</p><figure class="image ss-img-wrapper image_resized" style="width: 660px;"><img alt="image.png" src="https://cdnfile.sspai.com/2025/09/08/article/48bc175c0f6965948ab6289f92dfe95a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>图源自纽约时报中文网</figcaption></figure><figure class="image ss-img-wrapper"><img alt="image.png" src="https://cdnfile.sspai.com/2025/09/08/article/4c8903f1b212cc91a6cc5d5333d83e46.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>图源自纽约时报中文网的评论</figcaption></figure><p>因此，在介绍 GPT-5 的文章之中，OpenAI 骄傲地宣布 GPT-5 相比前代大大减少了「阿谀奉承」的现象。OpenAI 认为，无底线的顺从虽然可以提升用户满意度，但是会扼杀真正富有思考性的聊天。</p><figure class="image ss-img-wrapper"><img alt="image.png" src="https://cdnfile.sspai.com/2025/09/08/article/f7295000c3b1cc5620d7794f68f4e1a2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>图源自OpenAI官网</figcaption></figure><p>在我看来，造成 AI 如此特点的原因是人们对和谐社会的追求以及对人与人之间冲突的抗拒。在现实中，我们都把「好辩」看作一个缺点，厌恶人与人之间无尽的争斗。这种社会心理深刻影响了互联网上的言论，让 AI 无意识天然倾向于奉承而非求真；而在后续的对齐训练中，人类标注员也更倾向于将包含异见的回复打上「无礼」的标注。这造成了 AI 习惯于阿谀奉承（sycophancy）的特点。</p><p>这样的现实因素不仅影响了从 AI 身上寻求情感支持的用户，也影响了试图通过 AI 来加强学习的用户。<strong>在 AI study 模式中，我们希望 AI 能充当老师的角色来对我们做一定的评判，而这样的特性会使得 AI 肯定我们的动力远远高于否定我们</strong>。这会导致我们的认知产生一定偏差；此外，<strong>由于 AI 在训练的时候被要求「获得用户肯定的反应」，因此它必然倾向于降低内容的深度，以帮助用户更快达到「我学会了！」的状态</strong>。这会导致我们的学习无法深入。</p><p>以我试图让 AI 教会我建构主义理论的聊天为例。ChatGPT 首先向我提问来建立引导：</p><figure class="image ss-img-wrapper"><img alt="image.png" src="https://cdnfile.sspai.com/2025/09/08/article/0b362311a4c7ed28d13be7f5fdb31a8a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><br />这个引导手段很有趣，很适合作为一场深入浅出的教学的开头。于是我回答了它的问题：</p><figure class="image ss-img-wrapper"><img alt="image.png" src="https://cdnfile.sspai.com/2025/09/08/article/3173de5f4e285964e5a5618884dd853c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>ChatGPT 用这个引子引出了社会建构主义的核心观点，然后它又提了一个问题来让我加深理解。现在让我回答一下这个问题：</p><figure class="image ss-img-wrapper"><img alt="image.png" src="https://cdnfile.sspai.com/2025/09/08/article/5c9c5b1db6ffb8d588bbe916fdb5e217.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>ChatGPT 借用这个例子对多种思想流派进行了对比，我们的问答到此就结束了。</p><p>不得不说，ChatGPT 对于教学的把控是非常好的，整个学习流程非常合理，大大降低了学习门槛。更加可贵的是，ChatGPT 完全没有使用任何专业语言来解释概念，而是着手于常见的例子，让没有受过相关的系统教育的让也能抓住精髓。这告诉我们， AI 的诞生确实是信息平权的一次进步。相较之下，维基百科的介绍就难多了，充斥着「认识」、「对现实的共同假设」、「自我概念」等难懂的术语，体现了符号系统的排外性：</p><figure class="image ss-img-wrapper"><img alt="image.png" src="https://cdnfile.sspai.com/2025/09/08/article/951b6c78e37eaf07d6eeef7db118c536.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>图源自维基百科</figcaption></figure><p>但是 ChatGPT 的问题在于：<strong>讲得太浅了</strong>。经过了这一轮学习之后，我对社会建构主义的理解仍然极度粗浅，其深度肯定远远不够我写出这一篇文章。尽管我可以要求 ChatGPT 继续深入下去，它肯定也能完成我的要求。但是<strong>我能提出这个要求前提是我对其已经有一定了解，我必须先意识到当前学习的深度不够，才会要求它深入下去</strong>。如果我是一个对其一无所知的人，那么我大概率就会接受 ChatGPT 的观点和赞美，心满意足地离开。</p><p>「我需要知道我不知道」成为了 AI 帮助我们学习的前提。这样一个有些矛盾的前提引发了 AI study 的另一个问题：封闭性。AI 不把陌生难懂的术语塞给我们，我们就失去了进一步提问的锚点。对于一个有毅力的人来说，如果通过维基百科学习，他虽然一开始会被「认识论」、「自我概念」这样的词汇阻挡，但是通过对这些词背后的词条的学习，他们会深入下去，总有一天会建立完整的知识体系。而 ChatGPT 的回答显然不包含这样的词汇作为锚点。</p><p>因此我们可以得出结论：<strong>AI 作为学习伙伴是非常值得推荐的，可以有效地帮我们打破互联网都无法穿透的信息壁垒；但是让 AI 垄断我们的学习也是非常危险的，请务必保持从外界获取知识的能力</strong>。</p><h2>结语：综合建议</h2><p>讲完了本文的主要部分，至此，这篇文章已经超过了 6000 字。我首先还是要为所有读到这里的读者鼓掌：你们在碎片化的时代里保持了阅读长文的能力，我相信这样的能力会在各种你意识不到的地方给予你回报。</p><p>在这篇文章里，我为了分析 AI study 的特点和优劣，首先研究了在生成式 AI 大规模铺开之前人们普遍的学习模式。我认为人的学习的过程本身是一个聊天一样的交互过程，这种交互可以是和环境展开，也可以是和同类展开，其中后者能够比较快速地提升人的认知。但是和同类的交流是依赖语言的，而语言天然能够形成符号壁垒，这个壁垒是邀请制的，十分拒斥圈外人，这让知识只流通于圈子内部。而 AI 作为几乎所有领域的圈内人，其具有无限的耐心和无私的特性，很适合作为我们进军陌生领域的引路人。我相信生成式 AI 出现之后，自学的前途会远远比之前宽广。</p><p>然而 AI 作为互联网数据训练出来的产物，会继承社会的一些认知偏差。这些偏差导致了 AI 往往具有无条件顺从用户（或称阿谀奉承）的特性。这样的特性会使得 AI 倾向于降低学习难度，甚至混淆黑白，从而造成用户的认知偏差。如果用户单纯依赖 AI 教学，这样的认知偏差将逐渐累积，从而造成不良影响。</p><p>综上，我的建议是：</p><ol><li><strong>没有条件的自学者很适合引入 AI 作为交流替代品；AI 的加入会使得曾经的崎岖蜀道变为坦途，为我们每个人都带来更多的可能性</strong>；</li><li><strong>仍然要保持一定传统的学习方式以及阅读专著的习惯，不要把学习全权托付给 AI；AI study 绝不是一条邪修捷径</strong>；</li><li><strong>AI study 并不能克服一切困难；如果有需要，务必为自己的学习寻求制度性的支持（读一个相关的学位、寻求专业辅导等）</strong>。</li></ol><p>我是西郊次生林，谢谢你的阅读。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/102434</id>
            <title>从零到一的 Dify AI 工作流搭建指南</title>
            <link>https://sspai.com/post/102434</link>
            <guid isPermaLink="false">https://sspai.com/post/102434</guid>
            <pubDate></pubDate>
            <updated>Thu, 11 Sep 2025 06:27:35 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p style="margin-left: 0px;"><strong>Matrix 首页推荐</strong>&nbsp;</p><p style="margin-left: 0px;"><a href="https://sspai.com/matrix">Matrix</a>&nbsp;是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&nbsp;<br />文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><hr /><h2>写在前面</h2><p>对于大多数人来说，AI，特别是大语言模型（LLM），是完全的新鲜事物。它并不像过去的软件、算法，可以轻松在本地运行，也不能轻易地调整代码和参数。而生成式 AI，也不像过去的众多 AI 领域的分类和识别算法，有着固定、可预测的输出，和明确的使用场景和能力边界。</p><p>也许不是所有人都清楚 AI 能做什么，AI 的能力边界在哪儿，但 AI 的快速进步和无限可能，正让越来越多的个人和企业开始寻找将 AI 融入传统流程，甚至替代传统软件方案的机会。</p><p><a href="https://dify.ai/" target="_blank">Dify</a> 是一个知名的 AI 工作流开发平台，官方文档里， Dify 的全称是<strong>「Do it for you」</strong>。和 Coze 这类低代码 AI 工作流开发平台类似，Dify 的大多数功能几乎不需要使用者拥有编程技能。Dify 官方设计好了众多开箱即用的工作流节点，通过插件市场提供丰富的三方生态，是快速上手 AI 工作流搭建的理想平台。</p><p>本文开题至今，Dify 已经从 1.0.0 走到了 1.8.1，即将迈进 2.0.0 (beta) 的里程碑。文章反复修改，最终我决定，还是从零到一，探讨 Dify 应用到工作流程时的基本概念和小技巧。至于 MCP、多模态、甚至是未来即将发布的触发器、知识库编排等，在读者掌握了 Dify 工作流的基本逻辑以后，自然能够轻松掌握。</p><p>在开始本文之前，我想先简单介绍一下，为什么是 AI 工作流，以及，为什么是 Dify。</p><h3>PoC 与「原型」</h3><p>下文所指的所有「AI 产品」，如无特殊说明，默认都指的是使用生成式 AI，特别是使用 LLM 作为亮点和核心解决方案的软件产品。</p><p>我认为，在一个软件产品落地之前，PoC（概念验证）和原型（Prototype）是两个渐进的重要阶段。相比于原型，PoC 阶段通常不会关注用户交互、业务逻辑，而是更像在通过可行性试验，找出某个核心假设的技术可行性或逻辑成立性。</p><p>有人说，一个 AI 模型的成功，需要有三个重要的条件：数据、算力、算法。我认为，一款 AI 应用要想成功，也要具备三个条件：<strong>可用、好用、有人用</strong>。而 PoC 的阶段聚焦的，就是这一切的根基：可用。</p><h3>为什么是 Dify</h3><p>在 Dify 之外，节点 + 连线形态的可视化 AI 工作流产品还有很多选择。上有对于代码和可视化结合更完善、节点自定义程度更高的 n8n，下有无需自己操心模型接入和发布的 Coze<sup class="ss-footnote" href="" title="Dify 的云端版本Dify Cloud也提供和Coze类似的开箱即用服务，相同地，Coze的开源版本 Coze Studio也提供和开源版Dify类似的模型自定义能力。">1</sup>，但我认为，Dify 在强大与易用之前取了一个颇为巧妙的平衡点：<strong>自托管足够简单灵活、工作流设计足够覆盖大多数 PoC 场景</strong>。</p><p>和 Dify 定位类似的，还有 MaxKB、RAGFlow 等产品。但这些产品由于主打「RAG」而非「Workflow」，因此在节点自定义能力、单步调试、复杂工作流编排和插件开发生态等方面，和 Dify 都尚有差距。如果你只是想要实现一个基础的、基于知识库的「一问一答」场景，MaxKB 们可能已经足以满足你的需求。可是，<strong>如果你想要在一个 Workflow 中实现稍复杂的业务流程的自动化处理，那么不妨看看 Dify 和 n8n</strong>。</p><blockquote><p>本文所指「Dify」均为其开源社区版本。作者并未使用过 Dify Cloud 或其自托管企业版本，部分描述和介绍可能存在局限性。</p></blockquote><h2>Dify 从零到一</h2><h3>Workflow 与 Chatflow</h3><p>部署好你的 Dify，新建一个应用，你会看到 Dify 的两大应用类型：<strong>工作流（Workflow）和对话工作流（Chatflow）</strong>。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/article/9c2c228dee0d3289380ca19065f7f58d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Dify 最重要的两种应用类型</figcaption></figure><p><br />Workflow 和 Chatflow 最大的区别在于，前者只能实现「一问一答」的单轮运行，适合用于翻译、总结等只需要一次输入一次输出，或多次调用之间无联系的场景；而 Chatflow 则和 Chatbot 类似，节点具备跨轮次的记忆能力，可以实现连续的、多次的对话，适合用于多轮信息收集、需要上下文保持的对话机器人等场景。</p><p>Chatflow 中可以通过调用 API 或将 Workflow 发布为工具的方式对其他的 Workflow 进行调用，变相实现在 Chatflow 中「嵌套」Workflow。然而，Chatflow 由于其设计特点，是不支持发布为工具的。如果你有这一需求，不妨直接选择创建一个 Workflow。</p><p>除了这两种应用类型，Dify 还有几种默认收起的简单应用类型，Chatbot、Agent 和 Text Generator。它们的功能相较上述二者都更为基础，本文不再单独展开。</p><p>Dify 为 Workflow 和 Chatflow 提供了截然不同的 Web UI 和 API 端点，且两种应用类型之间并不能实现自动转换。因此，在正式开始你的第一趟 Dify 旅途之前，你就需要做好这个决定。</p><h3>开始、连线、结束</h3><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/article/987042d927b6efb241ac9504a2694af0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>在一个工作流中，核心要素就是「节点」和「连线」</figcaption></figure><p><br />在一个工作流中，核心要素就是<strong>「节点」和「连线」</strong>。「节点」是工作流中的最小执行单元，也是工作流中的最小调试单元。「连线」则指示了节点间的执行顺序。在没有 if-else 节点的情况下，一个节点后所有连线的下游节点都会被同时执行，这就是 Dify 提供的节点并行能力。</p><p>节点间的连线是可删除的，你可以通过点击键盘上的退格键删除一条现有的连线；连线内也可插入节点，将鼠标放在一条连线的正中心，点击出现的「+」图标，即可在两个节点之间快捷插入一个新的节点。</p><p>需要注意的是，Dify 并不允许孤立节点。位于工作流编排界面右上角的 Checklist 会时刻提醒你，任何节点的左侧都必须要有连线与它相连。如果你有一个节点不愿意删除但暂时用不到，可以将其连接到一个永远不会被执行的 if-else 分支，并删除这一节点右侧的连线。</p><p>工作流中，必须存在的两个节点是「开始」和「结束」。拿 API 接口来类比，这两个节点定义的就是 API 接口的入参和出参。一个工作流中，只允许一个「开始」节点和一个「结束」节点。因此，如果你在工作流中通过 if-else 或节点并行执行的方式定义了多条执行路径，需要通过「变量聚合」或「模板转换」节点将多条路径的执行汇总为一个变量，再将其传递到结束节点<sup class="ss-footnote" href="" title="或者，你也可以将多条连线同时连接到结束节点，并在结束节点添加多个输出变量。">2</sup>。有关这些功能节点的用法，后文会有详细介绍。</p><p>下文提及的节点的「输出变量」，和「结束」节点的输出参数是不同的概念。一个节点的「输出变量」如果不被其他节点引用，就永远不会起作用。「结束」节点也是一个节点，只有用户在「结束」节点里指定了需要输出的变量，这个变量才会作为工作流的运行结果。</p><p>另外特别提醒初次接触 Dify 的朋友，<strong>Dify 的节点间的连接线只是指定了工作流的执行路径，并不指定变量的传递</strong>。使用连接线连接两个节点后，上一个节点的输出变量并不会自动传递到下游节点，你仍然需要手动在下游节点的输入变量中选择，或在文本内容中插入。</p><h3>参数与变量</h3><p>本文中提及的「参数」和「变量」的概念，实际上是我为了方便理解而定义的。<strong>在 Dify 官方文档中，它们被统称为「变量」</strong>。</p><p><strong>本文中为了方便理解，把来自「开始」节点的或一般来自用户输入的变量，统称为「参数」</strong>。</p><p>「变量」是一个动态的数据容器。每一个节点的输出，都会被包装为一个或多个「变量」，你可以在任何类型符合的场景里引用这个变量，比如下游节点的输入、LLM 节点的 Prompt，甚至是外部工具的调用参数。</p><p>Dify 中的所有变量，都是有类型的。相信拥有 Typescript 开发经验的你一定不会感到陌生。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/article/736c7979e4a9124915aeb791552d1f5c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Dify 中所有的变量都有类型</figcaption></figure><p><br />根据官方文档，Dify 的变量一共支持以下八种数据类型：</p><ul><li>String 字符串</li><li>Number 数值</li><li>Object 对象</li><li>Boolean 布尔值</li><li>Array [string] 字符串数组</li><li>Array [number] 数值数组</li><li>Array [object] 对象数组（包括 Array [file] 文件对象数组）</li><li>Array [boolean] 布尔值数组</li></ul><p>每一个节点接受的输入，都有其严格的类型要求。每一个节点的输出，也有固定的类型规定。</p><p>比如，经常有朋友问我，为什么在变量聚合器节点中，选择一个变量后，就看不到另一个需要选择的变量了。实际上，这正是由于类型不匹配导致的。变量聚合器节点虽然支持聚合任意类型的变量，但相同一个聚合组内，只能聚合一个类型的变量。因此，在选择了第一个要聚合的变量后，后续继续选择，Dify 就只会为你筛选出工作流中类型符合的变量。</p><p>那么，如何构建特定类型的变量呢？最简单的办法是使用「模板转换」节点。这一节点接受任意类型变量的输入，且会强制把所有输入变量转换为 string 类型输出。</p><p>如果你需要构建 string 以外的特定类型的变量，可以使用「代码执行」节点。删除所有输入变量后，直接在函数体中 return 你需要构建的变量，并在输出变量中选择你需要的类型即可。</p><p>Dify 也支持「环境变量」配置。配置好后，和程序中的环境变量类似地，可以在任意需要的地方引入。</p><p>对于 Chatflow，Dify 还提供了「对话变量」。对话变量可在多轮对话中保持，因此可作为跨多轮对话的控制变量或临时存储。比如，在 Chatflow 的末尾放置一个变量赋值节点，给某一个变量对话赋值，在 Chatflow 开头使用 if-else 节点检查该对话变量是否为空，即可判断当前对话是否为第一轮对话。结合多分支不同的赋值和更复杂的 if-else，还可以实现根据上轮对话的不同发展，导向不同的 Chatflow 分支。</p><h3>文件上传与用户输入</h3><p>以 Workflow 为例，用户输入参数包括文本、文件、数字、下拉选单、复选框等。在选择输入参数时，参数选项右侧已经写明了这一参数的类型。相同类型的参数，日后可以互相转换，比如短文本和段落。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/article/1c4f1de8ef91e83026a816f3cbd88488.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Dify 支持多种用户输入参数</figcaption></figure><p><br />这些输入参数也会体现在 Workflow 的 API 接口中。如果你需要使用 API 接入 Workflow，你可以使用 <code>/parameters</code> 接口快速得到一份结构化的入参文档。你可以在 API Access 页面通过 App Key 调用，也可以直接将 Workflow 发布后，在 Web UI 中直接通过 F12 找到这个请求。</p><p>稍显遗憾的是，<code>/parameters</code> 接口目前并没有返回某一参数的「类型」。因此在开发对接逻辑时，需要你对 Dify 的用户输入参数的 type 了熟于心。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/article/b17e959a5b556c5d489d9c69424d63ef.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Dify 的 /parameters 接口</figcaption></figure><p><br />Dify 也支持基础的表单校验能力。选择文件和文件列表时，可以自定义支持的文件后缀名；对于所有输入参数，都可以选择是否必选（Required）。</p><h3>模板转换</h3><p>模板转换节点是 Dify 中一个相当「万金油」的存在。它可以按照指定的逻辑，拼接来自任意节点的任意类型的变量，并通过 Jinja2 进行简单的文本处理。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/article/6940d2511769e77cdf69c6cadff4acde.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Dify 中的模板转换节点</figcaption></figure><p><br />除了其原本的用途「模板转换」外，这里提几个「邪修」用例，希望能帮助你解决问题。</p><p><strong>强制类型转换</strong>。「模板转换」节点的输出变量只有一个 output，且类型为 string。然而，模板转换节点支持任意类型节点的输入。因此，如果你需要把数组、对象等非字符串类型的变量转换为字符串类型，增加一个模板转换节点就是最快的方法。这对于只支持插入 string 类型的场景（如 LLM 节点的 Prompt）相当有用。</p><p><strong>存储可复用的 Prompt</strong>。如果你的 Workflow 中有多个 LLM 节点，它们共享某些提示词片段，你可以使用模板转换节点构建 Workflow 中的临时 Prompt 模板库，以在多个 LLM 节点之间引用。这样做的好处是可以实现「一处修改，处处生效」，不会再因为忘记修改某一节点的提示词而导致排查到天荒地老。</p><h3>代码执行</h3><p>代码执行可能是 Dify Workflow 中最强大的节点。得益于 Dify 的沙盒环境<sup class="ss-footnote" href="" title="经常有朋友报告「代码执行」节点不可用的情况，此时请检查Docker编排中sandbox容器是否运行正常。如果不正常，请参考官方文档进行排查，或者骚扰你身边的运维同学。">3</sup>，代码执行节点可以运行 Python 和 JavaScript 代码。通过在 sandbox 挂载的 volume 中修改 requirements.txt 文件，你还能提前往这个沙盒环境中安装你需要的任何第三方依赖。</p><p>对于 Python 代码执行节点，需要遵循类似 <code>def main(arg1: type, arg2: type) -&gt; dict</code> 的格式。如果你懒得琢磨怎么写代码，不妨求助于 LLM。Dify 本身提供了 Code Generator 功能，点击代码输入框右上角的入口即可使用 LLM 辅助生成代码。如果你更愿意使用外部的 LLM，我也准备了一份提示词。这份提示词和 Dify 系统内预设给 Code Generator 的提示词并不相同，但它在 Claude 模型上的表现更加稳定，大多数情况下可以一次输出可用的代码。</p><p><a href="https://www.ygxz.in/collect/4911/">可用于 Claude 生成代码执行节点所需代码的提示词</a></p><p>代码执行节点同样也有许多「邪修」用法。</p><p>构建用于迭代的数组。迭代器（下文会介绍）的输入变量只能是数组类型，这意味着你不能使用模板转换节点给迭代器提供迭代对象。这时候，你可以直接使用一个代码执行节点，不执行任何实际代码，只让函数返回你想要的数组。这样就能让迭代节点按照你想要的数组进行迭代了。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/article/f020addd1a2bc19ac44ecb9b4ffd8741.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>使用代码执行节点构建用于迭代的数组</figcaption></figure><p><br />发起网络请求调用外部 API。Dify 的 Sandbox 环境是可以开启联网功能的（可能需要手动调整配置），这意味着你可以在工作流中简单地使用任意外部 API，而不用将其封装为插件。不过考虑到代码的可维护性（鉴于代码执行节点没有独立于工作流的版本控制），<strong>对于较为复杂的代码执行逻辑，我还是建议你尝试将其封装为一个插件，并使用 Git 进行代码版本控制</strong>。</p><h3>迭代与循环</h3><p>迭代与循环是 Dify 区别于 MaxKB 这类「重 RAG 轻 Workflow」的产品的一大特色。平心而论，Dify 在迭代与循环的功能设计上不如 n8n 直观和强大，但如果你理解了 Dify 的 Workflow 哲学，相信你一定会喜欢这个功能。</p><p>迭代节点，和 Python 中的迭代概念类似，在一个数组中执行迭代，并为每一次迭代设计相同的逻辑，可以用于合并并行的重复节点。比如上文「代码执行」部分配图的一个五个字符串组成的数组，如果不使用迭代，就需要复制 5 个 LLM 节点并行执行，而使用构建数组 + 迭代的方式，只需要代码执行、迭代两个节点，且更方便维护。</p><p>需要注意的是，迭代中的节点在默认情况下并不会知道自己位于哪一轮迭代，也不会知道当前正在迭代的 item。因此，你需要在迭代节点内部的节点中，显式地通过插入 item 变量，给节点传递当前的迭代内容。</p><p>迭代节点必选输入和输出变量，但默认均为空。输入和输出变量都必须是 Array 类型，迭代时会根据数组中的元素逐个迭代。输出变量虽然必须设置，但如果你不需要，随便设置一个即可。</p><p>迭代节点的另一大特性是每一轮次迭代互相独立，因此可以选择并行执行。并行执行开启后，输出的顺序是每一轮迭代的完成顺序而非输入变量的顺序，因此请特别注意，<strong>不要在对输出顺序敏感的场景里使用并行执行</strong>。</p><p>另外，默认配置下，迭代的最大并行度为 10，单个迭代节点的最大迭代次数为 100。这些配置都可通过 Dify 的环境变量在部署时调整。</p><p>循环节点用于执行依赖前一轮结果的重复任务，直到满足退出条件或达到最大循环次数。和 Python 里的 for 循环类似地，循环节点也可以设置循环变量，循环变量会在每一次循环中继承。</p><h3>并行与条件判断</h3><p>在 Dify 中，一个节点右侧可以拉出多条连接线，连接到多个下游节点，此时，这些下游节点会被同时执行。if-else 节点则可以通过条件判断，拉出若干条执行路径，但一次只会有一条路径被执行。</p><p>请注意，在并行执行时，由于所有并行的路径都肯定会被执行，因此你可以在下游节点直接插入所有并行路径的输出变量。而在使用条件判断时，由于只有一条路径会被执行，如果你在下游节点插入了未被执行的路径的输出变量，会导致节点报错。此时你需要在条件判断的多条路径执行完成的位置，添加一个「变量聚合」节点，将多路分支路径的输出变量（注意只能是相同类型）聚合为一组变量，以供下游节点调用。</p><p>参数提取与问题分类<br />参数提取器和问题分类器，本质上都是 LLM 节点的上层包装。参数提取器需要解决的核心问题是，让大模型从给定的内容中，按照给定的参数类型和说明，提取出固定的字段；而问题分类器则像一个加入了 LLM 的 if-else 节点，将条件分支判断的条件从程序化语言进化为了自然语言。</p><p>参数提取器的功能依赖 LLM 的 Function Call（或 Tool Use）能力。Dify 虽然提供了 Prompt 方案作为模型不支持 Function Call 时的备选，但由于这个 <a href="https://github.com/langgenius/dify/issues/24629" target="_blank"><s>Bug</s></a><s> （发文时修复已经合并）</s>，通过 Prompt 方式使用参数提取器目前实际上不能按预期工作。此时的替代方案是，使用 LLM 节点的 Structured Output 功能，直接指定输出的 JSON Schema，并在下游节点中读取 LLM 节点的结构化输出内的字段。</p><p>参数提取器和问题分类器都可以自定义指令。但是根据 Dify 的设计，用户在这两个节点的自定义指令会被拼接在 System Prompt 之后，后者将指导模型按照节点期望的格式输出。因此，在自定义指令中，只需要补充业务特定的逻辑就可以。</p><p>另外有一个小 Tips：根据官方文档，变量聚合器除了可用于多条 if-else 分支，还可以用于多路问题分类器分支（这也能说明问题分类器就是一个智能的条件分支节点）。这一特性对于多路分支需要执行部分相同操作的情况很有用。</p><h3>LLM 节点</h3><p>作为一个 AI Workflow 构建平台，LLM 节点就是 Dify 中最「AI」的一块拼图。Dify 发展至今，LLM 节点已经支持了文字、图片、音频等多模态的输入输出，具备相当高的可用性。</p><p>并且，足以与同类竞品拉开差距的一点是，<strong>Dify 官方通过 Plugin 的形式维护模型提供商及其模型列表</strong>。常见的模型提供商如 OpenAI，Dify 官方已经将提供商的所有可用模型及其参数写入 Plugin 中，用户只需要添加 Key 即可使用，无需像竞品一样手动为模型逐个配置参数。</p><h4>构建提示词</h4><p>在 Dify 的 LLM 节点内，你可以通过 System、User 和 Assistant 三种身份，构建若干轮上文。这一设计非常方便为 LLM 提供 Few-Shots 示例，以更好符合我们的输出要求。</p><p>这其中，System 即系统提示词，User 即用户输入的请求。Assistant 即LLM做出的回答。在真正的 User Prompt 之前先提供若干轮高质量的 User-Assistant 对话示例，可以极大提高 LLM 输出的稳定性和质量。这种被称为 Few-shots 的方法有点像在提示词里为 LLM 进行临场「训练」，可以让 LLM 对提示词的把握更加精准。</p><p>在任何一个提示词文本框内，输入 <code>/</code> 都可以唤起变量面板，以便快速选择需要插入到提示词中的变量。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/article/97cba3ec7c6098050b9dc603060f7bfd.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Dify 的提示词输入框中可以快速唤起变量面板</figcaption></figure><p><br />提示词文本框内的所有内容（包括变量）都可被复制、粘贴。当然，变量的粘贴必须确保在相同 Workflow 中，且被粘贴节点的前序调用路径中必须包含这个变量的来源节点。</p><p>需要注意的是，尽管你可以在提示词文本框内添加 Array [File] 类型的变量，但是这种用法实际上并不会往提示词中插入内容。<strong>如果你需要往提示词中插入文件，你需要先使用「文档提取器」节点或同类插件，将文件解析为字符串</strong>。</p><h4>结构化输出</h4><p>结构化输出是将大模型能力应用到实际业务中时，一个非常重要的依赖。传统意义上，大模型输出的内容倾向于非结构化的 Markdown 文本，这方便了作为用户的人类阅读，但对于程序解析却极为不利。</p><p>为了解决这个问题，OpenAI 等大模型厂商自很早开始就在增强模型的结构化输出能力。从最原始的 Prompt 约束到后训练对齐，再到通过强制选择 Token 的方式强制模型输出符合要求的 JSON，模型的结构化输出能力越来越稳定，越来越可靠。和参数解析器依赖 Function Call 不同，Dify 的结构化输出没有使用独立节点，而是直接放置在了 LLM 节点中，直接调用模型原生的 Structured Output 能力。对于不支持 Structured Output 能力的模型，Dify 会降级通过 Prompt 方式引导模型，并由 LLM 节点完成 Parse 的任务。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/article/7bfdf7818a45882d3b5f1207be7362fb.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Dify 的 LLM 节点中可设置结构化输出</figcaption></figure><p><br />在结构化输出折叠菜单展开后，即可进入 LLM 节点的结构化输出配置选项。我建议通过 JSON Schema 的方式，更明确地规定每一个字段的属性和描述。和代码生成节点类似地，结构化输出的编辑对话框也支持使用 LLM 辅助生成 JSON Schema，但是你同样可以使用任意大模型生成的 JSON Schema，切换到「JSON Schema」选项卡导入，并切换回「可视化编辑」选项卡检查解析结果。</p><p>我个人不太推荐直接使用现有的 JSON 导入，因为这样做会丢失 JSON Schema 中每一字段的属性和描述，可能不利于模型生成符合条件的 JSON Output。如果你确有这个需要，可以考虑使用带有推理能力的模型，从现有的 JSON 和你的描述中反推一个 JSON Schema，<strong>但请务必亲自检查校对 LLM 提供的 JSON Schema</strong>。</p><p>当一个 LLM 节点使用 Structured Output 后，其输出除 text 外，还会提供一个 <code>array[object]</code> 类型的变量，后续节点可随时引用。</p><h3>RAG 与知识库</h3><h4>父子分块</h4><p>RAG 和知识库部分，V1.x 版本的 Dify 其实和竞品们拉不开太大差距。其中称得上「人无我有」的，似乎也就只剩下「父子分块」值得一提。</p><p>实际上，我认为父子分块是一个非常聪明的功能。通过父子分块，其实相当于允许用户变相给 chunk 中的某一部分内容「增加权重」。实现类似搜索引擎一样的，使用 Keyword 召回父分块的效果。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/article/c25fc55aba9b12ebdb4c64f892a1a61c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Dify 知识库中的父子分段功能</figcaption></figure><p><br />在 Dify 对「父子分块」的描述中，关于父分块和子分块的定义是，<strong>子块用于检索，父块用作上下文</strong>。这一描述初看可能有些晦涩，但你只需要知道：</p><p><strong>子块是从父块切割出的，用于「检索」的最小单元</strong>。比如一个父块中可能前若干行是 UUID，Category，Keywords 或 Title，将其分别拆分为子块后，任意子分块命中检索，都会召回整个父块条目。</p><p><strong>父块是用于「召回」的最小单元</strong>。只要其中任何一个子分块被检索命中，其所在的父分块就会出现在知识库检索结果中。</p><p>在传统的分块检索中，如果需要在一个 chunk 内召回其中的一行文本（比如 Title），其检索置信度会受到 chunk 长度、chunk 内其他文本等因素的影响。因此，分块检索在此时难以保证召回的稳定性。而在采用父子分块并妥善设置分段标识后，Workflow 可以根据更小粒度的文本进行检索召回。在知识库检索前搭配参数提取器进行 Query 改写或字段提取，大多数情况下都可获得不错的检索效果。</p><h4>混合检索</h4><p>和竞品类似地，Dify 也在 RAG 模块中提供向量检索、全文检索和混合检索三种检索模式，并且支持使用 Rerank 模型进行结果重排序。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/article/d84286f20e3764c7af68a2a79d6a41a1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>和竞品类似地，Dify 的知识库也支持多种检索模式</figcaption></figure><p><br />混合检索其实就是同时使用向量检索和全文检索，并按照一定的权重（或使用 Rerank 模型）对结果进行排序，最后再应用 Top K 和 Score 阈值设置。</p><p>就我个人经验而言，Top K 在大多数场景下并不是越大越好，特别是对于参数量有限的模型而言。当模型参数规模缩小到 8B 这个量级，Top K 大于 3 都有可能引起模型的混乱，需要非常精细的提示词引导和上下文管理才能让模型按照预期回复。</p><p>有关 Top K 和 Score 阈值的设置，完全取决于你实际工作流的需要和知识库中文档以及召回 Query 的质量，因此很难有一个放之四海皆准的预设。如果条件允许，不妨使用控制变量法设计若干轮实验，找到最适合你应用场景的参数。</p><h4>知识库的未来</h4><p>在即将到来的 Dify V2 版本中，最令人振奋的莫过于对知识库 Workflow 能力的支持。</p><figure class="image ss-img-wrapper"><img src="https://cdnfile.sspai.com/2025/09/11/article/21720af1cb90d68fd36e0d8560e90113.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Dify 官方在 V2.0.0 Beta1 中提供的知识管道功能的截图</figcaption></figure><p><br />也就是说，未来 Dify 的知识库组件将拥有 Workflow 的编排能力。Query 重写、输出整理等步骤，都可在知识库检索节点内部完成。</p><p>把 RAG 流程管道化以后，不仅可以接入更丰富的数据源、进行更复杂的数据处理，还能整合可复用逻辑，减轻复杂 Workflow 的开发负担。</p><p>我认为，Dify 内部知识库的未来，是要成为一个真正的、具备知识挖掘、整合、编排能力的「知识库」。</p><p>ChatGPT 推出 Connectors，通过对个人知识库和外部信息源的连接，给用户提供更个性化的回答。未来的知识库，也许不再只是一次简单的向量搜索，而是集 Query 重写、外部检索、多模态挖掘、结果筛选为一体的，一条从查询到返回的复杂而完整的数据管道。</p><h2>还有更多</h2><p>Dify 的功能远不限于上文所述。</p><p>Dify 的插件生态发展至今，几乎你能想到的所有需求都已经有了现成的插件可用，哪怕确实没有现成插件，借助 Dify 官方提供的插件开发 Prompt 和 Claude Code，任何人都能用一个小时开发出一个包含基础功能的 Dify 插件。</p><p>Dify 的工作流 API 接入虽有详细的文档，但实际接入过程中，依然有许多坑要踩。何时选择流式、阻塞输出，如何完成异步调用，如何上传特定类型的文件……</p><p>Dify 虽然属于低代码平台，但其设计使其在工作流上的体验具备比 MaxKB、Coze 这类竞品更丰富的复杂编排能力，因此也对用户的程序逻辑和计算机思维提出了更高的要求。</p><p>低代码平台往往不能用于支撑生产业务，因此许多时候被程序员嗤之以鼻。然而，从验证想法的视角而言，低代码平台，特别是以 Dify、Coze、n8n 为代表的，以工作流编排方式构建运行逻辑的产品，实则极大降低了验证的难度和成本。想法是否「能做」，相比 Figma 上一张冷冰冰的原型图，用 Dify 构建一个能够与用户交互、能够实际运行的 Demo，会让想法看起来有说服力的多。</p><p><strong>「如果一个想法连 Dify 都跑不通，那就没有做的必要了。」</strong></p><p style="margin-left: 0px;">&gt; 关注&nbsp;<a href="https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4" target="_blank">少数派小红书</a>，感受精彩数字生活 🍃</p><p style="margin-left: 0px;">&gt; 实用、好用的 <a href="https://sspai.com/mall">正版软件</a>，少数派为你呈现 🚀</p>
                ]]>
            </content:encoded>
        </item>
        
    </channel>
</rss>